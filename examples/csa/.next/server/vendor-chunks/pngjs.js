"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pngjs";
exports.ids = ["vendor-chunks/pngjs"];
exports.modules = {

/***/ "(ssr)/../../node_modules/pngjs/lib/bitmapper.js":
/*!*************************************************!*\
  !*** ../../node_modules/pngjs/lib/bitmapper.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/../../node_modules/pngjs/lib/interlace.js\");\nlet pixelBppMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 1 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = data[rawPos + 1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 2 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 3 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = data[rawPos + 3];\n    }\n];\nlet pixelBppCustomMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, pixelData, pxPos) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = pixelData[1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, pixelData, pxPos) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = pixelData[3];\n    }\n];\nfunction bitRetriever(data, depth) {\n    let leftOver = [];\n    let i = 0;\n    function split() {\n        if (i === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let byte = data[i];\n        i++;\n        let byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n        switch(depth){\n            default:\n                throw new Error(\"unrecognised depth\");\n            case 16:\n                byte2 = data[i];\n                i++;\n                leftOver.push((byte << 8) + byte2);\n                break;\n            case 4:\n                byte2 = byte & 0x0f;\n                byte1 = byte >> 4;\n                leftOver.push(byte1, byte2);\n                break;\n            case 2:\n                byte4 = byte & 3;\n                byte3 = byte >> 2 & 3;\n                byte2 = byte >> 4 & 3;\n                byte1 = byte >> 6 & 3;\n                leftOver.push(byte1, byte2, byte3, byte4);\n                break;\n            case 1:\n                byte8 = byte & 1;\n                byte7 = byte >> 1 & 1;\n                byte6 = byte >> 2 & 1;\n                byte5 = byte >> 3 & 1;\n                byte4 = byte >> 4 & 1;\n                byte3 = byte >> 5 & 1;\n                byte2 = byte >> 6 & 1;\n                byte1 = byte >> 7 & 1;\n                leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n                break;\n        }\n    }\n    return {\n        get: function(count) {\n            while(leftOver.length < count){\n                split();\n            }\n            let returner = leftOver.slice(0, count);\n            leftOver = leftOver.slice(count);\n            return returner;\n        },\n        resetAfterLine: function() {\n            leftOver.length = 0;\n        },\n        end: function() {\n            if (i !== data.length) {\n                throw new Error(\"extra data found\");\n            }\n        }\n    };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppMapper[bpp](pxData, data, pxPos, rawPos);\n            rawPos += bpp; //eslint-disable-line no-param-reassign\n        }\n    }\n    return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pixelData = bits.get(bpp);\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);\n        }\n        bits.resetAfterLine();\n    }\n}\nexports.dataToBitMap = function(data, bitmapInfo) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let depth = bitmapInfo.depth;\n    let bpp = bitmapInfo.bpp;\n    let interlace = bitmapInfo.interlace;\n    let bits;\n    if (depth !== 8) {\n        bits = bitRetriever(data, depth);\n    }\n    let pxData;\n    if (depth <= 8) {\n        pxData = Buffer.alloc(width * height * 4);\n    } else {\n        pxData = new Uint16Array(width * height * 4);\n    }\n    let maxBit = Math.pow(2, depth) - 1;\n    let rawPos = 0;\n    let images;\n    let getPxPos;\n    if (interlace) {\n        images = interlaceUtils.getImagePasses(width, height);\n        getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n    } else {\n        let nonInterlacedPxPos = 0;\n        getPxPos = function() {\n            let returner = nonInterlacedPxPos;\n            nonInterlacedPxPos += 4;\n            return returner;\n        };\n        images = [\n            {\n                width: width,\n                height: height\n            }\n        ];\n    }\n    for(let imageIndex = 0; imageIndex < images.length; imageIndex++){\n        if (depth === 8) {\n            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n        } else {\n            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n        }\n    }\n    if (depth === 8) {\n        if (rawPos !== data.length) {\n            throw new Error(\"extra data found\");\n        }\n    } else {\n        bits.end();\n    }\n    return pxData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/bitmapper.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/bitpacker.js":
/*!*************************************************!*\
  !*** ../../node_modules/pngjs/lib/bitpacker.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pngjs/lib/constants.js\");\nmodule.exports = function(dataIn, width, height, options) {\n    let outHasAlpha = [\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n        let bigEndian = function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            // Int16Array uses the platform's endianness.\n            return new Int16Array(buffer)[0] !== 256;\n        }();\n        // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n        if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n            return dataIn;\n        }\n    }\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    let data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    let maxValue = 255;\n    let inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n        inBpp = 3;\n    }\n    let outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n        maxValue = 65535;\n        outBpp *= 2;\n    }\n    let outData = Buffer.alloc(width * height * outBpp);\n    let inIndex = 0;\n    let outIndex = 0;\n    let bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n        bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n        bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n        bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n        let red;\n        let green;\n        let blue;\n        let alpha = maxValue;\n        switch(options.inputColorType){\n            case constants.COLORTYPE_COLOR_ALPHA:\n                alpha = data[inIndex + 3];\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_COLOR:\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_ALPHA:\n                alpha = data[inIndex + 1];\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            case constants.COLORTYPE_GRAYSCALE:\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            default:\n                throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n        }\n        if (options.inputHasAlpha) {\n            if (!outHasAlpha) {\n                alpha /= maxValue;\n                red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n                green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n                blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n            }\n        }\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n        };\n    }\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let rgba = getRGBA(data, inIndex);\n            switch(options.colorType){\n                case constants.COLORTYPE_COLOR_ALPHA:\n                case constants.COLORTYPE_COLOR:\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = rgba.red;\n                        outData[outIndex + 1] = rgba.green;\n                        outData[outIndex + 2] = rgba.blue;\n                        if (outHasAlpha) {\n                            outData[outIndex + 3] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(rgba.red, outIndex);\n                        outData.writeUInt16BE(rgba.green, outIndex + 2);\n                        outData.writeUInt16BE(rgba.blue, outIndex + 4);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n                        }\n                    }\n                    break;\n                case constants.COLORTYPE_ALPHA:\n                case constants.COLORTYPE_GRAYSCALE:\n                    {\n                        // Convert to grayscale and alpha\n                        let grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n                        if (options.bitDepth === 8) {\n                            outData[outIndex] = grayscale;\n                            if (outHasAlpha) {\n                                outData[outIndex + 1] = rgba.alpha;\n                            }\n                        } else {\n                            outData.writeUInt16BE(grayscale, outIndex);\n                            if (outHasAlpha) {\n                                outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                            }\n                        }\n                        break;\n                    }\n                default:\n                    throw new Error(\"unrecognised color Type \" + options.colorType);\n            }\n            inIndex += inBpp;\n            outIndex += outBpp;\n        }\n    }\n    return outData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/bitpacker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/chunkstream.js":
/*!***************************************************!*\
  !*** ../../node_modules/pngjs/lib/chunkstream.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet ChunkStream = module.exports = function() {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n};\nutil.inherits(ChunkStream, Stream);\nChunkStream.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n    process.nextTick((function() {\n        this._process();\n        // its paused and there is not enought data then ask for more\n        if (this._paused && this._reads && this._reads.length > 0) {\n            this._paused = false;\n            this.emit(\"drain\");\n        }\n    }).bind(this));\n};\nChunkStream.prototype.write = function(data, encoding) {\n    if (!this.writable) {\n        this.emit(\"error\", new Error(\"Stream not writable\"));\n        return false;\n    }\n    let dataBuffer;\n    if (Buffer.isBuffer(data)) {\n        dataBuffer = data;\n    } else {\n        dataBuffer = Buffer.from(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n        this._paused = true;\n    }\n    return this.writable && !this._paused;\n};\nChunkStream.prototype.end = function(data, encoding) {\n    if (data) {\n        this.write(data, encoding);\n    }\n    this.writable = false;\n    // already destroyed\n    if (!this._buffers) {\n        return;\n    }\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n        this._end();\n    } else {\n        this._buffers.push(null);\n        this._process();\n    }\n};\nChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\nChunkStream.prototype._end = function() {\n    if (this._reads.length > 0) {\n        this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n};\nChunkStream.prototype.destroy = function() {\n    if (!this._buffers) {\n        return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n};\nChunkStream.prototype._processReadAllowingLess = function(read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n    // first we need to peek into first buffer\n    let smallerBuf = this._buffers[0];\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n        this._buffered -= read.length;\n        this._buffers[0] = smallerBuf.slice(read.length);\n        read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n        // ok this is less than maximum length so use it all\n        this._buffered -= smallerBuf.length;\n        this._buffers.shift(); // == smallerBuf\n        read.func.call(this, smallerBuf);\n    }\n};\nChunkStream.prototype._processRead = function(read) {\n    this._reads.shift(); // == read\n    let pos = 0;\n    let count = 0;\n    let data = Buffer.alloc(read.length);\n    // create buffer for all data\n    while(pos < read.length){\n        let buf = this._buffers[count++];\n        let len = Math.min(buf.length, read.length - pos);\n        buf.copy(data, pos, 0, len);\n        pos += len;\n        // last buffer wasn't used all so just slice it and leave\n        if (len !== buf.length) {\n            this._buffers[--count] = buf.slice(len);\n        }\n    }\n    // remove all used buffers\n    if (count > 0) {\n        this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n};\nChunkStream.prototype._process = function() {\n    try {\n        // as long as there is any data and read requests\n        while(this._buffered > 0 && this._reads && this._reads.length > 0){\n            let read = this._reads[0];\n            // read any data (but no more than length)\n            if (read.allowLess) {\n                this._processReadAllowingLess(read);\n            } else if (this._buffered >= read.length) {\n                // ok we can meet some expectations\n                this._processRead(read);\n            } else {\n                break;\n            }\n        }\n        if (this._buffers && !this.writable) {\n            this._end();\n        }\n    } catch (ex) {\n        this.emit(\"error\", ex);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/chunkstream.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/constants.js":
/*!*************************************************!*\
  !*** ../../node_modules/pngjs/lib/constants.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    PNG_SIGNATURE: [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ],\n    TYPE_IHDR: 0x49484452,\n    TYPE_IEND: 0x49454e44,\n    TYPE_IDAT: 0x49444154,\n    TYPE_PLTE: 0x504c5445,\n    TYPE_tRNS: 0x74524e53,\n    TYPE_gAMA: 0x67414d41,\n    // color-type bits\n    COLORTYPE_GRAYSCALE: 0,\n    COLORTYPE_PALETTE: 1,\n    COLORTYPE_COLOR: 2,\n    COLORTYPE_ALPHA: 4,\n    // color-type combinations\n    COLORTYPE_PALETTE_COLOR: 3,\n    COLORTYPE_COLOR_ALPHA: 6,\n    COLORTYPE_TO_BPP_MAP: {\n        0: 1,\n        2: 3,\n        3: 1,\n        4: 2,\n        6: 4\n    },\n    GAMMA_DIVISION: 100000\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLGVBQWU7UUFBQztRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFFL0RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBRVgsa0JBQWtCO0lBQ2xCQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFFakIsMEJBQTBCO0lBQzFCQyx5QkFBeUI7SUFDekJDLHVCQUF1QjtJQUV2QkMsc0JBQXNCO1FBQ3BCLEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO0lBQ0w7SUFFQUMsZ0JBQWdCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvY29uc3RhbnRzLmpzP2FkZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQTkdfU0lHTkFUVVJFOiBbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV0sXG5cbiAgVFlQRV9JSERSOiAweDQ5NDg0NDUyLFxuICBUWVBFX0lFTkQ6IDB4NDk0NTRlNDQsXG4gIFRZUEVfSURBVDogMHg0OTQ0NDE1NCxcbiAgVFlQRV9QTFRFOiAweDUwNGM1NDQ1LFxuICBUWVBFX3RSTlM6IDB4NzQ1MjRlNTMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gIFRZUEVfZ0FNQTogMHg2NzQxNGQ0MSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAvLyBjb2xvci10eXBlIGJpdHNcbiAgQ09MT1JUWVBFX0dSQVlTQ0FMRTogMCxcbiAgQ09MT1JUWVBFX1BBTEVUVEU6IDEsXG4gIENPTE9SVFlQRV9DT0xPUjogMixcbiAgQ09MT1JUWVBFX0FMUEhBOiA0LCAvLyBlLmcuIGdyYXlzY2FsZSBhbmQgYWxwaGFcblxuICAvLyBjb2xvci10eXBlIGNvbWJpbmF0aW9uc1xuICBDT0xPUlRZUEVfUEFMRVRURV9DT0xPUjogMyxcbiAgQ09MT1JUWVBFX0NPTE9SX0FMUEhBOiA2LFxuXG4gIENPTE9SVFlQRV9UT19CUFBfTUFQOiB7XG4gICAgMDogMSxcbiAgICAyOiAzLFxuICAgIDM6IDEsXG4gICAgNDogMixcbiAgICA2OiA0LFxuICB9LFxuXG4gIEdBTU1BX0RJVklTSU9OOiAxMDAwMDAsXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQTkdfU0lHTkFUVVJFIiwiVFlQRV9JSERSIiwiVFlQRV9JRU5EIiwiVFlQRV9JREFUIiwiVFlQRV9QTFRFIiwiVFlQRV90Uk5TIiwiVFlQRV9nQU1BIiwiQ09MT1JUWVBFX0dSQVlTQ0FMRSIsIkNPTE9SVFlQRV9QQUxFVFRFIiwiQ09MT1JUWVBFX0NPTE9SIiwiQ09MT1JUWVBFX0FMUEhBIiwiQ09MT1JUWVBFX1BBTEVUVEVfQ09MT1IiLCJDT0xPUlRZUEVfQ09MT1JfQUxQSEEiLCJDT0xPUlRZUEVfVE9fQlBQX01BUCIsIkdBTU1BX0RJVklTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/crc.js":
/*!*******************************************!*\
  !*** ../../node_modules/pngjs/lib/crc.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nlet crcTable = [];\n(function() {\n    for(let i = 0; i < 256; i++){\n        let currentCrc = i;\n        for(let j = 0; j < 8; j++){\n            if (currentCrc & 1) {\n                currentCrc = 0xedb88320 ^ currentCrc >>> 1;\n            } else {\n                currentCrc = currentCrc >>> 1;\n            }\n        }\n        crcTable[i] = currentCrc;\n    }\n})();\nlet CrcCalculator = module.exports = function() {\n    this._crc = -1;\n};\nCrcCalculator.prototype.write = function(data) {\n    for(let i = 0; i < data.length; i++){\n        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;\n    }\n    return true;\n};\nCrcCalculator.prototype.crc32 = function() {\n    return this._crc ^ -1;\n};\nCrcCalculator.crc32 = function(buf) {\n    let crc = -1;\n    for(let i = 0; i < buf.length; i++){\n        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;\n    }\n    return crc ^ -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jcmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxXQUFXLEVBQUU7QUFFaEI7SUFDQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQzVCLElBQUlDLGFBQWFEO1FBQ2pCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7WUFDMUIsSUFBSUQsYUFBYSxHQUFHO2dCQUNsQkEsYUFBYSxhQUFjQSxlQUFlO1lBQzVDLE9BQU87Z0JBQ0xBLGFBQWFBLGVBQWU7WUFDOUI7UUFDRjtRQUNBRixRQUFRLENBQUNDLEVBQUUsR0FBR0M7SUFDaEI7QUFDRjtBQUVBLElBQUlFLGdCQUFpQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ3BDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUM7QUFDZjtBQUVBSCxjQUFjSSxTQUFTLENBQUNDLEtBQUssR0FBRyxTQUFVQyxJQUFJO0lBQzVDLElBQUssSUFBSVQsSUFBSSxHQUFHQSxJQUFJUyxLQUFLQyxNQUFNLEVBQUVWLElBQUs7UUFDcEMsSUFBSSxDQUFDTSxJQUFJLEdBQUdQLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQ08sSUFBSSxHQUFHRyxJQUFJLENBQUNULEVBQUUsSUFBSSxLQUFLLEdBQUksSUFBSSxDQUFDTSxJQUFJLEtBQUs7SUFDdEU7SUFDQSxPQUFPO0FBQ1Q7QUFFQUgsY0FBY0ksU0FBUyxDQUFDSSxLQUFLLEdBQUc7SUFDOUIsT0FBTyxJQUFJLENBQUNMLElBQUksR0FBRyxDQUFDO0FBQ3RCO0FBRUFILGNBQWNRLEtBQUssR0FBRyxTQUFVQyxHQUFHO0lBQ2pDLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUssSUFBSWIsSUFBSSxHQUFHQSxJQUFJWSxJQUFJRixNQUFNLEVBQUVWLElBQUs7UUFDbkNhLE1BQU1kLFFBQVEsQ0FBQyxDQUFDYyxNQUFNRCxHQUFHLENBQUNaLEVBQUUsSUFBSSxLQUFLLEdBQUlhLFFBQVE7SUFDbkQ7SUFDQSxPQUFPQSxNQUFNLENBQUM7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jcmMuanM/OTkyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IGNyY1RhYmxlID0gW107XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICBsZXQgY3VycmVudENyYyA9IGk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIHtcbiAgICAgIGlmIChjdXJyZW50Q3JjICYgMSkge1xuICAgICAgICBjdXJyZW50Q3JjID0gMHhlZGI4ODMyMCBeIChjdXJyZW50Q3JjID4+PiAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRDcmMgPSBjdXJyZW50Q3JjID4+PiAxO1xuICAgICAgfVxuICAgIH1cbiAgICBjcmNUYWJsZVtpXSA9IGN1cnJlbnRDcmM7XG4gIH1cbn0pKCk7XG5cbmxldCBDcmNDYWxjdWxhdG9yID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jcmMgPSAtMTtcbn0pO1xuXG5DcmNDYWxjdWxhdG9yLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2NyYyA9IGNyY1RhYmxlWyh0aGlzLl9jcmMgXiBkYXRhW2ldKSAmIDB4ZmZdIF4gKHRoaXMuX2NyYyA+Pj4gOCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DcmNDYWxjdWxhdG9yLnByb3RvdHlwZS5jcmMzMiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2NyYyBeIC0xO1xufTtcblxuQ3JjQ2FsY3VsYXRvci5jcmMzMiA9IGZ1bmN0aW9uIChidWYpIHtcbiAgbGV0IGNyYyA9IC0xO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgIGNyYyA9IGNyY1RhYmxlWyhjcmMgXiBidWZbaV0pICYgMHhmZl0gXiAoY3JjID4+PiA4KTtcbiAgfVxuICByZXR1cm4gY3JjIF4gLTE7XG59O1xuIl0sIm5hbWVzIjpbImNyY1RhYmxlIiwiaSIsImN1cnJlbnRDcmMiLCJqIiwiQ3JjQ2FsY3VsYXRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJfY3JjIiwicHJvdG90eXBlIiwid3JpdGUiLCJkYXRhIiwibGVuZ3RoIiwiY3JjMzIiLCJidWYiLCJjcmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/crc.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/filter-pack.js":
/*!***************************************************!*\
  !*** ../../node_modules/pngjs/lib/filter-pack.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/../../node_modules/pngjs/lib/paeth-predictor.js\");\nfunction filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        rawData[rawPos + x] = pxData[pxPos + x];\n    }\n}\nfunction filterSumNone(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let i = pxPos; i < length; i++){\n        sum += Math.abs(pxData[i]);\n    }\n    return sum;\n}\nfunction filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumSub(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - up;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumUp(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let x = pxPos; x < length; x++){\n        let up = pxPos > 0 ? pxData[x - byteWidth] : 0;\n        let val = pxData[x] - up;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumAvg(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumPaeth(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nlet filters = {\n    0: filterNone,\n    1: filterSub,\n    2: filterUp,\n    3: filterAvg,\n    4: filterPaeth\n};\nlet filterSums = {\n    0: filterSumNone,\n    1: filterSumSub,\n    2: filterSumUp,\n    3: filterSumAvg,\n    4: filterSumPaeth\n};\nmodule.exports = function(pxData, width, height, options, bpp) {\n    let filterTypes;\n    if (!(\"filterType\" in options) || options.filterType === -1) {\n        filterTypes = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n    } else if (typeof options.filterType === \"number\") {\n        filterTypes = [\n            options.filterType\n        ];\n    } else {\n        throw new Error(\"unrecognised filter types\");\n    }\n    if (options.bitDepth === 16) {\n        bpp *= 2;\n    }\n    let byteWidth = width * bpp;\n    let rawPos = 0;\n    let pxPos = 0;\n    let rawData = Buffer.alloc((byteWidth + 1) * height);\n    let sel = filterTypes[0];\n    for(let y = 0; y < height; y++){\n        if (filterTypes.length > 1) {\n            // find best filter for this line (with lowest sum of values)\n            let min = Infinity;\n            for(let i = 0; i < filterTypes.length; i++){\n                let sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);\n                if (sum < min) {\n                    sel = filterTypes[i];\n                    min = sum;\n                }\n            }\n        }\n        rawData[rawPos] = sel;\n        rawPos++;\n        filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);\n        rawPos += byteWidth;\n        pxPos += byteWidth;\n    }\n    return rawData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/filter-pack.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/filter-parse-async.js":
/*!**********************************************************!*\
  !*** ../../node_modules/pngjs/lib/filter-parse-async.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/../../node_modules/pngjs/lib/chunkstream.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/../../node_modules/pngjs/lib/filter-parse.js\");\nlet FilterAsync = module.exports = function(bitmapInfo) {\n    ChunkStream.call(this);\n    let buffers = [];\n    let that = this;\n    this._filter = new Filter(bitmapInfo, {\n        read: this.read.bind(this),\n        write: function(buffer) {\n            buffers.push(buffer);\n        },\n        complete: function() {\n            that.emit(\"complete\", Buffer.concat(buffers));\n        }\n    });\n    this._filter.start();\n};\nutil.inherits(FilterAsync, ChunkStream);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UtYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQyx3RUFBZTtBQUN6QyxJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQywwRUFBZ0I7QUFFckMsSUFBSUcsY0FBZUMsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLFVBQVU7SUFDdERMLFlBQVlNLElBQUksQ0FBQyxJQUFJO0lBRXJCLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJUixPQUFPSSxZQUFZO1FBQ3BDSyxNQUFNLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUN6QkMsT0FBTyxTQUFVQyxNQUFNO1lBQ3JCTixRQUFRTyxJQUFJLENBQUNEO1FBQ2Y7UUFDQUUsVUFBVTtZQUNSUCxLQUFLUSxJQUFJLENBQUMsWUFBWUMsT0FBT0MsTUFBTSxDQUFDWDtRQUN0QztJQUNGO0lBRUEsSUFBSSxDQUFDRSxPQUFPLENBQUNVLEtBQUs7QUFDcEI7QUFDQXJCLEtBQUtzQixRQUFRLENBQUNsQixhQUFhRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NzYS8uLi8uLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1hc3luYy5qcz9hNDdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IENodW5rU3RyZWFtID0gcmVxdWlyZShcIi4vY2h1bmtzdHJlYW1cIik7XG5sZXQgRmlsdGVyID0gcmVxdWlyZShcIi4vZmlsdGVyLXBhcnNlXCIpO1xuXG5sZXQgRmlsdGVyQXN5bmMgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwSW5mbykge1xuICBDaHVua1N0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIGxldCBidWZmZXJzID0gW107XG4gIGxldCB0aGF0ID0gdGhpcztcbiAgdGhpcy5fZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogdGhpcy5yZWFkLmJpbmQodGhpcyksXG4gICAgd3JpdGU6IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChidWZmZXIpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuZW1pdChcImNvbXBsZXRlXCIsIEJ1ZmZlci5jb25jYXQoYnVmZmVycykpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHRoaXMuX2ZpbHRlci5zdGFydCgpO1xufSk7XG51dGlsLmluaGVyaXRzKEZpbHRlckFzeW5jLCBDaHVua1N0cmVhbSk7XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJDaHVua1N0cmVhbSIsIkZpbHRlciIsIkZpbHRlckFzeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpdG1hcEluZm8iLCJjYWxsIiwiYnVmZmVycyIsInRoYXQiLCJfZmlsdGVyIiwicmVhZCIsImJpbmQiLCJ3cml0ZSIsImJ1ZmZlciIsInB1c2giLCJjb21wbGV0ZSIsImVtaXQiLCJCdWZmZXIiLCJjb25jYXQiLCJzdGFydCIsImluaGVyaXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/filter-parse-async.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/filter-parse-sync.js":
/*!*********************************************************!*\
  !*** ../../node_modules/pngjs/lib/filter-parse-sync.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/../../node_modules/pngjs/lib/sync-reader.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/../../node_modules/pngjs/lib/filter-parse.js\");\nexports.process = function(inBuffer, bitmapInfo) {\n    let outBuffers = [];\n    let reader = new SyncReader(inBuffer);\n    let filter = new Filter(bitmapInfo, {\n        read: reader.read.bind(reader),\n        write: function(bufferPart) {\n            outBuffers.push(bufferPart);\n        },\n        complete: function() {}\n    });\n    filter.start();\n    reader.process();\n    return Buffer.concat(outBuffers);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2Utc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDLHdFQUFlO0FBQ3hDLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLDBFQUFnQjtBQUVyQ0UsZUFBZSxHQUFHLFNBQVVFLFFBQVEsRUFBRUMsVUFBVTtJQUM5QyxJQUFJQyxhQUFhLEVBQUU7SUFDbkIsSUFBSUMsU0FBUyxJQUFJUixXQUFXSztJQUM1QixJQUFJSSxTQUFTLElBQUlQLE9BQU9JLFlBQVk7UUFDbENJLE1BQU1GLE9BQU9FLElBQUksQ0FBQ0MsSUFBSSxDQUFDSDtRQUN2QkksT0FBTyxTQUFVQyxVQUFVO1lBQ3pCTixXQUFXTyxJQUFJLENBQUNEO1FBQ2xCO1FBQ0FFLFVBQVUsWUFBYTtJQUN6QjtJQUVBTixPQUFPTyxLQUFLO0lBQ1pSLE9BQU9KLE9BQU87SUFFZCxPQUFPYSxPQUFPQyxNQUFNLENBQUNYO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhcnNlLXN5bmMuanM/NGI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IFN5bmNSZWFkZXIgPSByZXF1aXJlKFwiLi9zeW5jLXJlYWRlclwiKTtcbmxldCBGaWx0ZXIgPSByZXF1aXJlKFwiLi9maWx0ZXItcGFyc2VcIik7XG5cbmV4cG9ydHMucHJvY2VzcyA9IGZ1bmN0aW9uIChpbkJ1ZmZlciwgYml0bWFwSW5mbykge1xuICBsZXQgb3V0QnVmZmVycyA9IFtdO1xuICBsZXQgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoaW5CdWZmZXIpO1xuICBsZXQgZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIHdyaXRlOiBmdW5jdGlvbiAoYnVmZmVyUGFydCkge1xuICAgICAgb3V0QnVmZmVycy5wdXNoKGJ1ZmZlclBhcnQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHt9LFxuICB9KTtcblxuICBmaWx0ZXIuc3RhcnQoKTtcbiAgcmVhZGVyLnByb2Nlc3MoKTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXRCdWZmZXJzKTtcbn07XG4iXSwibmFtZXMiOlsiU3luY1JlYWRlciIsInJlcXVpcmUiLCJGaWx0ZXIiLCJleHBvcnRzIiwicHJvY2VzcyIsImluQnVmZmVyIiwiYml0bWFwSW5mbyIsIm91dEJ1ZmZlcnMiLCJyZWFkZXIiLCJmaWx0ZXIiLCJyZWFkIiwiYmluZCIsIndyaXRlIiwiYnVmZmVyUGFydCIsInB1c2giLCJjb21wbGV0ZSIsInN0YXJ0IiwiQnVmZmVyIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/filter-parse-sync.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/filter-parse.js":
/*!****************************************************!*\
  !*** ../../node_modules/pngjs/lib/filter-parse.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/../../node_modules/pngjs/lib/interlace.js\");\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/../../node_modules/pngjs/lib/paeth-predictor.js\");\nfunction getByteWidth(width, bpp, depth) {\n    let byteWidth = width * bpp;\n    if (depth !== 8) {\n        byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n}\nlet Filter = module.exports = function(bitmapInfo, dependencies) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let interlace = bitmapInfo.interlace;\n    let bpp = bitmapInfo.bpp;\n    let depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n        let passes = interlaceUtils.getImagePasses(width, height);\n        for(let i = 0; i < passes.length; i++){\n            this._images.push({\n                byteWidth: getByteWidth(passes[i].width, bpp, depth),\n                height: passes[i].height,\n                lineIndex: 0\n            });\n        }\n    } else {\n        this._images.push({\n            byteWidth: getByteWidth(width, bpp, depth),\n            height: height,\n            lineIndex: 0\n        });\n    }\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n        this._xComparison = bpp;\n    } else if (depth === 16) {\n        this._xComparison = bpp * 2;\n    } else {\n        this._xComparison = 1;\n    }\n};\nFilter.prototype.start = function() {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n};\nFilter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        unfilteredLine[x] = rawByte + f1Left;\n    }\n};\nFilter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f2Up = lastLine ? lastLine[x] : 0;\n        unfilteredLine[x] = rawByte + f2Up;\n    }\n};\nFilter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f3Up = lastLine ? lastLine[x] : 0;\n        let f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f3Add = Math.floor((f3Left + f3Up) / 2);\n        unfilteredLine[x] = rawByte + f3Add;\n    }\n};\nFilter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f4Up = lastLine ? lastLine[x] : 0;\n        let f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n        let f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n        unfilteredLine[x] = rawByte + f4Add;\n    }\n};\nFilter.prototype._reverseFilterLine = function(rawData) {\n    let filter = rawData[0];\n    let unfilteredLine;\n    let currentImage = this._images[this._imageIndex];\n    let byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n        unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n        unfilteredLine = Buffer.alloc(byteWidth);\n        switch(filter){\n            case 1:\n                this._unFilterType1(rawData, unfilteredLine, byteWidth);\n                break;\n            case 2:\n                this._unFilterType2(rawData, unfilteredLine, byteWidth);\n                break;\n            case 3:\n                this._unFilterType3(rawData, unfilteredLine, byteWidth);\n                break;\n            case 4:\n                this._unFilterType4(rawData, unfilteredLine, byteWidth);\n                break;\n            default:\n                throw new Error(\"Unrecognised filter type - \" + filter);\n        }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n        this._lastLine = null;\n        this._imageIndex++;\n        currentImage = this._images[this._imageIndex];\n    } else {\n        this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n        // read, using the byte width that may be from the new current image\n        this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n        this._lastLine = null;\n        this.complete();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxpQkFBaUJDLG1CQUFPQSxDQUFDLG9FQUFhO0FBQzFDLElBQUlDLGlCQUFpQkQsbUJBQU9BLENBQUMsZ0ZBQW1CO0FBRWhELFNBQVNFLGFBQWFDLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxLQUFLO0lBQ3JDLElBQUlDLFlBQVlILFFBQVFDO0lBQ3hCLElBQUlDLFVBQVUsR0FBRztRQUNmQyxZQUFZQyxLQUFLQyxJQUFJLENBQUNGLFlBQWEsS0FBSUQsS0FBSTtJQUM3QztJQUNBLE9BQU9DO0FBQ1Q7QUFFQSxJQUFJRyxTQUFVQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsVUFBVSxFQUFFQyxZQUFZO0lBQy9ELElBQUlWLFFBQVFTLFdBQVdULEtBQUs7SUFDNUIsSUFBSVcsU0FBU0YsV0FBV0UsTUFBTTtJQUM5QixJQUFJQyxZQUFZSCxXQUFXRyxTQUFTO0lBQ3BDLElBQUlYLE1BQU1RLFdBQVdSLEdBQUc7SUFDeEIsSUFBSUMsUUFBUU8sV0FBV1AsS0FBSztJQUU1QixJQUFJLENBQUNXLElBQUksR0FBR0gsYUFBYUcsSUFBSTtJQUM3QixJQUFJLENBQUNDLEtBQUssR0FBR0osYUFBYUksS0FBSztJQUMvQixJQUFJLENBQUNDLFFBQVEsR0FBR0wsYUFBYUssUUFBUTtJQUVyQyxJQUFJLENBQUNDLFdBQVcsR0FBRztJQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO0lBQ2pCLElBQUlMLFdBQVc7UUFDYixJQUFJTSxTQUFTdEIsZUFBZXVCLGNBQWMsQ0FBQ25CLE9BQU9XO1FBQ2xELElBQUssSUFBSVMsSUFBSSxHQUFHQSxJQUFJRixPQUFPRyxNQUFNLEVBQUVELElBQUs7WUFDdEMsSUFBSSxDQUFDSCxPQUFPLENBQUNLLElBQUksQ0FBQztnQkFDaEJuQixXQUFXSixhQUFhbUIsTUFBTSxDQUFDRSxFQUFFLENBQUNwQixLQUFLLEVBQUVDLEtBQUtDO2dCQUM5Q1MsUUFBUU8sTUFBTSxDQUFDRSxFQUFFLENBQUNULE1BQU07Z0JBQ3hCWSxXQUFXO1lBQ2I7UUFDRjtJQUNGLE9BQU87UUFDTCxJQUFJLENBQUNOLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDO1lBQ2hCbkIsV0FBV0osYUFBYUMsT0FBT0MsS0FBS0M7WUFDcENTLFFBQVFBO1lBQ1JZLFdBQVc7UUFDYjtJQUNGO0lBRUEsMkRBQTJEO0lBQzNELG1GQUFtRjtJQUNuRiw0RkFBNEY7SUFDNUYseUZBQXlGO0lBQ3pGLElBQUlyQixVQUFVLEdBQUc7UUFDZixJQUFJLENBQUNzQixZQUFZLEdBQUd2QjtJQUN0QixPQUFPLElBQUlDLFVBQVUsSUFBSTtRQUN2QixJQUFJLENBQUNzQixZQUFZLEdBQUd2QixNQUFNO0lBQzVCLE9BQU87UUFDTCxJQUFJLENBQUN1QixZQUFZLEdBQUc7SUFDdEI7QUFDRjtBQUVBbEIsT0FBT21CLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO0lBQ3ZCLElBQUksQ0FBQ2IsSUFBSSxDQUNQLElBQUksQ0FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQ0QsV0FBVyxDQUFDLENBQUNiLFNBQVMsR0FBRyxHQUMzQyxJQUFJLENBQUN3QixrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7QUFFckM7QUFFQXRCLE9BQU9tQixTQUFTLENBQUNJLGNBQWMsR0FBRyxTQUNoQ0MsT0FBTyxFQUNQQyxjQUFjLEVBQ2Q1QixTQUFTO0lBRVQsSUFBSTZCLGNBQWMsSUFBSSxDQUFDUixZQUFZO0lBQ25DLElBQUlTLGNBQWNELGNBQWM7SUFFaEMsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUkvQixXQUFXK0IsSUFBSztRQUNsQyxJQUFJQyxVQUFVTCxPQUFPLENBQUMsSUFBSUksRUFBRTtRQUM1QixJQUFJRSxTQUFTRixJQUFJRCxjQUFjRixjQUFjLENBQUNHLElBQUlGLFlBQVksR0FBRztRQUNqRUQsY0FBYyxDQUFDRyxFQUFFLEdBQUdDLFVBQVVDO0lBQ2hDO0FBQ0Y7QUFFQTlCLE9BQU9tQixTQUFTLENBQUNZLGNBQWMsR0FBRyxTQUNoQ1AsT0FBTyxFQUNQQyxjQUFjLEVBQ2Q1QixTQUFTO0lBRVQsSUFBSW1DLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBRTdCLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJL0IsV0FBVytCLElBQUs7UUFDbEMsSUFBSUMsVUFBVUwsT0FBTyxDQUFDLElBQUlJLEVBQUU7UUFDNUIsSUFBSU0sT0FBT0YsV0FBV0EsUUFBUSxDQUFDSixFQUFFLEdBQUc7UUFDcENILGNBQWMsQ0FBQ0csRUFBRSxHQUFHQyxVQUFVSztJQUNoQztBQUNGO0FBRUFsQyxPQUFPbUIsU0FBUyxDQUFDZ0IsY0FBYyxHQUFHLFNBQ2hDWCxPQUFPLEVBQ1BDLGNBQWMsRUFDZDVCLFNBQVM7SUFFVCxJQUFJNkIsY0FBYyxJQUFJLENBQUNSLFlBQVk7SUFDbkMsSUFBSVMsY0FBY0QsY0FBYztJQUNoQyxJQUFJTSxXQUFXLElBQUksQ0FBQ0MsU0FBUztJQUU3QixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSS9CLFdBQVcrQixJQUFLO1FBQ2xDLElBQUlDLFVBQVVMLE9BQU8sQ0FBQyxJQUFJSSxFQUFFO1FBQzVCLElBQUlRLE9BQU9KLFdBQVdBLFFBQVEsQ0FBQ0osRUFBRSxHQUFHO1FBQ3BDLElBQUlTLFNBQVNULElBQUlELGNBQWNGLGNBQWMsQ0FBQ0csSUFBSUYsWUFBWSxHQUFHO1FBQ2pFLElBQUlZLFFBQVF4QyxLQUFLeUMsS0FBSyxDQUFDLENBQUNGLFNBQVNELElBQUcsSUFBSztRQUN6Q1gsY0FBYyxDQUFDRyxFQUFFLEdBQUdDLFVBQVVTO0lBQ2hDO0FBQ0Y7QUFFQXRDLE9BQU9tQixTQUFTLENBQUNxQixjQUFjLEdBQUcsU0FDaENoQixPQUFPLEVBQ1BDLGNBQWMsRUFDZDVCLFNBQVM7SUFFVCxJQUFJNkIsY0FBYyxJQUFJLENBQUNSLFlBQVk7SUFDbkMsSUFBSVMsY0FBY0QsY0FBYztJQUNoQyxJQUFJTSxXQUFXLElBQUksQ0FBQ0MsU0FBUztJQUU3QixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSS9CLFdBQVcrQixJQUFLO1FBQ2xDLElBQUlDLFVBQVVMLE9BQU8sQ0FBQyxJQUFJSSxFQUFFO1FBQzVCLElBQUlhLE9BQU9ULFdBQVdBLFFBQVEsQ0FBQ0osRUFBRSxHQUFHO1FBQ3BDLElBQUljLFNBQVNkLElBQUlELGNBQWNGLGNBQWMsQ0FBQ0csSUFBSUYsWUFBWSxHQUFHO1FBQ2pFLElBQUlpQixXQUFXZixJQUFJRCxlQUFlSyxXQUFXQSxRQUFRLENBQUNKLElBQUlGLFlBQVksR0FBRztRQUN6RSxJQUFJa0IsUUFBUXBELGVBQWVrRCxRQUFRRCxNQUFNRTtRQUN6Q2xCLGNBQWMsQ0FBQ0csRUFBRSxHQUFHQyxVQUFVZTtJQUNoQztBQUNGO0FBRUE1QyxPQUFPbUIsU0FBUyxDQUFDRSxrQkFBa0IsR0FBRyxTQUFVRyxPQUFPO0lBQ3JELElBQUlxQixTQUFTckIsT0FBTyxDQUFDLEVBQUU7SUFDdkIsSUFBSUM7SUFDSixJQUFJcUIsZUFBZSxJQUFJLENBQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDRCxXQUFXLENBQUM7SUFDakQsSUFBSWIsWUFBWWlELGFBQWFqRCxTQUFTO0lBRXRDLElBQUlnRCxXQUFXLEdBQUc7UUFDaEJwQixpQkFBaUJELFFBQVF1QixLQUFLLENBQUMsR0FBR2xELFlBQVk7SUFDaEQsT0FBTztRQUNMNEIsaUJBQWlCdUIsT0FBT0MsS0FBSyxDQUFDcEQ7UUFFOUIsT0FBUWdEO1lBQ04sS0FBSztnQkFDSCxJQUFJLENBQUN0QixjQUFjLENBQUNDLFNBQVNDLGdCQUFnQjVCO2dCQUM3QztZQUNGLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDa0MsY0FBYyxDQUFDUCxTQUFTQyxnQkFBZ0I1QjtnQkFDN0M7WUFDRixLQUFLO2dCQUNILElBQUksQ0FBQ3NDLGNBQWMsQ0FBQ1gsU0FBU0MsZ0JBQWdCNUI7Z0JBQzdDO1lBQ0YsS0FBSztnQkFDSCxJQUFJLENBQUMyQyxjQUFjLENBQUNoQixTQUFTQyxnQkFBZ0I1QjtnQkFDN0M7WUFDRjtnQkFDRSxNQUFNLElBQUlxRCxNQUFNLGdDQUFnQ0w7UUFDcEQ7SUFDRjtJQUVBLElBQUksQ0FBQ3JDLEtBQUssQ0FBQ2lCO0lBRVhxQixhQUFhN0IsU0FBUztJQUN0QixJQUFJNkIsYUFBYTdCLFNBQVMsSUFBSTZCLGFBQWF6QyxNQUFNLEVBQUU7UUFDakQsSUFBSSxDQUFDNEIsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ3ZCLFdBQVc7UUFDaEJvQyxlQUFlLElBQUksQ0FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUNELFdBQVcsQ0FBQztJQUMvQyxPQUFPO1FBQ0wsSUFBSSxDQUFDdUIsU0FBUyxHQUFHUjtJQUNuQjtJQUVBLElBQUlxQixjQUFjO1FBQ2hCLG9FQUFvRTtRQUNwRSxJQUFJLENBQUN2QyxJQUFJLENBQUN1QyxhQUFhakQsU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDd0Isa0JBQWtCLENBQUNDLElBQUksQ0FBQyxJQUFJO0lBQ3pFLE9BQU87UUFDTCxJQUFJLENBQUNXLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUN4QixRQUFRO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NzYS8uLi8uLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS5qcz8yODk2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgaW50ZXJsYWNlVXRpbHMgPSByZXF1aXJlKFwiLi9pbnRlcmxhY2VcIik7XG5sZXQgcGFldGhQcmVkaWN0b3IgPSByZXF1aXJlKFwiLi9wYWV0aC1wcmVkaWN0b3JcIik7XG5cbmZ1bmN0aW9uIGdldEJ5dGVXaWR0aCh3aWR0aCwgYnBwLCBkZXB0aCkge1xuICBsZXQgYnl0ZVdpZHRoID0gd2lkdGggKiBicHA7XG4gIGlmIChkZXB0aCAhPT0gOCkge1xuICAgIGJ5dGVXaWR0aCA9IE1hdGguY2VpbChieXRlV2lkdGggLyAoOCAvIGRlcHRoKSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVXaWR0aDtcbn1cblxubGV0IEZpbHRlciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXBJbmZvLCBkZXBlbmRlbmNpZXMpIHtcbiAgbGV0IHdpZHRoID0gYml0bWFwSW5mby53aWR0aDtcbiAgbGV0IGhlaWdodCA9IGJpdG1hcEluZm8uaGVpZ2h0O1xuICBsZXQgaW50ZXJsYWNlID0gYml0bWFwSW5mby5pbnRlcmxhY2U7XG4gIGxldCBicHAgPSBiaXRtYXBJbmZvLmJwcDtcbiAgbGV0IGRlcHRoID0gYml0bWFwSW5mby5kZXB0aDtcblxuICB0aGlzLnJlYWQgPSBkZXBlbmRlbmNpZXMucmVhZDtcbiAgdGhpcy53cml0ZSA9IGRlcGVuZGVuY2llcy53cml0ZTtcbiAgdGhpcy5jb21wbGV0ZSA9IGRlcGVuZGVuY2llcy5jb21wbGV0ZTtcblxuICB0aGlzLl9pbWFnZUluZGV4ID0gMDtcbiAgdGhpcy5faW1hZ2VzID0gW107XG4gIGlmIChpbnRlcmxhY2UpIHtcbiAgICBsZXQgcGFzc2VzID0gaW50ZXJsYWNlVXRpbHMuZ2V0SW1hZ2VQYXNzZXMod2lkdGgsIGhlaWdodCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2ltYWdlcy5wdXNoKHtcbiAgICAgICAgYnl0ZVdpZHRoOiBnZXRCeXRlV2lkdGgocGFzc2VzW2ldLndpZHRoLCBicHAsIGRlcHRoKSxcbiAgICAgICAgaGVpZ2h0OiBwYXNzZXNbaV0uaGVpZ2h0LFxuICAgICAgICBsaW5lSW5kZXg6IDAsXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5faW1hZ2VzLnB1c2goe1xuICAgICAgYnl0ZVdpZHRoOiBnZXRCeXRlV2lkdGgod2lkdGgsIGJwcCwgZGVwdGgpLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICBsaW5lSW5kZXg6IDAsXG4gICAgfSk7XG4gIH1cblxuICAvLyB3aGVuIGZpbHRlcmluZyB0aGUgbGluZSB3ZSBsb29rIGF0IHRoZSBwaXhlbCB0byB0aGUgbGVmdFxuICAvLyB0aGUgc3BlYyBhbHNvIHNheXMgaXQgaXMgZG9uZSBvbiBhIGJ5dGUgbGV2ZWwgcmVnYXJkbGVzcyBvZiB0aGUgbnVtYmVyIG9mIHBpeGVsc1xuICAvLyBzbyBpZiB0aGUgZGVwdGggaXMgYnl0ZSBjb21wYXRpYmxlICg4IG9yIDE2KSB3ZSBzdWJ0cmFjdCB0aGUgYnBwIGluIG9yZGVyIHRvIGNvbXBhcmUgYmFja1xuICAvLyBhIHBpeGVsIHJhdGhlciB0aGFuIGp1c3QgYSBkaWZmZXJlbnQgYnl0ZSBwYXJ0LiBIb3dldmVyIGlmIHdlIGFyZSBzdWIgYnl0ZSwgd2UgaWdub3JlLlxuICBpZiAoZGVwdGggPT09IDgpIHtcbiAgICB0aGlzLl94Q29tcGFyaXNvbiA9IGJwcDtcbiAgfSBlbHNlIGlmIChkZXB0aCA9PT0gMTYpIHtcbiAgICB0aGlzLl94Q29tcGFyaXNvbiA9IGJwcCAqIDI7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5feENvbXBhcmlzb24gPSAxO1xuICB9XG59KTtcblxuRmlsdGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkKFxuICAgIHRoaXMuX2ltYWdlc1t0aGlzLl9pbWFnZUluZGV4XS5ieXRlV2lkdGggKyAxLFxuICAgIHRoaXMuX3JldmVyc2VGaWx0ZXJMaW5lLmJpbmQodGhpcylcbiAgKTtcbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3VuRmlsdGVyVHlwZTEgPSBmdW5jdGlvbiAoXG4gIHJhd0RhdGEsXG4gIHVuZmlsdGVyZWRMaW5lLFxuICBieXRlV2lkdGhcbikge1xuICBsZXQgeENvbXBhcmlzb24gPSB0aGlzLl94Q29tcGFyaXNvbjtcbiAgbGV0IHhCaWdnZXJUaGFuID0geENvbXBhcmlzb24gLSAxO1xuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgcmF3Qnl0ZSA9IHJhd0RhdGFbMSArIHhdO1xuICAgIGxldCBmMUxlZnQgPSB4ID4geEJpZ2dlclRoYW4gPyB1bmZpbHRlcmVkTGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICB1bmZpbHRlcmVkTGluZVt4XSA9IHJhd0J5dGUgKyBmMUxlZnQ7XG4gIH1cbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3VuRmlsdGVyVHlwZTIgPSBmdW5jdGlvbiAoXG4gIHJhd0RhdGEsXG4gIHVuZmlsdGVyZWRMaW5lLFxuICBieXRlV2lkdGhcbikge1xuICBsZXQgbGFzdExpbmUgPSB0aGlzLl9sYXN0TGluZTtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGJ5dGVXaWR0aDsgeCsrKSB7XG4gICAgbGV0IHJhd0J5dGUgPSByYXdEYXRhWzEgKyB4XTtcbiAgICBsZXQgZjJVcCA9IGxhc3RMaW5lID8gbGFzdExpbmVbeF0gOiAwO1xuICAgIHVuZmlsdGVyZWRMaW5lW3hdID0gcmF3Qnl0ZSArIGYyVXA7XG4gIH1cbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3VuRmlsdGVyVHlwZTMgPSBmdW5jdGlvbiAoXG4gIHJhd0RhdGEsXG4gIHVuZmlsdGVyZWRMaW5lLFxuICBieXRlV2lkdGhcbikge1xuICBsZXQgeENvbXBhcmlzb24gPSB0aGlzLl94Q29tcGFyaXNvbjtcbiAgbGV0IHhCaWdnZXJUaGFuID0geENvbXBhcmlzb24gLSAxO1xuICBsZXQgbGFzdExpbmUgPSB0aGlzLl9sYXN0TGluZTtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGJ5dGVXaWR0aDsgeCsrKSB7XG4gICAgbGV0IHJhd0J5dGUgPSByYXdEYXRhWzEgKyB4XTtcbiAgICBsZXQgZjNVcCA9IGxhc3RMaW5lID8gbGFzdExpbmVbeF0gOiAwO1xuICAgIGxldCBmM0xlZnQgPSB4ID4geEJpZ2dlclRoYW4gPyB1bmZpbHRlcmVkTGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICBsZXQgZjNBZGQgPSBNYXRoLmZsb29yKChmM0xlZnQgKyBmM1VwKSAvIDIpO1xuICAgIHVuZmlsdGVyZWRMaW5lW3hdID0gcmF3Qnl0ZSArIGYzQWRkO1xuICB9XG59O1xuXG5GaWx0ZXIucHJvdG90eXBlLl91bkZpbHRlclR5cGU0ID0gZnVuY3Rpb24gKFxuICByYXdEYXRhLFxuICB1bmZpbHRlcmVkTGluZSxcbiAgYnl0ZVdpZHRoXG4pIHtcbiAgbGV0IHhDb21wYXJpc29uID0gdGhpcy5feENvbXBhcmlzb247XG4gIGxldCB4QmlnZ2VyVGhhbiA9IHhDb21wYXJpc29uIC0gMTtcbiAgbGV0IGxhc3RMaW5lID0gdGhpcy5fbGFzdExpbmU7XG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCByYXdCeXRlID0gcmF3RGF0YVsxICsgeF07XG4gICAgbGV0IGY0VXAgPSBsYXN0TGluZSA/IGxhc3RMaW5lW3hdIDogMDtcbiAgICBsZXQgZjRMZWZ0ID0geCA+IHhCaWdnZXJUaGFuID8gdW5maWx0ZXJlZExpbmVbeCAtIHhDb21wYXJpc29uXSA6IDA7XG4gICAgbGV0IGY0VXBMZWZ0ID0geCA+IHhCaWdnZXJUaGFuICYmIGxhc3RMaW5lID8gbGFzdExpbmVbeCAtIHhDb21wYXJpc29uXSA6IDA7XG4gICAgbGV0IGY0QWRkID0gcGFldGhQcmVkaWN0b3IoZjRMZWZ0LCBmNFVwLCBmNFVwTGVmdCk7XG4gICAgdW5maWx0ZXJlZExpbmVbeF0gPSByYXdCeXRlICsgZjRBZGQ7XG4gIH1cbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3JldmVyc2VGaWx0ZXJMaW5lID0gZnVuY3Rpb24gKHJhd0RhdGEpIHtcbiAgbGV0IGZpbHRlciA9IHJhd0RhdGFbMF07XG4gIGxldCB1bmZpbHRlcmVkTGluZTtcbiAgbGV0IGN1cnJlbnRJbWFnZSA9IHRoaXMuX2ltYWdlc1t0aGlzLl9pbWFnZUluZGV4XTtcbiAgbGV0IGJ5dGVXaWR0aCA9IGN1cnJlbnRJbWFnZS5ieXRlV2lkdGg7XG5cbiAgaWYgKGZpbHRlciA9PT0gMCkge1xuICAgIHVuZmlsdGVyZWRMaW5lID0gcmF3RGF0YS5zbGljZSgxLCBieXRlV2lkdGggKyAxKTtcbiAgfSBlbHNlIHtcbiAgICB1bmZpbHRlcmVkTGluZSA9IEJ1ZmZlci5hbGxvYyhieXRlV2lkdGgpO1xuXG4gICAgc3dpdGNoIChmaWx0ZXIpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdGhpcy5fdW5GaWx0ZXJUeXBlMShyYXdEYXRhLCB1bmZpbHRlcmVkTGluZSwgYnl0ZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHRoaXMuX3VuRmlsdGVyVHlwZTIocmF3RGF0YSwgdW5maWx0ZXJlZExpbmUsIGJ5dGVXaWR0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICB0aGlzLl91bkZpbHRlclR5cGUzKHJhd0RhdGEsIHVuZmlsdGVyZWRMaW5lLCBieXRlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgdGhpcy5fdW5GaWx0ZXJUeXBlNChyYXdEYXRhLCB1bmZpbHRlcmVkTGluZSwgYnl0ZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbmlzZWQgZmlsdGVyIHR5cGUgLSBcIiArIGZpbHRlcik7XG4gICAgfVxuICB9XG5cbiAgdGhpcy53cml0ZSh1bmZpbHRlcmVkTGluZSk7XG5cbiAgY3VycmVudEltYWdlLmxpbmVJbmRleCsrO1xuICBpZiAoY3VycmVudEltYWdlLmxpbmVJbmRleCA+PSBjdXJyZW50SW1hZ2UuaGVpZ2h0KSB7XG4gICAgdGhpcy5fbGFzdExpbmUgPSBudWxsO1xuICAgIHRoaXMuX2ltYWdlSW5kZXgrKztcbiAgICBjdXJyZW50SW1hZ2UgPSB0aGlzLl9pbWFnZXNbdGhpcy5faW1hZ2VJbmRleF07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGFzdExpbmUgPSB1bmZpbHRlcmVkTGluZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50SW1hZ2UpIHtcbiAgICAvLyByZWFkLCB1c2luZyB0aGUgYnl0ZSB3aWR0aCB0aGF0IG1heSBiZSBmcm9tIHRoZSBuZXcgY3VycmVudCBpbWFnZVxuICAgIHRoaXMucmVhZChjdXJyZW50SW1hZ2UuYnl0ZVdpZHRoICsgMSwgdGhpcy5fcmV2ZXJzZUZpbHRlckxpbmUuYmluZCh0aGlzKSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGFzdExpbmUgPSBudWxsO1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJpbnRlcmxhY2VVdGlscyIsInJlcXVpcmUiLCJwYWV0aFByZWRpY3RvciIsImdldEJ5dGVXaWR0aCIsIndpZHRoIiwiYnBwIiwiZGVwdGgiLCJieXRlV2lkdGgiLCJNYXRoIiwiY2VpbCIsIkZpbHRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJiaXRtYXBJbmZvIiwiZGVwZW5kZW5jaWVzIiwiaGVpZ2h0IiwiaW50ZXJsYWNlIiwicmVhZCIsIndyaXRlIiwiY29tcGxldGUiLCJfaW1hZ2VJbmRleCIsIl9pbWFnZXMiLCJwYXNzZXMiLCJnZXRJbWFnZVBhc3NlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwibGluZUluZGV4IiwiX3hDb21wYXJpc29uIiwicHJvdG90eXBlIiwic3RhcnQiLCJfcmV2ZXJzZUZpbHRlckxpbmUiLCJiaW5kIiwiX3VuRmlsdGVyVHlwZTEiLCJyYXdEYXRhIiwidW5maWx0ZXJlZExpbmUiLCJ4Q29tcGFyaXNvbiIsInhCaWdnZXJUaGFuIiwieCIsInJhd0J5dGUiLCJmMUxlZnQiLCJfdW5GaWx0ZXJUeXBlMiIsImxhc3RMaW5lIiwiX2xhc3RMaW5lIiwiZjJVcCIsIl91bkZpbHRlclR5cGUzIiwiZjNVcCIsImYzTGVmdCIsImYzQWRkIiwiZmxvb3IiLCJfdW5GaWx0ZXJUeXBlNCIsImY0VXAiLCJmNExlZnQiLCJmNFVwTGVmdCIsImY0QWRkIiwiZmlsdGVyIiwiY3VycmVudEltYWdlIiwic2xpY2UiLCJCdWZmZXIiLCJhbGxvYyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/filter-parse.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/format-normaliser.js":
/*!*********************************************************!*\
  !*** ../../node_modules/pngjs/lib/format-normaliser.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nfunction dePalette(indata, outdata, width, height, palette) {\n    let pxPos = 0;\n    // use values from palette\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let color = palette[indata[pxPos]];\n            if (!color) {\n                throw new Error(\"index \" + indata[pxPos] + \" not in palette\");\n            }\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = color[i];\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let makeTrans = false;\n            if (transColor.length === 1) {\n                if (transColor[0] === indata[pxPos]) {\n                    makeTrans = true;\n                }\n            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n                makeTrans = true;\n            }\n            if (makeTrans) {\n                for(let i = 0; i < 4; i++){\n                    outdata[pxPos + i] = 0;\n                }\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction scaleDepth(indata, outdata, width, height, depth) {\n    let maxOutSample = 255;\n    let maxInSample = Math.pow(2, depth) - 1;\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n            }\n            pxPos += 4;\n        }\n    }\n}\nmodule.exports = function(indata, imageData) {\n    let depth = imageData.depth;\n    let width = imageData.width;\n    let height = imageData.height;\n    let colorType = imageData.colorType;\n    let transColor = imageData.transColor;\n    let palette = imageData.palette;\n    let outdata = indata; // only different for 16 bits\n    if (colorType === 3) {\n        // paletted\n        dePalette(indata, outdata, width, height, palette);\n    } else {\n        if (transColor) {\n            replaceTransparentColor(indata, outdata, width, height, transColor);\n        }\n        // if it needs scaling\n        if (depth !== 8) {\n            // if we need to change the buffer size\n            if (depth === 16) {\n                outdata = Buffer.alloc(width * height * 4);\n            }\n            scaleDepth(indata, outdata, width, height, depth);\n        }\n    }\n    return outdata;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9mb3JtYXQtbm9ybWFsaXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN4RCxJQUFJQyxRQUFRO0lBQ1osMEJBQTBCO0lBQzFCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxJQUFLO1FBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPSyxJQUFLO1lBQzlCLElBQUlDLFFBQVFKLE9BQU8sQ0FBQ0osTUFBTSxDQUFDSyxNQUFNLENBQUM7WUFFbEMsSUFBSSxDQUFDRyxPQUFPO2dCQUNWLE1BQU0sSUFBSUMsTUFBTSxXQUFXVCxNQUFNLENBQUNLLE1BQU0sR0FBRztZQUM3QztZQUVBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7Z0JBQzFCVCxPQUFPLENBQUNJLFFBQVFLLEVBQUUsR0FBR0YsS0FBSyxDQUFDRSxFQUFFO1lBQy9CO1lBQ0FMLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQSxTQUFTTSx3QkFBd0JYLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRVMsVUFBVTtJQUN6RSxJQUFJUCxRQUFRO0lBQ1osSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSU0sWUFBWTtZQUVoQixJQUFJRCxXQUFXRSxNQUFNLEtBQUssR0FBRztnQkFDM0IsSUFBSUYsVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxNQUFNLEVBQUU7b0JBQ25DUSxZQUFZO2dCQUNkO1lBQ0YsT0FBTyxJQUNMRCxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLE1BQU0sSUFDL0JPLFVBQVUsQ0FBQyxFQUFFLEtBQUtaLE1BQU0sQ0FBQ0ssUUFBUSxFQUFFLElBQ25DTyxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLFFBQVEsRUFBRSxFQUNuQztnQkFDQVEsWUFBWTtZQUNkO1lBQ0EsSUFBSUEsV0FBVztnQkFDYixJQUFLLElBQUlILElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO29CQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUc7Z0JBQ3ZCO1lBQ0Y7WUFDQUwsU0FBUztRQUNYO0lBQ0Y7QUFDRjtBQUVBLFNBQVNVLFdBQVdmLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRWEsS0FBSztJQUN2RCxJQUFJQyxlQUFlO0lBQ25CLElBQUlDLGNBQWNDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHSixTQUFTO0lBQ3ZDLElBQUlYLFFBQVE7SUFFWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztZQUM5QixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO2dCQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUdTLEtBQUtFLEtBQUssQ0FDN0IsTUFBTyxDQUFDaEIsUUFBUUssRUFBRSxHQUFHTyxlQUFnQkMsY0FBYztZQUV2RDtZQUNBYixTQUFTO1FBQ1g7SUFDRjtBQUNGO0FBRUFpQixPQUFPQyxPQUFPLEdBQUcsU0FBVXZCLE1BQU0sRUFBRXdCLFNBQVM7SUFDMUMsSUFBSVIsUUFBUVEsVUFBVVIsS0FBSztJQUMzQixJQUFJZCxRQUFRc0IsVUFBVXRCLEtBQUs7SUFDM0IsSUFBSUMsU0FBU3FCLFVBQVVyQixNQUFNO0lBQzdCLElBQUlzQixZQUFZRCxVQUFVQyxTQUFTO0lBQ25DLElBQUliLGFBQWFZLFVBQVVaLFVBQVU7SUFDckMsSUFBSVIsVUFBVW9CLFVBQVVwQixPQUFPO0lBRS9CLElBQUlILFVBQVVELFFBQVEsNkJBQTZCO0lBRW5ELElBQUl5QixjQUFjLEdBQUc7UUFDbkIsV0FBVztRQUNYMUIsVUFBVUMsUUFBUUMsU0FBU0MsT0FBT0MsUUFBUUM7SUFDNUMsT0FBTztRQUNMLElBQUlRLFlBQVk7WUFDZEQsd0JBQXdCWCxRQUFRQyxTQUFTQyxPQUFPQyxRQUFRUztRQUMxRDtRQUNBLHNCQUFzQjtRQUN0QixJQUFJSSxVQUFVLEdBQUc7WUFDZix1Q0FBdUM7WUFDdkMsSUFBSUEsVUFBVSxJQUFJO2dCQUNoQmYsVUFBVXlCLE9BQU9DLEtBQUssQ0FBQ3pCLFFBQVFDLFNBQVM7WUFDMUM7WUFDQVksV0FBV2YsUUFBUUMsU0FBU0MsT0FBT0MsUUFBUWE7UUFDN0M7SUFDRjtJQUNBLE9BQU9mO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9mb3JtYXQtbm9ybWFsaXNlci5qcz9mMDVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBkZVBhbGV0dGUoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBwYWxldHRlKSB7XG4gIGxldCBweFBvcyA9IDA7XG4gIC8vIHVzZSB2YWx1ZXMgZnJvbSBwYWxldHRlXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGxldCBjb2xvciA9IHBhbGV0dGVbaW5kYXRhW3B4UG9zXV07XG5cbiAgICAgIGlmICghY29sb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5kZXggXCIgKyBpbmRhdGFbcHhQb3NdICsgXCIgbm90IGluIHBhbGV0dGVcIik7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIG91dGRhdGFbcHhQb3MgKyBpXSA9IGNvbG9yW2ldO1xuICAgICAgfVxuICAgICAgcHhQb3MgKz0gNDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRyYW5zcGFyZW50Q29sb3IoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCB0cmFuc0NvbG9yKSB7XG4gIGxldCBweFBvcyA9IDA7XG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGxldCBtYWtlVHJhbnMgPSBmYWxzZTtcblxuICAgICAgaWYgKHRyYW5zQ29sb3IubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICh0cmFuc0NvbG9yWzBdID09PSBpbmRhdGFbcHhQb3NdKSB7XG4gICAgICAgICAgbWFrZVRyYW5zID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHJhbnNDb2xvclswXSA9PT0gaW5kYXRhW3B4UG9zXSAmJlxuICAgICAgICB0cmFuc0NvbG9yWzFdID09PSBpbmRhdGFbcHhQb3MgKyAxXSAmJlxuICAgICAgICB0cmFuc0NvbG9yWzJdID09PSBpbmRhdGFbcHhQb3MgKyAyXVxuICAgICAgKSB7XG4gICAgICAgIG1ha2VUcmFucyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobWFrZVRyYW5zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHhQb3MgKz0gNDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NhbGVEZXB0aChpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKSB7XG4gIGxldCBtYXhPdXRTYW1wbGUgPSAyNTU7XG4gIGxldCBtYXhJblNhbXBsZSA9IE1hdGgucG93KDIsIGRlcHRoKSAtIDE7XG4gIGxldCBweFBvcyA9IDA7XG5cbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAoaW5kYXRhW3B4UG9zICsgaV0gKiBtYXhPdXRTYW1wbGUpIC8gbWF4SW5TYW1wbGUgKyAwLjVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGF0YSwgaW1hZ2VEYXRhKSB7XG4gIGxldCBkZXB0aCA9IGltYWdlRGF0YS5kZXB0aDtcbiAgbGV0IHdpZHRoID0gaW1hZ2VEYXRhLndpZHRoO1xuICBsZXQgaGVpZ2h0ID0gaW1hZ2VEYXRhLmhlaWdodDtcbiAgbGV0IGNvbG9yVHlwZSA9IGltYWdlRGF0YS5jb2xvclR5cGU7XG4gIGxldCB0cmFuc0NvbG9yID0gaW1hZ2VEYXRhLnRyYW5zQ29sb3I7XG4gIGxldCBwYWxldHRlID0gaW1hZ2VEYXRhLnBhbGV0dGU7XG5cbiAgbGV0IG91dGRhdGEgPSBpbmRhdGE7IC8vIG9ubHkgZGlmZmVyZW50IGZvciAxNiBiaXRzXG5cbiAgaWYgKGNvbG9yVHlwZSA9PT0gMykge1xuICAgIC8vIHBhbGV0dGVkXG4gICAgZGVQYWxldHRlKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgcGFsZXR0ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRyYW5zQ29sb3IpIHtcbiAgICAgIHJlcGxhY2VUcmFuc3BhcmVudENvbG9yKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgdHJhbnNDb2xvcik7XG4gICAgfVxuICAgIC8vIGlmIGl0IG5lZWRzIHNjYWxpbmdcbiAgICBpZiAoZGVwdGggIT09IDgpIHtcbiAgICAgIC8vIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBidWZmZXIgc2l6ZVxuICAgICAgaWYgKGRlcHRoID09PSAxNikge1xuICAgICAgICBvdXRkYXRhID0gQnVmZmVyLmFsbG9jKHdpZHRoICogaGVpZ2h0ICogNCk7XG4gICAgICB9XG4gICAgICBzY2FsZURlcHRoKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0ZGF0YTtcbn07XG4iXSwibmFtZXMiOlsiZGVQYWxldHRlIiwiaW5kYXRhIiwib3V0ZGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwicGFsZXR0ZSIsInB4UG9zIiwieSIsIngiLCJjb2xvciIsIkVycm9yIiwiaSIsInJlcGxhY2VUcmFuc3BhcmVudENvbG9yIiwidHJhbnNDb2xvciIsIm1ha2VUcmFucyIsImxlbmd0aCIsInNjYWxlRGVwdGgiLCJkZXB0aCIsIm1heE91dFNhbXBsZSIsIm1heEluU2FtcGxlIiwiTWF0aCIsInBvdyIsImZsb29yIiwibW9kdWxlIiwiZXhwb3J0cyIsImltYWdlRGF0YSIsImNvbG9yVHlwZSIsIkJ1ZmZlciIsImFsbG9jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/format-normaliser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/interlace.js":
/*!*************************************************!*\
  !*** ../../node_modules/pngjs/lib/interlace.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Adam 7\n//   0 1 2 3 4 5 6 7\n// 0 x 6 4 6 x 6 4 6\n// 1 7 7 7 7 7 7 7 7\n// 2 5 6 5 6 5 6 5 6\n// 3 7 7 7 7 7 7 7 7\n// 4 3 6 4 6 3 6 4 6\n// 5 7 7 7 7 7 7 7 7\n// 6 5 6 5 6 5 6 5 6\n// 7 7 7 7 7 7 7 7 7\nlet imagePasses = [\n    {\n        // pass 1 - 1px\n        x: [\n            0\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 2 - 1px\n        x: [\n            4\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 3 - 2px\n        x: [\n            0,\n            4\n        ],\n        y: [\n            4\n        ]\n    },\n    {\n        // pass 4 - 4px\n        x: [\n            2,\n            6\n        ],\n        y: [\n            0,\n            4\n        ]\n    },\n    {\n        // pass 5 - 8px\n        x: [\n            0,\n            2,\n            4,\n            6\n        ],\n        y: [\n            2,\n            6\n        ]\n    },\n    {\n        // pass 6 - 16px\n        x: [\n            1,\n            3,\n            5,\n            7\n        ],\n        y: [\n            0,\n            2,\n            4,\n            6\n        ]\n    },\n    {\n        // pass 7 - 32px\n        x: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ],\n        y: [\n            1,\n            3,\n            5,\n            7\n        ]\n    }\n];\nexports.getImagePasses = function(width, height) {\n    let images = [];\n    let xLeftOver = width % 8;\n    let yLeftOver = height % 8;\n    let xRepeats = (width - xLeftOver) / 8;\n    let yRepeats = (height - yLeftOver) / 8;\n    for(let i = 0; i < imagePasses.length; i++){\n        let pass = imagePasses[i];\n        let passWidth = xRepeats * pass.x.length;\n        let passHeight = yRepeats * pass.y.length;\n        for(let j = 0; j < pass.x.length; j++){\n            if (pass.x[j] < xLeftOver) {\n                passWidth++;\n            } else {\n                break;\n            }\n        }\n        for(let j = 0; j < pass.y.length; j++){\n            if (pass.y[j] < yLeftOver) {\n                passHeight++;\n            } else {\n                break;\n            }\n        }\n        if (passWidth > 0 && passHeight > 0) {\n            images.push({\n                width: passWidth,\n                height: passHeight,\n                index: i\n            });\n        }\n    }\n    return images;\n};\nexports.getInterlaceIterator = function(width) {\n    return function(x, y, pass) {\n        let outerXLeftOver = x % imagePasses[pass].x.length;\n        let outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];\n        let outerYLeftOver = y % imagePasses[pass].y.length;\n        let outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];\n        return outerX * 4 + outerY * width * 4;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9pbnRlcmxhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTO0FBQ1Qsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFFcEIsSUFBSUEsY0FBYztJQUNoQjtRQUNFLGVBQWU7UUFDZkMsR0FBRztZQUFDO1NBQUU7UUFDTkMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7U0FBRTtRQUNOQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRSxlQUFlO1FBQ2ZELEdBQUc7WUFBQztZQUFHO1NBQUU7UUFDVEMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7WUFBRztTQUFFO1FBQ1RDLEdBQUc7WUFBQztZQUFHO1NBQUU7SUFDWDtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUNmQyxHQUFHO1lBQUM7WUFBRztTQUFFO0lBQ1g7SUFDQTtRQUNFLGdCQUFnQjtRQUNoQkQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7UUFDZkMsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7SUFDakI7SUFDQTtRQUNFLGdCQUFnQjtRQUNoQkQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1lBQUc7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUMzQkMsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7SUFDakI7Q0FDRDtBQUVEQyxzQkFBc0IsR0FBRyxTQUFVRSxLQUFLLEVBQUVDLE1BQU07SUFDOUMsSUFBSUMsU0FBUyxFQUFFO0lBQ2YsSUFBSUMsWUFBWUgsUUFBUTtJQUN4QixJQUFJSSxZQUFZSCxTQUFTO0lBQ3pCLElBQUlJLFdBQVcsQ0FBQ0wsUUFBUUcsU0FBUSxJQUFLO0lBQ3JDLElBQUlHLFdBQVcsQ0FBQ0wsU0FBU0csU0FBUSxJQUFLO0lBQ3RDLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJWixZQUFZYSxNQUFNLEVBQUVELElBQUs7UUFDM0MsSUFBSUUsT0FBT2QsV0FBVyxDQUFDWSxFQUFFO1FBQ3pCLElBQUlHLFlBQVlMLFdBQVdJLEtBQUtiLENBQUMsQ0FBQ1ksTUFBTTtRQUN4QyxJQUFJRyxhQUFhTCxXQUFXRyxLQUFLWixDQUFDLENBQUNXLE1BQU07UUFDekMsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlILEtBQUtiLENBQUMsQ0FBQ1ksTUFBTSxFQUFFSSxJQUFLO1lBQ3RDLElBQUlILEtBQUtiLENBQUMsQ0FBQ2dCLEVBQUUsR0FBR1QsV0FBVztnQkFDekJPO1lBQ0YsT0FBTztnQkFDTDtZQUNGO1FBQ0Y7UUFDQSxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUgsS0FBS1osQ0FBQyxDQUFDVyxNQUFNLEVBQUVJLElBQUs7WUFDdEMsSUFBSUgsS0FBS1osQ0FBQyxDQUFDZSxFQUFFLEdBQUdSLFdBQVc7Z0JBQ3pCTztZQUNGLE9BQU87Z0JBQ0w7WUFDRjtRQUNGO1FBQ0EsSUFBSUQsWUFBWSxLQUFLQyxhQUFhLEdBQUc7WUFDbkNULE9BQU9XLElBQUksQ0FBQztnQkFBRWIsT0FBT1U7Z0JBQVdULFFBQVFVO2dCQUFZRyxPQUFPUDtZQUFFO1FBQy9EO0lBQ0Y7SUFDQSxPQUFPTDtBQUNUO0FBRUFKLDRCQUE0QixHQUFHLFNBQVVFLEtBQUs7SUFDNUMsT0FBTyxTQUFVSixDQUFDLEVBQUVDLENBQUMsRUFBRVksSUFBSTtRQUN6QixJQUFJTyxpQkFBaUJwQixJQUFJRCxXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNO1FBQ25ELElBQUlTLFNBQ0YsQ0FBRXJCLElBQUlvQixjQUFhLElBQUtyQixXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNLEdBQUksSUFDdERiLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNvQixlQUFlO1FBQ3JDLElBQUlFLGlCQUFpQnJCLElBQUlGLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDWixDQUFDLENBQUNXLE1BQU07UUFDbkQsSUFBSVcsU0FDRixDQUFFdEIsSUFBSXFCLGNBQWEsSUFBS3ZCLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDWixDQUFDLENBQUNXLE1BQU0sR0FBSSxJQUN0RGIsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ3FCLGVBQWU7UUFDckMsT0FBT0QsU0FBUyxJQUFJRSxTQUFTbkIsUUFBUTtJQUN2QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvaW50ZXJsYWNlLmpzPzFjOWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEFkYW0gN1xuLy8gICAwIDEgMiAzIDQgNSA2IDdcbi8vIDAgeCA2IDQgNiB4IDYgNCA2XG4vLyAxIDcgNyA3IDcgNyA3IDcgN1xuLy8gMiA1IDYgNSA2IDUgNiA1IDZcbi8vIDMgNyA3IDcgNyA3IDcgNyA3XG4vLyA0IDMgNiA0IDYgMyA2IDQgNlxuLy8gNSA3IDcgNyA3IDcgNyA3IDdcbi8vIDYgNSA2IDUgNiA1IDYgNSA2XG4vLyA3IDcgNyA3IDcgNyA3IDcgN1xuXG5sZXQgaW1hZ2VQYXNzZXMgPSBbXG4gIHtcbiAgICAvLyBwYXNzIDEgLSAxcHhcbiAgICB4OiBbMF0sXG4gICAgeTogWzBdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyAyIC0gMXB4XG4gICAgeDogWzRdLFxuICAgIHk6IFswXSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgMyAtIDJweFxuICAgIHg6IFswLCA0XSxcbiAgICB5OiBbNF0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDQgLSA0cHhcbiAgICB4OiBbMiwgNl0sXG4gICAgeTogWzAsIDRdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA1IC0gOHB4XG4gICAgeDogWzAsIDIsIDQsIDZdLFxuICAgIHk6IFsyLCA2XSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgNiAtIDE2cHhcbiAgICB4OiBbMSwgMywgNSwgN10sXG4gICAgeTogWzAsIDIsIDQsIDZdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA3IC0gMzJweFxuICAgIHg6IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3XSxcbiAgICB5OiBbMSwgMywgNSwgN10sXG4gIH0sXG5dO1xuXG5leHBvcnRzLmdldEltYWdlUGFzc2VzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IGltYWdlcyA9IFtdO1xuICBsZXQgeExlZnRPdmVyID0gd2lkdGggJSA4O1xuICBsZXQgeUxlZnRPdmVyID0gaGVpZ2h0ICUgODtcbiAgbGV0IHhSZXBlYXRzID0gKHdpZHRoIC0geExlZnRPdmVyKSAvIDg7XG4gIGxldCB5UmVwZWF0cyA9IChoZWlnaHQgLSB5TGVmdE92ZXIpIC8gODtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZVBhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwYXNzID0gaW1hZ2VQYXNzZXNbaV07XG4gICAgbGV0IHBhc3NXaWR0aCA9IHhSZXBlYXRzICogcGFzcy54Lmxlbmd0aDtcbiAgICBsZXQgcGFzc0hlaWdodCA9IHlSZXBlYXRzICogcGFzcy55Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhc3MueC5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueFtqXSA8IHhMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzV2lkdGgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhc3MueS5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueVtqXSA8IHlMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzSGVpZ2h0Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhc3NXaWR0aCA+IDAgJiYgcGFzc0hlaWdodCA+IDApIHtcbiAgICAgIGltYWdlcy5wdXNoKHsgd2lkdGg6IHBhc3NXaWR0aCwgaGVpZ2h0OiBwYXNzSGVpZ2h0LCBpbmRleDogaSB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGltYWdlcztcbn07XG5cbmV4cG9ydHMuZ2V0SW50ZXJsYWNlSXRlcmF0b3IgPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5LCBwYXNzKSB7XG4gICAgbGV0IG91dGVyWExlZnRPdmVyID0geCAlIGltYWdlUGFzc2VzW3Bhc3NdLngubGVuZ3RoO1xuICAgIGxldCBvdXRlclggPVxuICAgICAgKCh4IC0gb3V0ZXJYTGVmdE92ZXIpIC8gaW1hZ2VQYXNzZXNbcGFzc10ueC5sZW5ndGgpICogOCArXG4gICAgICBpbWFnZVBhc3Nlc1twYXNzXS54W291dGVyWExlZnRPdmVyXTtcbiAgICBsZXQgb3V0ZXJZTGVmdE92ZXIgPSB5ICUgaW1hZ2VQYXNzZXNbcGFzc10ueS5sZW5ndGg7XG4gICAgbGV0IG91dGVyWSA9XG4gICAgICAoKHkgLSBvdXRlcllMZWZ0T3ZlcikgLyBpbWFnZVBhc3Nlc1twYXNzXS55Lmxlbmd0aCkgKiA4ICtcbiAgICAgIGltYWdlUGFzc2VzW3Bhc3NdLnlbb3V0ZXJZTGVmdE92ZXJdO1xuICAgIHJldHVybiBvdXRlclggKiA0ICsgb3V0ZXJZICogd2lkdGggKiA0O1xuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJpbWFnZVBhc3NlcyIsIngiLCJ5IiwiZXhwb3J0cyIsImdldEltYWdlUGFzc2VzIiwid2lkdGgiLCJoZWlnaHQiLCJpbWFnZXMiLCJ4TGVmdE92ZXIiLCJ5TGVmdE92ZXIiLCJ4UmVwZWF0cyIsInlSZXBlYXRzIiwiaSIsImxlbmd0aCIsInBhc3MiLCJwYXNzV2lkdGgiLCJwYXNzSGVpZ2h0IiwiaiIsInB1c2giLCJpbmRleCIsImdldEludGVybGFjZUl0ZXJhdG9yIiwib3V0ZXJYTGVmdE92ZXIiLCJvdXRlclgiLCJvdXRlcllMZWZ0T3ZlciIsIm91dGVyWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/interlace.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/packer-async.js":
/*!****************************************************!*\
  !*** ../../node_modules/pngjs/lib/packer-async.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/../../node_modules/pngjs/lib/packer.js\");\nlet PackerAsync = module.exports = function(opt) {\n    Stream.call(this);\n    let options = opt || {};\n    this._packer = new Packer(options);\n    this._deflate = this._packer.createDeflate();\n    this.readable = true;\n};\nutil.inherits(PackerAsync, Stream);\nPackerAsync.prototype.pack = function(data, width, height, gamma) {\n    // Signature\n    this.emit(\"data\", Buffer.from(constants.PNG_SIGNATURE));\n    this.emit(\"data\", this._packer.packIHDR(width, height));\n    if (gamma) {\n        this.emit(\"data\", this._packer.packGAMA(gamma));\n    }\n    let filteredData = this._packer.filterData(data, width, height);\n    // compress it\n    this._deflate.on(\"error\", this.emit.bind(this, \"error\"));\n    this._deflate.on(\"data\", (function(compressedData) {\n        this.emit(\"data\", this._packer.packIDAT(compressedData));\n    }).bind(this));\n    this._deflate.on(\"end\", (function() {\n        this.emit(\"data\", this._packer.packIEND());\n        this.emit(\"end\");\n    }).bind(this));\n    this._deflate.end(filteredData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUM3QixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQyxvRUFBYTtBQUNyQyxJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyw4REFBVTtBQUUvQixJQUFJSSxjQUFlQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsR0FBRztJQUMvQ04sT0FBT08sSUFBSSxDQUFDLElBQUk7SUFFaEIsSUFBSUMsVUFBVUYsT0FBTyxDQUFDO0lBRXRCLElBQUksQ0FBQ0csT0FBTyxHQUFHLElBQUlQLE9BQU9NO0lBQzFCLElBQUksQ0FBQ0UsUUFBUSxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDRSxhQUFhO0lBRTFDLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0FBQ2xCO0FBQ0FkLEtBQUtlLFFBQVEsQ0FBQ1YsYUFBYUg7QUFFM0JHLFlBQVlXLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFNBQVVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLEtBQUs7SUFDL0QsWUFBWTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVFDLE9BQU9DLElBQUksQ0FBQ3JCLFVBQVVzQixhQUFhO0lBQ3JELElBQUksQ0FBQ0gsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNlLFFBQVEsQ0FBQ1AsT0FBT0M7SUFFL0MsSUFBSUMsT0FBTztRQUNULElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNnQixRQUFRLENBQUNOO0lBQzFDO0lBRUEsSUFBSU8sZUFBZSxJQUFJLENBQUNqQixPQUFPLENBQUNrQixVQUFVLENBQUNYLE1BQU1DLE9BQU9DO0lBRXhELGNBQWM7SUFDZCxJQUFJLENBQUNSLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FBQyxTQUFTLElBQUksQ0FBQ1IsSUFBSSxDQUFDUyxJQUFJLENBQUMsSUFBSSxFQUFFO0lBRS9DLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FDZCxRQUNBLFVBQVVFLGNBQWM7UUFDdEIsSUFBSSxDQUFDVixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ3NCLFFBQVEsQ0FBQ0Q7SUFDMUMsR0FBRUQsSUFBSSxDQUFDLElBQUk7SUFHYixJQUFJLENBQUNuQixRQUFRLENBQUNrQixFQUFFLENBQ2QsT0FDQTtRQUNFLElBQUksQ0FBQ1IsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUN1QixRQUFRO1FBQ3ZDLElBQUksQ0FBQ1osSUFBSSxDQUFDO0lBQ1osR0FBRVMsSUFBSSxDQUFDLElBQUk7SUFHYixJQUFJLENBQUNuQixRQUFRLENBQUN1QixHQUFHLENBQUNQO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFja2VyLWFzeW5jLmpzPzhkMTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5sZXQgU3RyZWFtID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmxldCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5sZXQgUGFja2VyID0gcmVxdWlyZShcIi4vcGFja2VyXCIpO1xuXG5sZXQgUGFja2VyQXN5bmMgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0KSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIGxldCBvcHRpb25zID0gb3B0IHx8IHt9O1xuXG4gIHRoaXMuX3BhY2tlciA9IG5ldyBQYWNrZXIob3B0aW9ucyk7XG4gIHRoaXMuX2RlZmxhdGUgPSB0aGlzLl9wYWNrZXIuY3JlYXRlRGVmbGF0ZSgpO1xuXG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xufSk7XG51dGlsLmluaGVyaXRzKFBhY2tlckFzeW5jLCBTdHJlYW0pO1xuXG5QYWNrZXJBc3luYy5wcm90b3R5cGUucGFjayA9IGZ1bmN0aW9uIChkYXRhLCB3aWR0aCwgaGVpZ2h0LCBnYW1tYSkge1xuICAvLyBTaWduYXR1cmVcbiAgdGhpcy5lbWl0KFwiZGF0YVwiLCBCdWZmZXIuZnJvbShjb25zdGFudHMuUE5HX1NJR05BVFVSRSkpO1xuICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrSUhEUih3aWR0aCwgaGVpZ2h0KSk7XG5cbiAgaWYgKGdhbW1hKSB7XG4gICAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0aGlzLl9wYWNrZXIucGFja0dBTUEoZ2FtbWEpKTtcbiAgfVxuXG4gIGxldCBmaWx0ZXJlZERhdGEgPSB0aGlzLl9wYWNrZXIuZmlsdGVyRGF0YShkYXRhLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAvLyBjb21wcmVzcyBpdFxuICB0aGlzLl9kZWZsYXRlLm9uKFwiZXJyb3JcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKSk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5vbihcbiAgICBcImRhdGFcIixcbiAgICBmdW5jdGlvbiAoY29tcHJlc3NlZERhdGEpIHtcbiAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgdGhpcy5fcGFja2VyLnBhY2tJREFUKGNvbXByZXNzZWREYXRhKSk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5vbihcbiAgICBcImVuZFwiLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgdGhpcy5fcGFja2VyLnBhY2tJRU5EKCkpO1xuICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xuXG4gIHRoaXMuX2RlZmxhdGUuZW5kKGZpbHRlcmVkRGF0YSk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiU3RyZWFtIiwiY29uc3RhbnRzIiwiUGFja2VyIiwiUGFja2VyQXN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiY2FsbCIsIm9wdGlvbnMiLCJfcGFja2VyIiwiX2RlZmxhdGUiLCJjcmVhdGVEZWZsYXRlIiwicmVhZGFibGUiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsInBhY2siLCJkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJnYW1tYSIsImVtaXQiLCJCdWZmZXIiLCJmcm9tIiwiUE5HX1NJR05BVFVSRSIsInBhY2tJSERSIiwicGFja0dBTUEiLCJmaWx0ZXJlZERhdGEiLCJmaWx0ZXJEYXRhIiwib24iLCJiaW5kIiwiY29tcHJlc3NlZERhdGEiLCJwYWNrSURBVCIsInBhY2tJRU5EIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/packer-async.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/packer-sync.js":
/*!***************************************************!*\
  !*** ../../node_modules/pngjs/lib/packer-sync.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/../../node_modules/pngjs/lib/packer.js\");\nmodule.exports = function(metaData, opt) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let options = opt || {};\n    let packer = new Packer(options);\n    let chunks = [];\n    // Signature\n    chunks.push(Buffer.from(constants.PNG_SIGNATURE));\n    // Header\n    chunks.push(packer.packIHDR(metaData.width, metaData.height));\n    if (metaData.gamma) {\n        chunks.push(packer.packGAMA(metaData.gamma));\n    }\n    let filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);\n    // compress it\n    let compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());\n    filteredData = null;\n    if (!compressedData || !compressedData.length) {\n        throw new Error(\"bad png - invalid compressed data response\");\n    }\n    chunks.push(packer.packIDAT(compressedData));\n    // End\n    chunks.push(packer.packIEND());\n    return Buffer.concat(chunks);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUMsa0JBQU07QUFDekIsSUFBSSxDQUFDRCxLQUFLRSxXQUFXLEVBQUU7SUFDckJILGNBQWM7QUFDaEI7QUFDQSxJQUFJSSxZQUFZRixtQkFBT0EsQ0FBQyxvRUFBYTtBQUNyQyxJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyw4REFBVTtBQUUvQkksT0FBT0MsT0FBTyxHQUFHLFNBQVVDLFFBQVEsRUFBRUMsR0FBRztJQUN0QyxJQUFJLENBQUNULGFBQWE7UUFDaEIsTUFBTSxJQUFJVSxNQUNSO0lBRUo7SUFFQSxJQUFJQyxVQUFVRixPQUFPLENBQUM7SUFFdEIsSUFBSUcsU0FBUyxJQUFJUCxPQUFPTTtJQUV4QixJQUFJRSxTQUFTLEVBQUU7SUFFZixZQUFZO0lBQ1pBLE9BQU9DLElBQUksQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDWixVQUFVYSxhQUFhO0lBRS9DLFNBQVM7SUFDVEosT0FBT0MsSUFBSSxDQUFDRixPQUFPTSxRQUFRLENBQUNWLFNBQVNXLEtBQUssRUFBRVgsU0FBU1ksTUFBTTtJQUUzRCxJQUFJWixTQUFTYSxLQUFLLEVBQUU7UUFDbEJSLE9BQU9DLElBQUksQ0FBQ0YsT0FBT1UsUUFBUSxDQUFDZCxTQUFTYSxLQUFLO0lBQzVDO0lBRUEsSUFBSUUsZUFBZVgsT0FBT1ksVUFBVSxDQUNsQ2hCLFNBQVNpQixJQUFJLEVBQ2JqQixTQUFTVyxLQUFLLEVBQ2RYLFNBQVNZLE1BQU07SUFHakIsY0FBYztJQUNkLElBQUlNLGlCQUFpQnpCLEtBQUtFLFdBQVcsQ0FDbkNvQixjQUNBWCxPQUFPZSxpQkFBaUI7SUFFMUJKLGVBQWU7SUFFZixJQUFJLENBQUNHLGtCQUFrQixDQUFDQSxlQUFlRSxNQUFNLEVBQUU7UUFDN0MsTUFBTSxJQUFJbEIsTUFBTTtJQUNsQjtJQUNBRyxPQUFPQyxJQUFJLENBQUNGLE9BQU9pQixRQUFRLENBQUNIO0lBRTVCLE1BQU07SUFDTmIsT0FBT0MsSUFBSSxDQUFDRixPQUFPa0IsUUFBUTtJQUUzQixPQUFPZixPQUFPZ0IsTUFBTSxDQUFDbEI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcz81ZmZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgaGFzU3luY1psaWIgPSB0cnVlO1xubGV0IHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcbmlmICghemxpYi5kZWZsYXRlU3luYykge1xuICBoYXNTeW5jWmxpYiA9IGZhbHNlO1xufVxubGV0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmxldCBQYWNrZXIgPSByZXF1aXJlKFwiLi9wYWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGFEYXRhLCBvcHQpIHtcbiAgaWYgKCFoYXNTeW5jWmxpYikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVG8gdXNlIHRoZSBzeW5jIGNhcGFiaWxpdHkgb2YgdGhpcyBsaWJyYXJ5IGluIG9sZCBub2RlIHZlcnNpb25zLCBwbGVhc2UgcGluIHBuZ2pzIHRvIHYyLjMuMFwiXG4gICAgKTtcbiAgfVxuXG4gIGxldCBvcHRpb25zID0gb3B0IHx8IHt9O1xuXG4gIGxldCBwYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuXG4gIGxldCBjaHVua3MgPSBbXTtcblxuICAvLyBTaWduYXR1cmVcbiAgY2h1bmtzLnB1c2goQnVmZmVyLmZyb20oY29uc3RhbnRzLlBOR19TSUdOQVRVUkUpKTtcblxuICAvLyBIZWFkZXJcbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJSERSKG1ldGFEYXRhLndpZHRoLCBtZXRhRGF0YS5oZWlnaHQpKTtcblxuICBpZiAobWV0YURhdGEuZ2FtbWEpIHtcbiAgICBjaHVua3MucHVzaChwYWNrZXIucGFja0dBTUEobWV0YURhdGEuZ2FtbWEpKTtcbiAgfVxuXG4gIGxldCBmaWx0ZXJlZERhdGEgPSBwYWNrZXIuZmlsdGVyRGF0YShcbiAgICBtZXRhRGF0YS5kYXRhLFxuICAgIG1ldGFEYXRhLndpZHRoLFxuICAgIG1ldGFEYXRhLmhlaWdodFxuICApO1xuXG4gIC8vIGNvbXByZXNzIGl0XG4gIGxldCBjb21wcmVzc2VkRGF0YSA9IHpsaWIuZGVmbGF0ZVN5bmMoXG4gICAgZmlsdGVyZWREYXRhLFxuICAgIHBhY2tlci5nZXREZWZsYXRlT3B0aW9ucygpXG4gICk7XG4gIGZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgaWYgKCFjb21wcmVzc2VkRGF0YSB8fCAhY29tcHJlc3NlZERhdGEubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBuZyAtIGludmFsaWQgY29tcHJlc3NlZCBkYXRhIHJlc3BvbnNlXCIpO1xuICB9XG4gIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrSURBVChjb21wcmVzc2VkRGF0YSkpO1xuXG4gIC8vIEVuZFxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lFTkQoKSk7XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoY2h1bmtzKTtcbn07XG4iXSwibmFtZXMiOlsiaGFzU3luY1psaWIiLCJ6bGliIiwicmVxdWlyZSIsImRlZmxhdGVTeW5jIiwiY29uc3RhbnRzIiwiUGFja2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1ldGFEYXRhIiwib3B0IiwiRXJyb3IiLCJvcHRpb25zIiwicGFja2VyIiwiY2h1bmtzIiwicHVzaCIsIkJ1ZmZlciIsImZyb20iLCJQTkdfU0lHTkFUVVJFIiwicGFja0lIRFIiLCJ3aWR0aCIsImhlaWdodCIsImdhbW1hIiwicGFja0dBTUEiLCJmaWx0ZXJlZERhdGEiLCJmaWx0ZXJEYXRhIiwiZGF0YSIsImNvbXByZXNzZWREYXRhIiwiZ2V0RGVmbGF0ZU9wdGlvbnMiLCJsZW5ndGgiLCJwYWNrSURBVCIsInBhY2tJRU5EIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/packer-sync.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/packer.js":
/*!**********************************************!*\
  !*** ../../node_modules/pngjs/lib/packer.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pngjs/lib/constants.js\");\nlet CrcStream = __webpack_require__(/*! ./crc */ \"(ssr)/../../node_modules/pngjs/lib/crc.js\");\nlet bitPacker = __webpack_require__(/*! ./bitpacker */ \"(ssr)/../../node_modules/pngjs/lib/bitpacker.js\");\nlet filter = __webpack_require__(/*! ./filter-pack */ \"(ssr)/../../node_modules/pngjs/lib/filter-pack.js\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet Packer = module.exports = function(options) {\n    this._options = options;\n    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;\n    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;\n    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;\n    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;\n    options.deflateFactory = options.deflateFactory || zlib.createDeflate;\n    options.bitDepth = options.bitDepth || 8;\n    // This is outputColorType\n    options.colorType = typeof options.colorType === \"number\" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;\n    options.inputColorType = typeof options.inputColorType === \"number\" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) === -1) {\n        throw new Error(\"option color type:\" + options.colorType + \" is not supported at present\");\n    }\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.inputColorType) === -1) {\n        throw new Error(\"option input color type:\" + options.inputColorType + \" is not supported at present\");\n    }\n    if (options.bitDepth !== 8 && options.bitDepth !== 16) {\n        throw new Error(\"option bit depth:\" + options.bitDepth + \" is not supported at present\");\n    }\n};\nPacker.prototype.getDeflateOptions = function() {\n    return {\n        chunkSize: this._options.deflateChunkSize,\n        level: this._options.deflateLevel,\n        strategy: this._options.deflateStrategy\n    };\n};\nPacker.prototype.createDeflate = function() {\n    return this._options.deflateFactory(this.getDeflateOptions());\n};\nPacker.prototype.filterData = function(data, width, height) {\n    // convert to correct format for filtering (e.g. right bpp and bit depth)\n    let packedData = bitPacker(data, width, height, this._options);\n    // filter pixel data\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];\n    let filteredData = filter(packedData, width, height, this._options, bpp);\n    return filteredData;\n};\nPacker.prototype._packChunk = function(type, data) {\n    let len = data ? data.length : 0;\n    let buf = Buffer.alloc(len + 12);\n    buf.writeUInt32BE(len, 0);\n    buf.writeUInt32BE(type, 4);\n    if (data) {\n        data.copy(buf, 8);\n    }\n    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);\n    return buf;\n};\nPacker.prototype.packGAMA = function(gamma) {\n    let buf = Buffer.alloc(4);\n    buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);\n    return this._packChunk(constants.TYPE_gAMA, buf);\n};\nPacker.prototype.packIHDR = function(width, height) {\n    let buf = Buffer.alloc(13);\n    buf.writeUInt32BE(width, 0);\n    buf.writeUInt32BE(height, 4);\n    buf[8] = this._options.bitDepth; // Bit depth\n    buf[9] = this._options.colorType; // colorType\n    buf[10] = 0; // compression\n    buf[11] = 0; // filter\n    buf[12] = 0; // interlace\n    return this._packChunk(constants.TYPE_IHDR, buf);\n};\nPacker.prototype.packIDAT = function(data) {\n    return this._packChunk(constants.TYPE_IDAT, data);\n};\nPacker.prototype.packIEND = function() {\n    return this._packChunk(constants.TYPE_IEND, null);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/packer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/paeth-predictor.js":
/*!*******************************************************!*\
  !*** ../../node_modules/pngjs/lib/paeth-predictor.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function paethPredictor(left, above, upLeft) {\n    let paeth = left + above - upLeft;\n    let pLeft = Math.abs(paeth - left);\n    let pAbove = Math.abs(paeth - above);\n    let pUpLeft = Math.abs(paeth - upLeft);\n    if (pLeft <= pAbove && pLeft <= pUpLeft) {\n        return left;\n    }\n    if (pAbove <= pUpLeft) {\n        return above;\n    }\n    return upLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWV0aC1wcmVkaWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQzFELElBQUlDLFFBQVFILE9BQU9DLFFBQVFDO0lBQzNCLElBQUlFLFFBQVFDLEtBQUtDLEdBQUcsQ0FBQ0gsUUFBUUg7SUFDN0IsSUFBSU8sU0FBU0YsS0FBS0MsR0FBRyxDQUFDSCxRQUFRRjtJQUM5QixJQUFJTyxVQUFVSCxLQUFLQyxHQUFHLENBQUNILFFBQVFEO0lBRS9CLElBQUlFLFNBQVNHLFVBQVVILFNBQVNJLFNBQVM7UUFDdkMsT0FBT1I7SUFDVDtJQUNBLElBQUlPLFVBQVVDLFNBQVM7UUFDckIsT0FBT1A7SUFDVDtJQUNBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWV0aC1wcmVkaWN0b3IuanM/ODc5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYWV0aFByZWRpY3RvcihsZWZ0LCBhYm92ZSwgdXBMZWZ0KSB7XG4gIGxldCBwYWV0aCA9IGxlZnQgKyBhYm92ZSAtIHVwTGVmdDtcbiAgbGV0IHBMZWZ0ID0gTWF0aC5hYnMocGFldGggLSBsZWZ0KTtcbiAgbGV0IHBBYm92ZSA9IE1hdGguYWJzKHBhZXRoIC0gYWJvdmUpO1xuICBsZXQgcFVwTGVmdCA9IE1hdGguYWJzKHBhZXRoIC0gdXBMZWZ0KTtcblxuICBpZiAocExlZnQgPD0gcEFib3ZlICYmIHBMZWZ0IDw9IHBVcExlZnQpIHtcbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuICBpZiAocEFib3ZlIDw9IHBVcExlZnQpIHtcbiAgICByZXR1cm4gYWJvdmU7XG4gIH1cbiAgcmV0dXJuIHVwTGVmdDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhZXRoUHJlZGljdG9yIiwibGVmdCIsImFib3ZlIiwidXBMZWZ0IiwicGFldGgiLCJwTGVmdCIsIk1hdGgiLCJhYnMiLCJwQWJvdmUiLCJwVXBMZWZ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/paeth-predictor.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/parser-async.js":
/*!****************************************************!*\
  !*** ../../node_modules/pngjs/lib/parser-async.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/../../node_modules/pngjs/lib/chunkstream.js\");\nlet FilterAsync = __webpack_require__(/*! ./filter-parse-async */ \"(ssr)/../../node_modules/pngjs/lib/filter-parse-async.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/../../node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/../../node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/../../node_modules/pngjs/lib/format-normaliser.js\");\nlet ParserAsync = module.exports = function(options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n        read: this.read.bind(this),\n        error: this._handleError.bind(this),\n        metadata: this._handleMetaData.bind(this),\n        gamma: this.emit.bind(this, \"gamma\"),\n        palette: this._handlePalette.bind(this),\n        transColor: this._handleTransColor.bind(this),\n        finished: this._finished.bind(this),\n        inflateData: this._inflateData.bind(this),\n        simpleTransparency: this._simpleTransparency.bind(this),\n        headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\nParserAsync.prototype._handleError = function(err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n        this._inflate.destroy();\n    }\n    if (this._filter) {\n        this._filter.destroy();\n        // For backward compatibility with Node 7 and below.\n        // Suppress errors due to _inflate calling write() even after\n        // it's destroy()'ed.\n        this._filter.on(\"error\", function() {});\n    }\n    this.errord = true;\n};\nParserAsync.prototype._inflateData = function(data) {\n    if (!this._inflate) {\n        if (this._bitmapInfo.interlace) {\n            this._inflate = zlib.createInflate();\n            this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n            this._filter.on(\"complete\", this._complete.bind(this));\n            this._inflate.pipe(this._filter);\n        } else {\n            let rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n            let imageSize = rowSize * this._bitmapInfo.height;\n            let chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n            this._inflate = zlib.createInflate({\n                chunkSize: chunkSize\n            });\n            let leftToInflate = imageSize;\n            let emitError = this.emit.bind(this, \"error\");\n            this._inflate.on(\"error\", function(err) {\n                if (!leftToInflate) {\n                    return;\n                }\n                emitError(err);\n            });\n            this._filter.on(\"complete\", this._complete.bind(this));\n            let filterWrite = this._filter.write.bind(this._filter);\n            this._inflate.on(\"data\", function(chunk) {\n                if (!leftToInflate) {\n                    return;\n                }\n                if (chunk.length > leftToInflate) {\n                    chunk = chunk.slice(0, leftToInflate);\n                }\n                leftToInflate -= chunk.length;\n                filterWrite(chunk);\n            });\n            this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n        }\n    }\n    this._inflate.write(data);\n};\nParserAsync.prototype._handleMetaData = function(metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n};\nParserAsync.prototype._handleTransColor = function(transColor) {\n    this._bitmapInfo.transColor = transColor;\n};\nParserAsync.prototype._handlePalette = function(palette) {\n    this._bitmapInfo.palette = palette;\n};\nParserAsync.prototype._simpleTransparency = function() {\n    this._metaData.alpha = true;\n};\nParserAsync.prototype._headersFinished = function() {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n};\nParserAsync.prototype._finished = function() {\n    if (this.errord) {\n        return;\n    }\n    if (!this._inflate) {\n        this.emit(\"error\", \"No Inflate block\");\n    } else {\n        // no more data to inflate\n        this._inflate.end();\n    }\n};\nParserAsync.prototype._complete = function(filteredData) {\n    if (this.errord) {\n        return;\n    }\n    let normalisedBitmapData;\n    try {\n        let bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n        normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n        bitmapData = null;\n    } catch (ex) {\n        this._handleError(ex);\n        return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/parser-async.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/parser-sync.js":
/*!***************************************************!*\
  !*** ../../node_modules/pngjs/lib/parser-sync.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet inflateSync = __webpack_require__(/*! ./sync-inflate */ \"(ssr)/../../node_modules/pngjs/lib/sync-inflate.js\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/../../node_modules/pngjs/lib/sync-reader.js\");\nlet FilterSync = __webpack_require__(/*! ./filter-parse-sync */ \"(ssr)/../../node_modules/pngjs/lib/filter-parse-sync.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/../../node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/../../node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/../../node_modules/pngjs/lib/format-normaliser.js\");\nmodule.exports = function(buffer, options) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let err;\n    function handleError(_err_) {\n        err = _err_;\n    }\n    let metaData;\n    function handleMetaData(_metaData_) {\n        metaData = _metaData_;\n    }\n    function handleTransColor(transColor) {\n        metaData.transColor = transColor;\n    }\n    function handlePalette(palette) {\n        metaData.palette = palette;\n    }\n    function handleSimpleTransparency() {\n        metaData.alpha = true;\n    }\n    let gamma;\n    function handleGamma(_gamma_) {\n        gamma = _gamma_;\n    }\n    let inflateDataList = [];\n    function handleInflateData(inflatedData) {\n        inflateDataList.push(inflatedData);\n    }\n    let reader = new SyncReader(buffer);\n    let parser = new Parser(options, {\n        read: reader.read.bind(reader),\n        error: handleError,\n        metadata: handleMetaData,\n        gamma: handleGamma,\n        palette: handlePalette,\n        transColor: handleTransColor,\n        inflateData: handleInflateData,\n        simpleTransparency: handleSimpleTransparency\n    });\n    parser.start();\n    reader.process();\n    if (err) {\n        throw err;\n    }\n    //join together the inflate datas\n    let inflateData = Buffer.concat(inflateDataList);\n    inflateDataList.length = 0;\n    let inflatedData;\n    if (metaData.interlace) {\n        inflatedData = zlib.inflateSync(inflateData);\n    } else {\n        let rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n        let imageSize = rowSize * metaData.height;\n        inflatedData = inflateSync(inflateData, {\n            chunkSize: imageSize,\n            maxLength: imageSize\n        });\n    }\n    inflateData = null;\n    if (!inflatedData || !inflatedData.length) {\n        throw new Error(\"bad png - invalid inflate data response\");\n    }\n    let unfilteredData = FilterSync.process(inflatedData, metaData);\n    inflateData = null;\n    let bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n    unfilteredData = null;\n    let normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n    metaData.data = normalisedBitmapData;\n    metaData.gamma = gamma || 0;\n    return metaData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYXJzZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUMsa0JBQU07QUFDekIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsMEVBQWdCO0FBQzFDLElBQUksQ0FBQ0QsS0FBS0csV0FBVyxFQUFFO0lBQ3JCSixjQUFjO0FBQ2hCO0FBQ0EsSUFBSUssYUFBYUgsbUJBQU9BLENBQUMsd0VBQWU7QUFDeEMsSUFBSUksYUFBYUosbUJBQU9BLENBQUMsb0ZBQXFCO0FBQzlDLElBQUlLLFNBQVNMLG1CQUFPQSxDQUFDLDhEQUFVO0FBQy9CLElBQUlNLFlBQVlOLG1CQUFPQSxDQUFDLG9FQUFhO0FBQ3JDLElBQUlPLG1CQUFtQlAsbUJBQU9BLENBQUMsb0ZBQXFCO0FBRXBEUSxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hDLElBQUksQ0FBQ2IsYUFBYTtRQUNoQixNQUFNLElBQUljLE1BQ1I7SUFFSjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsWUFBWUMsS0FBSztRQUN4QkYsTUFBTUU7SUFDUjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsZUFBZUMsVUFBVTtRQUNoQ0YsV0FBV0U7SUFDYjtJQUVBLFNBQVNDLGlCQUFpQkMsVUFBVTtRQUNsQ0osU0FBU0ksVUFBVSxHQUFHQTtJQUN4QjtJQUVBLFNBQVNDLGNBQWNDLE9BQU87UUFDNUJOLFNBQVNNLE9BQU8sR0FBR0E7SUFDckI7SUFFQSxTQUFTQztRQUNQUCxTQUFTUSxLQUFLLEdBQUc7SUFDbkI7SUFFQSxJQUFJQztJQUNKLFNBQVNDLFlBQVlDLE9BQU87UUFDMUJGLFFBQVFFO0lBQ1Y7SUFFQSxJQUFJQyxrQkFBa0IsRUFBRTtJQUN4QixTQUFTQyxrQkFBa0JDLFlBQVk7UUFDckNGLGdCQUFnQkcsSUFBSSxDQUFDRDtJQUN2QjtJQUVBLElBQUlFLFNBQVMsSUFBSTdCLFdBQVdPO0lBRTVCLElBQUl1QixTQUFTLElBQUk1QixPQUFPTSxTQUFTO1FBQy9CdUIsTUFBTUYsT0FBT0UsSUFBSSxDQUFDQyxJQUFJLENBQUNIO1FBQ3ZCSSxPQUFPdEI7UUFDUHVCLFVBQVVwQjtRQUNWUSxPQUFPQztRQUNQSixTQUFTRDtRQUNURCxZQUFZRDtRQUNabUIsYUFBYVQ7UUFDYlUsb0JBQW9CaEI7SUFDdEI7SUFFQVUsT0FBT08sS0FBSztJQUNaUixPQUFPUyxPQUFPO0lBRWQsSUFBSTVCLEtBQUs7UUFDUCxNQUFNQTtJQUNSO0lBRUEsaUNBQWlDO0lBQ2pDLElBQUl5QixjQUFjSSxPQUFPQyxNQUFNLENBQUNmO0lBQ2hDQSxnQkFBZ0JnQixNQUFNLEdBQUc7SUFFekIsSUFBSWQ7SUFDSixJQUFJZCxTQUFTNkIsU0FBUyxFQUFFO1FBQ3RCZixlQUFlL0IsS0FBS0UsV0FBVyxDQUFDcUM7SUFDbEMsT0FBTztRQUNMLElBQUlRLFVBQ0YsQ0FBQyxTQUFVQyxLQUFLLEdBQUcvQixTQUFTZ0MsR0FBRyxHQUFHaEMsU0FBU2lDLEtBQUssR0FBRyxLQUFNLEtBQUs7UUFDaEUsSUFBSUMsWUFBWUosVUFBVTlCLFNBQVNtQyxNQUFNO1FBQ3pDckIsZUFBZTdCLFlBQVlxQyxhQUFhO1lBQ3RDYyxXQUFXRjtZQUNYRyxXQUFXSDtRQUNiO0lBQ0Y7SUFDQVosY0FBYztJQUVkLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNBLGFBQWFjLE1BQU0sRUFBRTtRQUN6QyxNQUFNLElBQUloQyxNQUFNO0lBQ2xCO0lBRUEsSUFBSTBDLGlCQUFpQmxELFdBQVdxQyxPQUFPLENBQUNYLGNBQWNkO0lBQ3REc0IsY0FBYztJQUVkLElBQUlpQixhQUFhakQsVUFBVWtELFlBQVksQ0FBQ0YsZ0JBQWdCdEM7SUFDeERzQyxpQkFBaUI7SUFFakIsSUFBSUcsdUJBQXVCbEQsaUJBQWlCZ0QsWUFBWXZDO0lBRXhEQSxTQUFTMEMsSUFBSSxHQUFHRDtJQUNoQnpDLFNBQVNTLEtBQUssR0FBR0EsU0FBUztJQUUxQixPQUFPVDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFyc2VyLXN5bmMuanM/NmE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IGhhc1N5bmNabGliID0gdHJ1ZTtcbmxldCB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG5sZXQgaW5mbGF0ZVN5bmMgPSByZXF1aXJlKFwiLi9zeW5jLWluZmxhdGVcIik7XG5pZiAoIXpsaWIuZGVmbGF0ZVN5bmMpIHtcbiAgaGFzU3luY1psaWIgPSBmYWxzZTtcbn1cbmxldCBTeW5jUmVhZGVyID0gcmVxdWlyZShcIi4vc3luYy1yZWFkZXJcIik7XG5sZXQgRmlsdGVyU3luYyA9IHJlcXVpcmUoXCIuL2ZpbHRlci1wYXJzZS1zeW5jXCIpO1xubGV0IFBhcnNlciA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbmxldCBiaXRtYXBwZXIgPSByZXF1aXJlKFwiLi9iaXRtYXBwZXJcIik7XG5sZXQgZm9ybWF0Tm9ybWFsaXNlciA9IHJlcXVpcmUoXCIuL2Zvcm1hdC1ub3JtYWxpc2VyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCFoYXNTeW5jWmxpYikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVG8gdXNlIHRoZSBzeW5jIGNhcGFiaWxpdHkgb2YgdGhpcyBsaWJyYXJ5IGluIG9sZCBub2RlIHZlcnNpb25zLCBwbGVhc2UgcGluIHBuZ2pzIHRvIHYyLjMuMFwiXG4gICAgKTtcbiAgfVxuXG4gIGxldCBlcnI7XG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKF9lcnJfKSB7XG4gICAgZXJyID0gX2Vycl87XG4gIH1cblxuICBsZXQgbWV0YURhdGE7XG4gIGZ1bmN0aW9uIGhhbmRsZU1ldGFEYXRhKF9tZXRhRGF0YV8pIHtcbiAgICBtZXRhRGF0YSA9IF9tZXRhRGF0YV87XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVUcmFuc0NvbG9yKHRyYW5zQ29sb3IpIHtcbiAgICBtZXRhRGF0YS50cmFuc0NvbG9yID0gdHJhbnNDb2xvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBhbGV0dGUocGFsZXR0ZSkge1xuICAgIG1ldGFEYXRhLnBhbGV0dGUgPSBwYWxldHRlO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU2ltcGxlVHJhbnNwYXJlbmN5KCkge1xuICAgIG1ldGFEYXRhLmFscGhhID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCBnYW1tYTtcbiAgZnVuY3Rpb24gaGFuZGxlR2FtbWEoX2dhbW1hXykge1xuICAgIGdhbW1hID0gX2dhbW1hXztcbiAgfVxuXG4gIGxldCBpbmZsYXRlRGF0YUxpc3QgPSBbXTtcbiAgZnVuY3Rpb24gaGFuZGxlSW5mbGF0ZURhdGEoaW5mbGF0ZWREYXRhKSB7XG4gICAgaW5mbGF0ZURhdGFMaXN0LnB1c2goaW5mbGF0ZWREYXRhKTtcbiAgfVxuXG4gIGxldCByZWFkZXIgPSBuZXcgU3luY1JlYWRlcihidWZmZXIpO1xuXG4gIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMsIHtcbiAgICByZWFkOiByZWFkZXIucmVhZC5iaW5kKHJlYWRlciksXG4gICAgZXJyb3I6IGhhbmRsZUVycm9yLFxuICAgIG1ldGFkYXRhOiBoYW5kbGVNZXRhRGF0YSxcbiAgICBnYW1tYTogaGFuZGxlR2FtbWEsXG4gICAgcGFsZXR0ZTogaGFuZGxlUGFsZXR0ZSxcbiAgICB0cmFuc0NvbG9yOiBoYW5kbGVUcmFuc0NvbG9yLFxuICAgIGluZmxhdGVEYXRhOiBoYW5kbGVJbmZsYXRlRGF0YSxcbiAgICBzaW1wbGVUcmFuc3BhcmVuY3k6IGhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSxcbiAgfSk7XG5cbiAgcGFyc2VyLnN0YXJ0KCk7XG4gIHJlYWRlci5wcm9jZXNzKCk7XG5cbiAgaWYgKGVycikge1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIC8vam9pbiB0b2dldGhlciB0aGUgaW5mbGF0ZSBkYXRhc1xuICBsZXQgaW5mbGF0ZURhdGEgPSBCdWZmZXIuY29uY2F0KGluZmxhdGVEYXRhTGlzdCk7XG4gIGluZmxhdGVEYXRhTGlzdC5sZW5ndGggPSAwO1xuXG4gIGxldCBpbmZsYXRlZERhdGE7XG4gIGlmIChtZXRhRGF0YS5pbnRlcmxhY2UpIHtcbiAgICBpbmZsYXRlZERhdGEgPSB6bGliLmluZmxhdGVTeW5jKGluZmxhdGVEYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm93U2l6ZSA9XG4gICAgICAoKG1ldGFEYXRhLndpZHRoICogbWV0YURhdGEuYnBwICogbWV0YURhdGEuZGVwdGggKyA3KSA+PiAzKSArIDE7XG4gICAgbGV0IGltYWdlU2l6ZSA9IHJvd1NpemUgKiBtZXRhRGF0YS5oZWlnaHQ7XG4gICAgaW5mbGF0ZWREYXRhID0gaW5mbGF0ZVN5bmMoaW5mbGF0ZURhdGEsIHtcbiAgICAgIGNodW5rU2l6ZTogaW1hZ2VTaXplLFxuICAgICAgbWF4TGVuZ3RoOiBpbWFnZVNpemUsXG4gICAgfSk7XG4gIH1cbiAgaW5mbGF0ZURhdGEgPSBudWxsO1xuXG4gIGlmICghaW5mbGF0ZWREYXRhIHx8ICFpbmZsYXRlZERhdGEubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBuZyAtIGludmFsaWQgaW5mbGF0ZSBkYXRhIHJlc3BvbnNlXCIpO1xuICB9XG5cbiAgbGV0IHVuZmlsdGVyZWREYXRhID0gRmlsdGVyU3luYy5wcm9jZXNzKGluZmxhdGVkRGF0YSwgbWV0YURhdGEpO1xuICBpbmZsYXRlRGF0YSA9IG51bGw7XG5cbiAgbGV0IGJpdG1hcERhdGEgPSBiaXRtYXBwZXIuZGF0YVRvQml0TWFwKHVuZmlsdGVyZWREYXRhLCBtZXRhRGF0YSk7XG4gIHVuZmlsdGVyZWREYXRhID0gbnVsbDtcblxuICBsZXQgbm9ybWFsaXNlZEJpdG1hcERhdGEgPSBmb3JtYXROb3JtYWxpc2VyKGJpdG1hcERhdGEsIG1ldGFEYXRhKTtcblxuICBtZXRhRGF0YS5kYXRhID0gbm9ybWFsaXNlZEJpdG1hcERhdGE7XG4gIG1ldGFEYXRhLmdhbW1hID0gZ2FtbWEgfHwgMDtcblxuICByZXR1cm4gbWV0YURhdGE7XG59O1xuIl0sIm5hbWVzIjpbImhhc1N5bmNabGliIiwiemxpYiIsInJlcXVpcmUiLCJpbmZsYXRlU3luYyIsImRlZmxhdGVTeW5jIiwiU3luY1JlYWRlciIsIkZpbHRlclN5bmMiLCJQYXJzZXIiLCJiaXRtYXBwZXIiLCJmb3JtYXROb3JtYWxpc2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsImJ1ZmZlciIsIm9wdGlvbnMiLCJFcnJvciIsImVyciIsImhhbmRsZUVycm9yIiwiX2Vycl8iLCJtZXRhRGF0YSIsImhhbmRsZU1ldGFEYXRhIiwiX21ldGFEYXRhXyIsImhhbmRsZVRyYW5zQ29sb3IiLCJ0cmFuc0NvbG9yIiwiaGFuZGxlUGFsZXR0ZSIsInBhbGV0dGUiLCJoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3kiLCJhbHBoYSIsImdhbW1hIiwiaGFuZGxlR2FtbWEiLCJfZ2FtbWFfIiwiaW5mbGF0ZURhdGFMaXN0IiwiaGFuZGxlSW5mbGF0ZURhdGEiLCJpbmZsYXRlZERhdGEiLCJwdXNoIiwicmVhZGVyIiwicGFyc2VyIiwicmVhZCIsImJpbmQiLCJlcnJvciIsIm1ldGFkYXRhIiwiaW5mbGF0ZURhdGEiLCJzaW1wbGVUcmFuc3BhcmVuY3kiLCJzdGFydCIsInByb2Nlc3MiLCJCdWZmZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJpbnRlcmxhY2UiLCJyb3dTaXplIiwid2lkdGgiLCJicHAiLCJkZXB0aCIsImltYWdlU2l6ZSIsImhlaWdodCIsImNodW5rU2l6ZSIsIm1heExlbmd0aCIsInVuZmlsdGVyZWREYXRhIiwiYml0bWFwRGF0YSIsImRhdGFUb0JpdE1hcCIsIm5vcm1hbGlzZWRCaXRtYXBEYXRhIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/parser-sync.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/parser.js":
/*!**********************************************!*\
  !*** ../../node_modules/pngjs/lib/parser.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/../../node_modules/pngjs/lib/constants.js\");\nlet CrcCalculator = __webpack_require__(/*! ./crc */ \"(ssr)/../../node_modules/pngjs/lib/crc.js\");\nlet Parser = module.exports = function(options, dependencies) {\n    this._options = options;\n    options.checkCRC = options.checkCRC !== false;\n    this._hasIHDR = false;\n    this._hasIEND = false;\n    this._emittedHeadersFinished = false;\n    // input flags/metadata\n    this._palette = [];\n    this._colorType = 0;\n    this._chunks = {};\n    this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);\n    this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);\n    this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);\n    this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);\n    this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);\n    this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);\n    this.read = dependencies.read;\n    this.error = dependencies.error;\n    this.metadata = dependencies.metadata;\n    this.gamma = dependencies.gamma;\n    this.transColor = dependencies.transColor;\n    this.palette = dependencies.palette;\n    this.parsed = dependencies.parsed;\n    this.inflateData = dependencies.inflateData;\n    this.finished = dependencies.finished;\n    this.simpleTransparency = dependencies.simpleTransparency;\n    this.headersFinished = dependencies.headersFinished || function() {};\n};\nParser.prototype.start = function() {\n    this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));\n};\nParser.prototype._parseSignature = function(data) {\n    let signature = constants.PNG_SIGNATURE;\n    for(let i = 0; i < signature.length; i++){\n        if (data[i] !== signature[i]) {\n            this.error(new Error(\"Invalid file signature\"));\n            return;\n        }\n    }\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._parseChunkBegin = function(data) {\n    // chunk content length\n    let length = data.readUInt32BE(0);\n    // chunk type\n    let type = data.readUInt32BE(4);\n    let name = \"\";\n    for(let i = 4; i < 8; i++){\n        name += String.fromCharCode(data[i]);\n    }\n    //console.log('chunk ', name, length);\n    // chunk flags\n    let ancillary = Boolean(data[4] & 0x20); // or critical\n    //    priv = Boolean(data[5] & 0x20), // or public\n    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe\n    if (!this._hasIHDR && type !== constants.TYPE_IHDR) {\n        this.error(new Error(\"Expected IHDR on beggining\"));\n        return;\n    }\n    this._crc = new CrcCalculator();\n    this._crc.write(Buffer.from(name));\n    if (this._chunks[type]) {\n        return this._chunks[type](length);\n    }\n    if (!ancillary) {\n        this.error(new Error(\"Unsupported critical chunk type \" + name));\n        return;\n    }\n    this.read(length + 4, this._skipChunk.bind(this));\n};\nParser.prototype._skipChunk = function() {\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._handleChunkEnd = function() {\n    this.read(4, this._parseChunkEnd.bind(this));\n};\nParser.prototype._parseChunkEnd = function(data) {\n    let fileCrc = data.readInt32BE(0);\n    let calcCrc = this._crc.crc32();\n    // check CRC\n    if (this._options.checkCRC && calcCrc !== fileCrc) {\n        this.error(new Error(\"Crc error - \" + fileCrc + \" - \" + calcCrc));\n        return;\n    }\n    if (!this._hasIEND) {\n        this.read(8, this._parseChunkBegin.bind(this));\n    }\n};\nParser.prototype._handleIHDR = function(length) {\n    this.read(length, this._parseIHDR.bind(this));\n};\nParser.prototype._parseIHDR = function(data) {\n    this._crc.write(data);\n    let width = data.readUInt32BE(0);\n    let height = data.readUInt32BE(4);\n    let depth = data[8];\n    let colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha\n    let compr = data[10];\n    let filter = data[11];\n    let interlace = data[12];\n    // console.log('    width', width, 'height', height,\n    //     'depth', depth, 'colorType', colorType,\n    //     'compr', compr, 'filter', filter, 'interlace', interlace\n    // );\n    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {\n        this.error(new Error(\"Unsupported bit depth \" + depth));\n        return;\n    }\n    if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {\n        this.error(new Error(\"Unsupported color type\"));\n        return;\n    }\n    if (compr !== 0) {\n        this.error(new Error(\"Unsupported compression method\"));\n        return;\n    }\n    if (filter !== 0) {\n        this.error(new Error(\"Unsupported filter method\"));\n        return;\n    }\n    if (interlace !== 0 && interlace !== 1) {\n        this.error(new Error(\"Unsupported interlace method\"));\n        return;\n    }\n    this._colorType = colorType;\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];\n    this._hasIHDR = true;\n    this.metadata({\n        width: width,\n        height: height,\n        depth: depth,\n        interlace: Boolean(interlace),\n        palette: Boolean(colorType & constants.COLORTYPE_PALETTE),\n        color: Boolean(colorType & constants.COLORTYPE_COLOR),\n        alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),\n        bpp: bpp,\n        colorType: colorType\n    });\n    this._handleChunkEnd();\n};\nParser.prototype._handlePLTE = function(length) {\n    this.read(length, this._parsePLTE.bind(this));\n};\nParser.prototype._parsePLTE = function(data) {\n    this._crc.write(data);\n    let entries = Math.floor(data.length / 3);\n    // console.log('Palette:', entries);\n    for(let i = 0; i < entries; i++){\n        this._palette.push([\n            data[i * 3],\n            data[i * 3 + 1],\n            data[i * 3 + 2],\n            0xff\n        ]);\n    }\n    this.palette(this._palette);\n    this._handleChunkEnd();\n};\nParser.prototype._handleTRNS = function(length) {\n    this.simpleTransparency();\n    this.read(length, this._parseTRNS.bind(this));\n};\nParser.prototype._parseTRNS = function(data) {\n    this._crc.write(data);\n    // palette\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {\n        if (this._palette.length === 0) {\n            this.error(new Error(\"Transparency chunk must be after palette\"));\n            return;\n        }\n        if (data.length > this._palette.length) {\n            this.error(new Error(\"More transparent colors than palette size\"));\n            return;\n        }\n        for(let i = 0; i < data.length; i++){\n            this._palette[i][3] = data[i];\n        }\n        this.palette(this._palette);\n    }\n    // for colorType 0 (grayscale) and 2 (rgb)\n    // there might be one gray/color defined as transparent\n    if (this._colorType === constants.COLORTYPE_GRAYSCALE) {\n        // grey, 2 bytes\n        this.transColor([\n            data.readUInt16BE(0)\n        ]);\n    }\n    if (this._colorType === constants.COLORTYPE_COLOR) {\n        this.transColor([\n            data.readUInt16BE(0),\n            data.readUInt16BE(2),\n            data.readUInt16BE(4)\n        ]);\n    }\n    this._handleChunkEnd();\n};\nParser.prototype._handleGAMA = function(length) {\n    this.read(length, this._parseGAMA.bind(this));\n};\nParser.prototype._parseGAMA = function(data) {\n    this._crc.write(data);\n    this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);\n    this._handleChunkEnd();\n};\nParser.prototype._handleIDAT = function(length) {\n    if (!this._emittedHeadersFinished) {\n        this._emittedHeadersFinished = true;\n        this.headersFinished();\n    }\n    this.read(-length, this._parseIDAT.bind(this, length));\n};\nParser.prototype._parseIDAT = function(length, data) {\n    this._crc.write(data);\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {\n        throw new Error(\"Expected palette not found\");\n    }\n    this.inflateData(data);\n    let leftOverLength = length - data.length;\n    if (leftOverLength > 0) {\n        this._handleIDAT(leftOverLength);\n    } else {\n        this._handleChunkEnd();\n    }\n};\nParser.prototype._handleIEND = function(length) {\n    this.read(length, this._parseIEND.bind(this));\n};\nParser.prototype._parseIEND = function(data) {\n    this._crc.write(data);\n    this._hasIEND = true;\n    this._handleChunkEnd();\n    if (this.finished) {\n        this.finished();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/png-sync.js":
/*!************************************************!*\
  !*** ../../node_modules/pngjs/lib/png-sync.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet parse = __webpack_require__(/*! ./parser-sync */ \"(ssr)/../../node_modules/pngjs/lib/parser-sync.js\");\nlet pack = __webpack_require__(/*! ./packer-sync */ \"(ssr)/../../node_modules/pngjs/lib/packer-sync.js\");\nexports.read = function(buffer, options) {\n    return parse(buffer, options || {});\n};\nexports.write = function(png, options) {\n    return pack(png, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmctc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDLHdFQUFlO0FBQ25DLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDLHdFQUFlO0FBRWxDRSxZQUFZLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPO0lBQ3RDLE9BQU9OLE1BQU1LLFFBQVFDLFdBQVcsQ0FBQztBQUNuQztBQUVBSCxhQUFhLEdBQUcsU0FBVUssR0FBRyxFQUFFRixPQUFPO0lBQ3BDLE9BQU9KLEtBQUtNLEtBQUtGO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcG5nLXN5bmMuanM/MGU0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHBhcnNlID0gcmVxdWlyZShcIi4vcGFyc2VyLXN5bmNcIik7XG5sZXQgcGFjayA9IHJlcXVpcmUoXCIuL3BhY2tlci1zeW5jXCIpO1xuXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRpb25zKSB7XG4gIHJldHVybiBwYXJzZShidWZmZXIsIG9wdGlvbnMgfHwge30pO1xufTtcblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChwbmcsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHBhY2socG5nLCBvcHRpb25zKTtcbn07XG4iXSwibmFtZXMiOlsicGFyc2UiLCJyZXF1aXJlIiwicGFjayIsImV4cG9ydHMiLCJyZWFkIiwiYnVmZmVyIiwib3B0aW9ucyIsIndyaXRlIiwicG5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/png-sync.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/png.js":
/*!*******************************************!*\
  !*** ../../node_modules/pngjs/lib/png.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet Parser = __webpack_require__(/*! ./parser-async */ \"(ssr)/../../node_modules/pngjs/lib/parser-async.js\");\nlet Packer = __webpack_require__(/*! ./packer-async */ \"(ssr)/../../node_modules/pngjs/lib/packer-async.js\");\nlet PNGSync = __webpack_require__(/*! ./png-sync */ \"(ssr)/../../node_modules/pngjs/lib/png-sync.js\");\nlet PNG = exports.PNG = function(options) {\n    Stream.call(this);\n    options = options || {}; // eslint-disable-line no-param-reassign\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    this.width = options.width | 0;\n    this.height = options.height | 0;\n    this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null;\n    if (options.fill && this.data) {\n        this.data.fill(0);\n    }\n    this.gamma = 0;\n    this.readable = this.writable = true;\n    this._parser = new Parser(options);\n    this._parser.on(\"error\", this.emit.bind(this, \"error\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._parser.on(\"metadata\", this._metadata.bind(this));\n    this._parser.on(\"gamma\", this._gamma.bind(this));\n    this._parser.on(\"parsed\", (function(data) {\n        this.data = data;\n        this.emit(\"parsed\", data);\n    }).bind(this));\n    this._packer = new Packer(options);\n    this._packer.on(\"data\", this.emit.bind(this, \"data\"));\n    this._packer.on(\"end\", this.emit.bind(this, \"end\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._packer.on(\"error\", this.emit.bind(this, \"error\"));\n};\nutil.inherits(PNG, Stream);\nPNG.sync = PNGSync;\nPNG.prototype.pack = function() {\n    if (!this.data || !this.data.length) {\n        this.emit(\"error\", \"No data provided\");\n        return this;\n    }\n    process.nextTick((function() {\n        this._packer.pack(this.data, this.width, this.height, this.gamma);\n    }).bind(this));\n    return this;\n};\nPNG.prototype.parse = function(data, callback) {\n    if (callback) {\n        let onParsed, onError;\n        onParsed = (function(parsedData) {\n            this.removeListener(\"error\", onError);\n            this.data = parsedData;\n            callback(null, this);\n        }).bind(this);\n        onError = (function(err) {\n            this.removeListener(\"parsed\", onParsed);\n            callback(err, null);\n        }).bind(this);\n        this.once(\"parsed\", onParsed);\n        this.once(\"error\", onError);\n    }\n    this.end(data);\n    return this;\n};\nPNG.prototype.write = function(data) {\n    this._parser.write(data);\n    return true;\n};\nPNG.prototype.end = function(data) {\n    this._parser.end(data);\n};\nPNG.prototype._metadata = function(metadata) {\n    this.width = metadata.width;\n    this.height = metadata.height;\n    this.emit(\"metadata\", metadata);\n};\nPNG.prototype._gamma = function(gamma) {\n    this.gamma = gamma;\n};\nPNG.prototype._handleClose = function() {\n    if (!this._parser.writable && !this._packer.readable) {\n        this.emit(\"close\");\n    }\n};\nPNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    /* eslint-disable no-param-reassign */ srcX |= 0;\n    srcY |= 0;\n    width |= 0;\n    height |= 0;\n    deltaX |= 0;\n    deltaY |= 0;\n    /* eslint-enable no-param-reassign */ if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {\n        throw new Error(\"bitblt reading outside image\");\n    }\n    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {\n        throw new Error(\"bitblt writing outside image\");\n    }\n    for(let y = 0; y < height; y++){\n        src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);\n    }\n};\nPNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);\n    return this;\n};\nPNG.adjustGamma = function(src) {\n    if (src.gamma) {\n        for(let y = 0; y < src.height; y++){\n            for(let x = 0; x < src.width; x++){\n                let idx = src.width * y + x << 2;\n                for(let i = 0; i < 3; i++){\n                    let sample = src.data[idx + i] / 255;\n                    sample = Math.pow(sample, 1 / 2.2 / src.gamma);\n                    src.data[idx + i] = Math.round(sample * 255);\n                }\n            }\n        }\n        src.gamma = 0;\n    }\n};\nPNG.prototype.adjustGamma = function() {\n    PNG.adjustGamma(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUM3QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQywwRUFBZ0I7QUFDckMsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUMsMEVBQWdCO0FBQ3JDLElBQUlJLFVBQVVKLG1CQUFPQSxDQUFDLGtFQUFZO0FBRWxDLElBQUlLLE1BQU9DLFdBQVcsR0FBRyxTQUFVQyxPQUFPO0lBQ3hDTixPQUFPTyxJQUFJLENBQUMsSUFBSTtJQUVoQkQsVUFBVUEsV0FBVyxDQUFDLEdBQUcsd0NBQXdDO0lBRWpFLHFFQUFxRTtJQUNyRSxJQUFJLENBQUNFLEtBQUssR0FBR0YsUUFBUUUsS0FBSyxHQUFHO0lBQzdCLElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxRQUFRRyxNQUFNLEdBQUc7SUFFL0IsSUFBSSxDQUFDQyxJQUFJLEdBQ1AsSUFBSSxDQUFDRixLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUM1QkUsT0FBT0MsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDSixLQUFLLEdBQUcsSUFBSSxDQUFDQyxNQUFNLElBQ3pDO0lBRU4sSUFBSUgsUUFBUU8sSUFBSSxJQUFJLElBQUksQ0FBQ0gsSUFBSSxFQUFFO1FBQzdCLElBQUksQ0FBQ0EsSUFBSSxDQUFDRyxJQUFJLENBQUM7SUFDakI7SUFFQSxJQUFJLENBQUNDLEtBQUssR0FBRztJQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBRWhDLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUloQixPQUFPSztJQUUxQixJQUFJLENBQUNXLE9BQU8sQ0FBQ0MsRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDQyxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUU7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LEtBQUtDLEdBQUcsQ0FBQ0YsUUFBUSxJQUFJLE1BQU1iLElBQUk5QixLQUFLO29CQUM3QzhCLElBQUlsQyxJQUFJLENBQUM2QyxNQUFNQyxFQUFFLEdBQUdFLEtBQUtFLEtBQUssQ0FBQ0gsU0FBUztnQkFDMUM7WUFDRjtRQUNGO1FBQ0FiLElBQUk5QixLQUFLLEdBQUc7SUFDZDtBQUNGO0FBRUFWLElBQUl1QixTQUFTLENBQUMwQixXQUFXLEdBQUc7SUFDMUJqRCxJQUFJaUQsV0FBVyxDQUFDLElBQUk7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmcuanM/ODVjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBTdHJlYW0gPSByZXF1aXJlKFwic3RyZWFtXCIpO1xubGV0IFBhcnNlciA9IHJlcXVpcmUoXCIuL3BhcnNlci1hc3luY1wiKTtcbmxldCBQYWNrZXIgPSByZXF1aXJlKFwiLi9wYWNrZXItYXN5bmNcIik7XG5sZXQgUE5HU3luYyA9IHJlcXVpcmUoXCIuL3BuZy1zeW5jXCIpO1xuXG5sZXQgUE5HID0gKGV4cG9ydHMuUE5HID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICAvLyBjb2VyY2UgcGl4ZWwgZGltZW5zaW9ucyB0byBpbnRlZ2VycyAoYWxzbyBjb2VyY2VzIHVuZGVmaW5lZCAtPiAwKTpcbiAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfCAwO1xuICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHwgMDtcblxuICB0aGlzLmRhdGEgPVxuICAgIHRoaXMud2lkdGggPiAwICYmIHRoaXMuaGVpZ2h0ID4gMFxuICAgICAgPyBCdWZmZXIuYWxsb2MoNCAqIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodClcbiAgICAgIDogbnVsbDtcblxuICBpZiAob3B0aW9ucy5maWxsICYmIHRoaXMuZGF0YSkge1xuICAgIHRoaXMuZGF0YS5maWxsKDApO1xuICB9XG5cbiAgdGhpcy5nYW1tYSA9IDA7XG4gIHRoaXMucmVhZGFibGUgPSB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICB0aGlzLl9wYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3BhcnNlci5vbihcImVycm9yXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZXJyb3JcIikpO1xuICB0aGlzLl9wYXJzZXIub24oXCJjbG9zZVwiLCB0aGlzLl9oYW5kbGVDbG9zZS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5fcGFyc2VyLm9uKFwibWV0YWRhdGFcIiwgdGhpcy5fbWV0YWRhdGEuYmluZCh0aGlzKSk7XG4gIHRoaXMuX3BhcnNlci5vbihcImdhbW1hXCIsIHRoaXMuX2dhbW1hLmJpbmQodGhpcykpO1xuICB0aGlzLl9wYXJzZXIub24oXG4gICAgXCJwYXJzZWRcIixcbiAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuZW1pdChcInBhcnNlZFwiLCBkYXRhKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICB0aGlzLl9wYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuICB0aGlzLl9wYWNrZXIub24oXCJkYXRhXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZGF0YVwiKSk7XG4gIHRoaXMuX3BhY2tlci5vbihcImVuZFwiLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBcImVuZFwiKSk7XG4gIHRoaXMuX3BhcnNlci5vbihcImNsb3NlXCIsIHRoaXMuX2hhbmRsZUNsb3NlLmJpbmQodGhpcykpO1xuICB0aGlzLl9wYWNrZXIub24oXCJlcnJvclwiLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBcImVycm9yXCIpKTtcbn0pO1xudXRpbC5pbmhlcml0cyhQTkcsIFN0cmVhbSk7XG5cblBORy5zeW5jID0gUE5HU3luYztcblxuUE5HLnByb3RvdHlwZS5wYWNrID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuZGF0YSB8fCAhdGhpcy5kYXRhLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIFwiTm8gZGF0YSBwcm92aWRlZFwiKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByb2Nlc3MubmV4dFRpY2soXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fcGFja2VyLnBhY2sodGhpcy5kYXRhLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5nYW1tYSk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5QTkcucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGxldCBvblBhcnNlZCwgb25FcnJvcjtcblxuICAgIG9uUGFyc2VkID0gZnVuY3Rpb24gKHBhcnNlZERhdGEpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcblxuICAgICAgdGhpcy5kYXRhID0gcGFyc2VkRGF0YTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIG9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwicGFyc2VkXCIsIG9uUGFyc2VkKTtcblxuICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9uY2UoXCJwYXJzZWRcIiwgb25QYXJzZWQpO1xuICAgIHRoaXMub25jZShcImVycm9yXCIsIG9uRXJyb3IpO1xuICB9XG5cbiAgdGhpcy5lbmQoZGF0YSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUE5HLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX3BhcnNlci53cml0ZShkYXRhKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5QTkcucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX3BhcnNlci5lbmQoZGF0YSk7XG59O1xuXG5QTkcucHJvdG90eXBlLl9tZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YSkge1xuICB0aGlzLndpZHRoID0gbWV0YWRhdGEud2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gbWV0YWRhdGEuaGVpZ2h0O1xuXG4gIHRoaXMuZW1pdChcIm1ldGFkYXRhXCIsIG1ldGFkYXRhKTtcbn07XG5cblBORy5wcm90b3R5cGUuX2dhbW1hID0gZnVuY3Rpb24gKGdhbW1hKSB7XG4gIHRoaXMuZ2FtbWEgPSBnYW1tYTtcbn07XG5cblBORy5wcm90b3R5cGUuX2hhbmRsZUNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3BhcnNlci53cml0YWJsZSAmJiAhdGhpcy5fcGFja2VyLnJlYWRhYmxlKSB7XG4gICAgdGhpcy5lbWl0KFwiY2xvc2VcIik7XG4gIH1cbn07XG5cblBORy5iaXRibHQgPSBmdW5jdGlvbiAoc3JjLCBkc3QsIHNyY1gsIHNyY1ksIHdpZHRoLCBoZWlnaHQsIGRlbHRhWCwgZGVsdGFZKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LXBhcmFtc1xuICAvLyBjb2VyY2UgcGl4ZWwgZGltZW5zaW9ucyB0byBpbnRlZ2VycyAoYWxzbyBjb2VyY2VzIHVuZGVmaW5lZCAtPiAwKTpcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgc3JjWCB8PSAwO1xuICBzcmNZIHw9IDA7XG4gIHdpZHRoIHw9IDA7XG4gIGhlaWdodCB8PSAwO1xuICBkZWx0YVggfD0gMDtcbiAgZGVsdGFZIHw9IDA7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuICBpZiAoXG4gICAgc3JjWCA+IHNyYy53aWR0aCB8fFxuICAgIHNyY1kgPiBzcmMuaGVpZ2h0IHx8XG4gICAgc3JjWCArIHdpZHRoID4gc3JjLndpZHRoIHx8XG4gICAgc3JjWSArIGhlaWdodCA+IHNyYy5oZWlnaHRcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYml0Ymx0IHJlYWRpbmcgb3V0c2lkZSBpbWFnZVwiKTtcbiAgfVxuXG4gIGlmIChcbiAgICBkZWx0YVggPiBkc3Qud2lkdGggfHxcbiAgICBkZWx0YVkgPiBkc3QuaGVpZ2h0IHx8XG4gICAgZGVsdGFYICsgd2lkdGggPiBkc3Qud2lkdGggfHxcbiAgICBkZWx0YVkgKyBoZWlnaHQgPiBkc3QuaGVpZ2h0XG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpdGJsdCB3cml0aW5nIG91dHNpZGUgaW1hZ2VcIik7XG4gIH1cblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgc3JjLmRhdGEuY29weShcbiAgICAgIGRzdC5kYXRhLFxuICAgICAgKChkZWx0YVkgKyB5KSAqIGRzdC53aWR0aCArIGRlbHRhWCkgPDwgMixcbiAgICAgICgoc3JjWSArIHkpICogc3JjLndpZHRoICsgc3JjWCkgPDwgMixcbiAgICAgICgoc3JjWSArIHkpICogc3JjLndpZHRoICsgc3JjWCArIHdpZHRoKSA8PCAyXG4gICAgKTtcbiAgfVxufTtcblxuUE5HLnByb3RvdHlwZS5iaXRibHQgPSBmdW5jdGlvbiAoXG4gIGRzdCxcbiAgc3JjWCxcbiAgc3JjWSxcbiAgd2lkdGgsXG4gIGhlaWdodCxcbiAgZGVsdGFYLFxuICBkZWx0YVlcbikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1wYXJhbXNcblxuICBQTkcuYml0Ymx0KHRoaXMsIGRzdCwgc3JjWCwgc3JjWSwgd2lkdGgsIGhlaWdodCwgZGVsdGFYLCBkZWx0YVkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBORy5hZGp1c3RHYW1tYSA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgaWYgKHNyYy5nYW1tYSkge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgc3JjLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHNyYy53aWR0aDsgeCsrKSB7XG4gICAgICAgIGxldCBpZHggPSAoc3JjLndpZHRoICogeSArIHgpIDw8IDI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICBsZXQgc2FtcGxlID0gc3JjLmRhdGFbaWR4ICsgaV0gLyAyNTU7XG4gICAgICAgICAgc2FtcGxlID0gTWF0aC5wb3coc2FtcGxlLCAxIC8gMi4yIC8gc3JjLmdhbW1hKTtcbiAgICAgICAgICBzcmMuZGF0YVtpZHggKyBpXSA9IE1hdGgucm91bmQoc2FtcGxlICogMjU1KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzcmMuZ2FtbWEgPSAwO1xuICB9XG59O1xuXG5QTkcucHJvdG90eXBlLmFkanVzdEdhbW1hID0gZnVuY3Rpb24gKCkge1xuICBQTkcuYWRqdXN0R2FtbWEodGhpcyk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiU3RyZWFtIiwiUGFyc2VyIiwiUGFja2VyIiwiUE5HU3luYyIsIlBORyIsImV4cG9ydHMiLCJvcHRpb25zIiwiY2FsbCIsIndpZHRoIiwiaGVpZ2h0IiwiZGF0YSIsIkJ1ZmZlciIsImFsbG9jIiwiZmlsbCIsImdhbW1hIiwicmVhZGFibGUiLCJ3cml0YWJsZSIsIl9wYXJzZXIiLCJvbiIsImVtaXQiLCJiaW5kIiwiX2hhbmRsZUNsb3NlIiwiX21ldGFkYXRhIiwiX2dhbW1hIiwiX3BhY2tlciIsImluaGVyaXRzIiwic3luYyIsInByb3RvdHlwZSIsInBhY2siLCJsZW5ndGgiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJwYXJzZSIsImNhbGxiYWNrIiwib25QYXJzZWQiLCJvbkVycm9yIiwicGFyc2VkRGF0YSIsInJlbW92ZUxpc3RlbmVyIiwiZXJyIiwib25jZSIsImVuZCIsIndyaXRlIiwibWV0YWRhdGEiLCJiaXRibHQiLCJzcmMiLCJkc3QiLCJzcmNYIiwic3JjWSIsImRlbHRhWCIsImRlbHRhWSIsIkVycm9yIiwieSIsImNvcHkiLCJhZGp1c3RHYW1tYSIsIngiLCJpZHgiLCJpIiwic2FtcGxlIiwiTWF0aCIsInBvdyIsInJvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/png.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/sync-inflate.js":
/*!****************************************************!*\
  !*** ../../node_modules/pngjs/lib/sync-inflate.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nlet assert = (__webpack_require__(/*! assert */ \"assert\").ok);\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet util = __webpack_require__(/*! util */ \"util\");\nlet kMaxLength = (__webpack_require__(/*! buffer */ \"buffer\").kMaxLength);\nfunction Inflate(opts) {\n    if (!(this instanceof Inflate)) {\n        return new Inflate(opts);\n    }\n    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {\n        opts.chunkSize = zlib.Z_MIN_CHUNK;\n    }\n    zlib.Inflate.call(this, opts);\n    // Node 8 --> 9 compatibility check\n    this._offset = this._offset === undefined ? this._outOffset : this._offset;\n    this._buffer = this._buffer || this._outBuffer;\n    if (opts && opts.maxLength != null) {\n        this._maxLength = opts.maxLength;\n    }\n}\nfunction createInflate(opts) {\n    return new Inflate(opts);\n}\nfunction _close(engine, callback) {\n    if (callback) {\n        process.nextTick(callback);\n    }\n    // Caller may invoke .close after a zlib error (which will null _handle).\n    if (!engine._handle) {\n        return;\n    }\n    engine._handle.close();\n    engine._handle = null;\n}\nInflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {\n    if (typeof asyncCb === \"function\") {\n        return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);\n    }\n    let self = this;\n    let availInBefore = chunk && chunk.length;\n    let availOutBefore = this._chunkSize - this._offset;\n    let leftToInflate = this._maxLength;\n    let inOff = 0;\n    let buffers = [];\n    let nread = 0;\n    let error;\n    this.on(\"error\", function(err) {\n        error = err;\n    });\n    function handleChunk(availInAfter, availOutAfter) {\n        if (self._hadError) {\n            return;\n        }\n        let have = availOutBefore - availOutAfter;\n        assert(have >= 0, \"have should not go down\");\n        if (have > 0) {\n            let out = self._buffer.slice(self._offset, self._offset + have);\n            self._offset += have;\n            if (out.length > leftToInflate) {\n                out = out.slice(0, leftToInflate);\n            }\n            buffers.push(out);\n            nread += out.length;\n            leftToInflate -= out.length;\n            if (leftToInflate === 0) {\n                return false;\n            }\n        }\n        if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n            availOutBefore = self._chunkSize;\n            self._offset = 0;\n            self._buffer = Buffer.allocUnsafe(self._chunkSize);\n        }\n        if (availOutAfter === 0) {\n            inOff += availInBefore - availInAfter;\n            availInBefore = availInAfter;\n            return true;\n        }\n        return false;\n    }\n    assert(this._handle, \"zlib binding closed\");\n    let res;\n    do {\n        res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore); // out_len\n        // Node 8 --> 9 compatibility check\n        res = res || this._writeState;\n    }while (!this._hadError && handleChunk(res[0], res[1]));\n    if (this._hadError) {\n        throw error;\n    }\n    if (nread >= kMaxLength) {\n        _close(this);\n        throw new RangeError(\"Cannot create final Buffer. It would be larger than 0x\" + kMaxLength.toString(16) + \" bytes\");\n    }\n    let buf = Buffer.concat(buffers, nread);\n    _close(this);\n    return buf;\n};\nutil.inherits(Inflate, zlib.Inflate);\nfunction zlibBufferSync(engine, buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer);\n    }\n    if (!(buffer instanceof Buffer)) {\n        throw new TypeError(\"Not a string or buffer\");\n    }\n    let flushFlag = engine._finishFlushFlag;\n    if (flushFlag == null) {\n        flushFlag = zlib.Z_FINISH;\n    }\n    return engine._processChunk(buffer, flushFlag);\n}\nfunction inflateSync(buffer, opts) {\n    return zlibBufferSync(new Inflate(opts), buffer);\n}\nmodule.exports = exports = inflateSync;\nexports.Inflate = Inflate;\nexports.createInflate = createInflate;\nexports.inflateSync = inflateSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/sync-inflate.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/pngjs/lib/sync-reader.js":
/*!***************************************************!*\
  !*** ../../node_modules/pngjs/lib/sync-reader.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nlet SyncReader = module.exports = function(buffer) {\n    this._buffer = buffer;\n    this._reads = [];\n};\nSyncReader.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n};\nSyncReader.prototype.process = function() {\n    // as long as there is any data and read requests\n    while(this._reads.length > 0 && this._buffer.length){\n        let read = this._reads[0];\n        if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {\n            // ok there is any data so that we can satisfy this request\n            this._reads.shift(); // == read\n            let buf = this._buffer;\n            this._buffer = buf.slice(read.length);\n            read.func.call(this, buf.slice(0, read.length));\n        } else {\n            break;\n        }\n    }\n    if (this._reads.length > 0) {\n        return new Error(\"There are some read requests waitng on finished stream\");\n    }\n    if (this._buffer.length > 0) {\n        return new Error(\"unrecognised content at end of stream\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGFBQWNDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxNQUFNO0lBQ2pELElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNmLElBQUksQ0FBQ0UsTUFBTSxHQUFHLEVBQUU7QUFDbEI7QUFFQUwsV0FBV00sU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBVUMsTUFBTSxFQUFFQyxRQUFRO0lBQ3BELElBQUksQ0FBQ0osTUFBTSxDQUFDSyxJQUFJLENBQUM7UUFDZkYsUUFBUUcsS0FBS0MsR0FBRyxDQUFDSjtRQUNqQkssV0FBV0wsU0FBUztRQUNwQk0sTUFBTUw7SUFDUjtBQUNGO0FBRUFULFdBQVdNLFNBQVMsQ0FBQ1MsT0FBTyxHQUFHO0lBQzdCLGlEQUFpRDtJQUNqRCxNQUFPLElBQUksQ0FBQ1YsTUFBTSxDQUFDRyxNQUFNLEdBQUcsS0FBSyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFFO1FBQ3BELElBQUlELE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUMsRUFBRTtRQUV6QixJQUNFLElBQUksQ0FBQ0QsT0FBTyxDQUFDSSxNQUFNLElBQ2xCLEtBQUksQ0FBQ0osT0FBTyxDQUFDSSxNQUFNLElBQUlELEtBQUtDLE1BQU0sSUFBSUQsS0FBS00sU0FBUyxHQUNyRDtZQUNBLDJEQUEyRDtZQUMzRCxJQUFJLENBQUNSLE1BQU0sQ0FBQ1csS0FBSyxJQUFJLFVBQVU7WUFFL0IsSUFBSUMsTUFBTSxJQUFJLENBQUNiLE9BQU87WUFFdEIsSUFBSSxDQUFDQSxPQUFPLEdBQUdhLElBQUlDLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTTtZQUVwQ0QsS0FBS08sSUFBSSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFRixJQUFJQyxLQUFLLENBQUMsR0FBR1gsS0FBS0MsTUFBTTtRQUMvQyxPQUFPO1lBQ0w7UUFDRjtJQUNGO0lBRUEsSUFBSSxJQUFJLENBQUNILE1BQU0sQ0FBQ0csTUFBTSxHQUFHLEdBQUc7UUFDMUIsT0FBTyxJQUFJWSxNQUFNO0lBQ25CO0lBRUEsSUFBSSxJQUFJLENBQUNoQixPQUFPLENBQUNJLE1BQU0sR0FBRyxHQUFHO1FBQzNCLE9BQU8sSUFBSVksTUFBTTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvc3luYy1yZWFkZXIuanM/YjcyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IFN5bmNSZWFkZXIgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcbiAgdGhpcy5fcmVhZHMgPSBbXTtcbn0pO1xuXG5TeW5jUmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKGxlbmd0aCwgY2FsbGJhY2spIHtcbiAgdGhpcy5fcmVhZHMucHVzaCh7XG4gICAgbGVuZ3RoOiBNYXRoLmFicyhsZW5ndGgpLCAvLyBpZiBsZW5ndGggPCAwIHRoZW4gYXQgbW9zdCB0aGlzIGxlbmd0aFxuICAgIGFsbG93TGVzczogbGVuZ3RoIDwgMCxcbiAgICBmdW5jOiBjYWxsYmFjayxcbiAgfSk7XG59O1xuXG5TeW5jUmVhZGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAvLyBhcyBsb25nIGFzIHRoZXJlIGlzIGFueSBkYXRhIGFuZCByZWFkIHJlcXVlc3RzXG4gIHdoaWxlICh0aGlzLl9yZWFkcy5sZW5ndGggPiAwICYmIHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcbiAgICBsZXQgcmVhZCA9IHRoaXMuX3JlYWRzWzBdO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fYnVmZmVyLmxlbmd0aCAmJlxuICAgICAgKHRoaXMuX2J1ZmZlci5sZW5ndGggPj0gcmVhZC5sZW5ndGggfHwgcmVhZC5hbGxvd0xlc3MpXG4gICAgKSB7XG4gICAgICAvLyBvayB0aGVyZSBpcyBhbnkgZGF0YSBzbyB0aGF0IHdlIGNhbiBzYXRpc2Z5IHRoaXMgcmVxdWVzdFxuICAgICAgdGhpcy5fcmVhZHMuc2hpZnQoKTsgLy8gPT0gcmVhZFxuXG4gICAgICBsZXQgYnVmID0gdGhpcy5fYnVmZmVyO1xuXG4gICAgICB0aGlzLl9idWZmZXIgPSBidWYuc2xpY2UocmVhZC5sZW5ndGgpO1xuXG4gICAgICByZWFkLmZ1bmMuY2FsbCh0aGlzLCBidWYuc2xpY2UoMCwgcmVhZC5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX3JlYWRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlcmUgYXJlIHNvbWUgcmVhZCByZXF1ZXN0cyB3YWl0bmcgb24gZmluaXNoZWQgc3RyZWFtXCIpO1xuICB9XG5cbiAgaWYgKHRoaXMuX2J1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcInVucmVjb2duaXNlZCBjb250ZW50IGF0IGVuZCBvZiBzdHJlYW1cIik7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiU3luY1JlYWRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWZmZXIiLCJfYnVmZmVyIiwiX3JlYWRzIiwicHJvdG90eXBlIiwicmVhZCIsImxlbmd0aCIsImNhbGxiYWNrIiwicHVzaCIsIk1hdGgiLCJhYnMiLCJhbGxvd0xlc3MiLCJmdW5jIiwicHJvY2VzcyIsInNoaWZ0IiwiYnVmIiwic2xpY2UiLCJjYWxsIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/pngjs/lib/sync-reader.js\n");

/***/ })

};
;