"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-block-tracker";
exports.ids = ["vendor-chunks/eth-block-tracker"];
exports.modules = {

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseBlockTracker = void 0;\nconst safe_event_emitter_1 = __importDefault(__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/../../node_modules/@metamask/safe-event-emitter/index.js\"));\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends safe_event_emitter_1.default {\n    constructor(opts){\n        super();\n        // config\n        this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n        this._usePastBlocks = opts.usePastBlocks || false;\n        // state\n        this._currentBlock = null;\n        this._isRunning = false;\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    async destroy() {\n        this._cancelBlockResetTimeout();\n        await this._maybeEnd();\n        super.removeAllListeners();\n    }\n    isRunning() {\n        return this._isRunning;\n    }\n    getCurrentBlock() {\n        return this._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this._currentBlock) {\n            return this._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>this.once(\"latest\", resolve));\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        // perform default behavior, preserve fn arity\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotence\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"newListener\", this._onNewListener);\n        this.on(\"removeListener\", this._onRemoveListener);\n    }\n    _onNewListener(eventName) {\n        // `newListener` is called *before* the listener is added\n        if (blockTrackerEvents.includes(eventName)) {\n            this._maybeStart();\n        }\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    async _maybeStart() {\n        if (this._isRunning) {\n            return;\n        }\n        this._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        await this._start();\n        this.emit(\"_started\");\n    }\n    async _maybeEnd() {\n        if (!this._isRunning) {\n            return;\n        }\n        this._isRunning = false;\n        this._setupBlockResetTimeout();\n        await this._end();\n        this.emit(\"_ended\");\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _shouldUseNewBlock(newBlock) {\n        const currentBlock = this._currentBlock;\n        if (!currentBlock) {\n            return true;\n        }\n        const newBlockInt = hexToInt(newBlock);\n        const currentBlockInt = hexToInt(currentBlock);\n        return this._usePastBlocks && newBlockInt < currentBlockInt || newBlockInt > currentBlockInt;\n    }\n    _newPotentialLatest(newBlock) {\n        if (!this._shouldUseNewBlock(newBlock)) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this._currentBlock;\n        this._currentBlock = newBlock;\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this._currentBlock = null;\n    }\n}\nexports.BaseBlockTracker = BaseBlockTracker;\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */ function hexToInt(hexInt) {\n    return Number.parseInt(hexInt, 16);\n} //# sourceMappingURL=BaseBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvQmFzZUJsb2NrVHJhY2tlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyx1QkFBdUJSLGdCQUFnQlMsbUJBQU9BLENBQUMsb0dBQThCO0FBQ25GLE1BQU1DLE1BQU07QUFDWixNQUFNQyxlQUFlLENBQUNDLGFBQWFDLGVBQWlCRCxjQUFjQztBQUNsRSxNQUFNQyxxQkFBcUI7SUFBQztJQUFRO0NBQVM7QUFDN0MsTUFBTVAseUJBQXlCQyxxQkFBcUJPLE9BQU87SUFDdkRDLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUs7UUFDTCxTQUFTO1FBQ1QsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR0QsS0FBS0Usa0JBQWtCLElBQUksS0FBS1Q7UUFDM0QsSUFBSSxDQUFDVSxjQUFjLEdBQUdILEtBQUtJLGFBQWEsSUFBSTtRQUM1QyxRQUFRO1FBQ1IsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUNuRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUksQ0FBQ0EsaUJBQWlCLENBQUNELElBQUksQ0FBQyxJQUFJO1FBQ3pELElBQUksQ0FBQ0Usa0JBQWtCLEdBQUcsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQ0YsSUFBSSxDQUFDLElBQUk7UUFDM0QsNkJBQTZCO1FB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QUksQ0FBQ0Qsa0JBQWtCLENBQUNDLFdBQVc7WUFDcEM7UUFDSjtRQUNBLElBQUksQ0FBQ00sZ0JBQWdCLENBQUNOO0lBQzFCO0lBQ0FNLGlCQUFpQk4sUUFBUSxFQUFFO1FBQ3ZCLE1BQU1PLFdBQVcsSUFBSSxDQUFDdkMsYUFBYTtRQUNuQyxJQUFJLENBQUNBLGFBQWEsR0FBR2dDO1FBQ3JCLElBQUksQ0FBQ1AsSUFBSSxDQUFDLFVBQVVPO1FBQ3BCLElBQUksQ0FBQ1AsSUFBSSxDQUFDLFFBQVE7WUFBRWM7WUFBVVA7UUFBUztJQUMzQztJQUNBTiwwQkFBMEI7UUFDdEIsNkJBQTZCO1FBQzdCLElBQUksQ0FBQ2xCLHdCQUF3QjtRQUM3QixnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDZ0Msa0JBQWtCLEdBQUdDLFdBQVcsSUFBSSxDQUFDcEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDVCxtQkFBbUI7UUFDdEYsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDNEMsa0JBQWtCLENBQUNFLEtBQUssRUFBRTtZQUMvQixJQUFJLENBQUNGLGtCQUFrQixDQUFDRSxLQUFLO1FBQ2pDO0lBQ0o7SUFDQWxDLDJCQUEyQjtRQUN2QixJQUFJLElBQUksQ0FBQ2dDLGtCQUFrQixFQUFFO1lBQ3pCRyxhQUFhLElBQUksQ0FBQ0gsa0JBQWtCO1FBQ3hDO0lBQ0o7SUFDQW5DLHFCQUFxQjtRQUNqQixJQUFJLENBQUNMLGFBQWEsR0FBRztJQUN6QjtBQUNKO0FBQ0FqQix3QkFBd0IsR0FBR0U7QUFDM0I7Ozs7OztDQU1DLEdBQ0QsU0FBU2tELFNBQVNTLE1BQU07SUFDcEIsT0FBT0MsT0FBT0MsUUFBUSxDQUFDRixRQUFRO0FBQ25DLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3NhLy4uLy4uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9kaXN0L0Jhc2VCbG9ja1RyYWNrZXIuanM/OWVmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUJsb2NrVHJhY2tlciA9IHZvaWQgMDtcbmNvbnN0IHNhZmVfZXZlbnRfZW1pdHRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyXCIpKTtcbmNvbnN0IHNlYyA9IDEwMDA7XG5jb25zdCBjYWxjdWxhdGVTdW0gPSAoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4gYWNjdW11bGF0b3IgKyBjdXJyZW50VmFsdWU7XG5jb25zdCBibG9ja1RyYWNrZXJFdmVudHMgPSBbJ3N5bmMnLCAnbGF0ZXN0J107XG5jbGFzcyBCYXNlQmxvY2tUcmFja2VyIGV4dGVuZHMgc2FmZV9ldmVudF9lbWl0dGVyXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBjb25maWdcbiAgICAgICAgdGhpcy5fYmxvY2tSZXNldER1cmF0aW9uID0gb3B0cy5ibG9ja1Jlc2V0RHVyYXRpb24gfHwgMjAgKiBzZWM7XG4gICAgICAgIHRoaXMuX3VzZVBhc3RCbG9ja3MgPSBvcHRzLnVzZVBhc3RCbG9ja3MgfHwgZmFsc2U7XG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHRoaXMuX2N1cnJlbnRCbG9jayA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICAvLyBiaW5kIGZ1bmN0aW9ucyBmb3IgaW50ZXJuYWwgdXNlXG4gICAgICAgIHRoaXMuX29uTmV3TGlzdGVuZXIgPSB0aGlzLl9vbk5ld0xpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIgPSB0aGlzLl9vblJlbW92ZUxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3Jlc2V0Q3VycmVudEJsb2NrID0gdGhpcy5fcmVzZXRDdXJyZW50QmxvY2suYmluZCh0aGlzKTtcbiAgICAgICAgLy8gbGlzdGVuIGZvciBoYW5kbGVyIGNoYW5nZXNcbiAgICAgICAgdGhpcy5fc2V0dXBJbnRlcm5hbEV2ZW50cygpO1xuICAgIH1cbiAgICBhc3luYyBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9jYW5jZWxCbG9ja1Jlc2V0VGltZW91dCgpO1xuICAgICAgICBhd2FpdCB0aGlzLl9tYXliZUVuZCgpO1xuICAgICAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG4gICAgaXNSdW5uaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNSdW5uaW5nO1xuICAgIH1cbiAgICBnZXRDdXJyZW50QmxvY2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2s7XG4gICAgfVxuICAgIGFzeW5jIGdldExhdGVzdEJsb2NrKCkge1xuICAgICAgICAvLyByZXR1cm4gaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50QmxvY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2FpdCBmb3IgYSBuZXcgbGF0ZXN0IGJsb2NrXG4gICAgICAgIGNvbnN0IGxhdGVzdEJsb2NrID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRoaXMub25jZSgnbGF0ZXN0JywgcmVzb2x2ZSkpO1xuICAgICAgICAvLyByZXR1cm4gbmV3bHkgc2V0IGN1cnJlbnQgYmxvY2tcbiAgICAgICAgcmV0dXJuIGxhdGVzdEJsb2NrO1xuICAgIH1cbiAgICAvLyBkb250IGFsbG93IG1vZHVsZSBjb25zdW1lciB0byByZW1vdmUgb3VyIGludGVybmFsIGV2ZW50IGxpc3RlbmVyc1xuICAgIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpIHtcbiAgICAgICAgLy8gcGVyZm9ybSBkZWZhdWx0IGJlaGF2aW9yLCBwcmVzZXJ2ZSBmbiBhcml0eVxuICAgICAgICBpZiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlLWFkZCBpbnRlcm5hbCBldmVudHNcbiAgICAgICAgdGhpcy5fc2V0dXBJbnRlcm5hbEV2ZW50cygpO1xuICAgICAgICAvLyB0cmlnZ2VyIHN0b3AgY2hlY2sganVzdCBpbiBjYXNlXG4gICAgICAgIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIF9zZXR1cEludGVybmFsRXZlbnRzKCkge1xuICAgICAgICAvLyBmaXJzdCByZW1vdmUgbGlzdGVuZXJzIGZvciBpZGVtcG90ZW5jZVxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCduZXdMaXN0ZW5lcicsIHRoaXMuX29uTmV3TGlzdGVuZXIpO1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdyZW1vdmVMaXN0ZW5lcicsIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIpO1xuICAgICAgICAvLyB0aGVuIGFkZCB0aGVtXG4gICAgICAgIHRoaXMub24oJ25ld0xpc3RlbmVyJywgdGhpcy5fb25OZXdMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMub24oJ3JlbW92ZUxpc3RlbmVyJywgdGhpcy5fb25SZW1vdmVMaXN0ZW5lcik7XG4gICAgfVxuICAgIF9vbk5ld0xpc3RlbmVyKGV2ZW50TmFtZSkge1xuICAgICAgICAvLyBgbmV3TGlzdGVuZXJgIGlzIGNhbGxlZCAqYmVmb3JlKiB0aGUgbGlzdGVuZXIgaXMgYWRkZWRcbiAgICAgICAgaWYgKGJsb2NrVHJhY2tlckV2ZW50cy5pbmNsdWRlcyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXliZVN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uUmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICAgIC8vIGByZW1vdmVMaXN0ZW5lcmAgaXMgY2FsbGVkICphZnRlciogdGhlIGxpc3RlbmVyIGlzIHJlbW92ZWRcbiAgICAgICAgaWYgKHRoaXMuX2dldEJsb2NrVHJhY2tlckV2ZW50Q291bnQoKSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXliZUVuZCgpO1xuICAgIH1cbiAgICBhc3luYyBfbWF5YmVTdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgIC8vIGNhbmNlbCBzZXR0aW5nIGxhdGVzdCBibG9jayB0byBzdGFsZVxuICAgICAgICB0aGlzLl9jYW5jZWxCbG9ja1Jlc2V0VGltZW91dCgpO1xuICAgICAgICBhd2FpdCB0aGlzLl9zdGFydCgpO1xuICAgICAgICB0aGlzLmVtaXQoJ19zdGFydGVkJyk7XG4gICAgfVxuICAgIGFzeW5jIF9tYXliZUVuZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2V0dXBCbG9ja1Jlc2V0VGltZW91dCgpO1xuICAgICAgICBhd2FpdCB0aGlzLl9lbmQoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdfZW5kZWQnKTtcbiAgICB9XG4gICAgX2dldEJsb2NrVHJhY2tlckV2ZW50Q291bnQoKSB7XG4gICAgICAgIHJldHVybiBibG9ja1RyYWNrZXJFdmVudHNcbiAgICAgICAgICAgIC5tYXAoKGV2ZW50TmFtZSkgPT4gdGhpcy5saXN0ZW5lckNvdW50KGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAucmVkdWNlKGNhbGN1bGF0ZVN1bSk7XG4gICAgfVxuICAgIF9zaG91bGRVc2VOZXdCbG9jayhuZXdCbG9jaykge1xuICAgICAgICBjb25zdCBjdXJyZW50QmxvY2sgPSB0aGlzLl9jdXJyZW50QmxvY2s7XG4gICAgICAgIGlmICghY3VycmVudEJsb2NrKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdCbG9ja0ludCA9IGhleFRvSW50KG5ld0Jsb2NrKTtcbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrSW50ID0gaGV4VG9JbnQoY3VycmVudEJsb2NrKTtcbiAgICAgICAgcmV0dXJuICgodGhpcy5fdXNlUGFzdEJsb2NrcyAmJiBuZXdCbG9ja0ludCA8IGN1cnJlbnRCbG9ja0ludCkgfHxcbiAgICAgICAgICAgIG5ld0Jsb2NrSW50ID4gY3VycmVudEJsb2NrSW50KTtcbiAgICB9XG4gICAgX25ld1BvdGVudGlhbExhdGVzdChuZXdCbG9jaykge1xuICAgICAgICBpZiAoIXRoaXMuX3Nob3VsZFVzZU5ld0Jsb2NrKG5ld0Jsb2NrKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldEN1cnJlbnRCbG9jayhuZXdCbG9jayk7XG4gICAgfVxuICAgIF9zZXRDdXJyZW50QmxvY2sobmV3QmxvY2spIHtcbiAgICAgICAgY29uc3Qgb2xkQmxvY2sgPSB0aGlzLl9jdXJyZW50QmxvY2s7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRCbG9jayA9IG5ld0Jsb2NrO1xuICAgICAgICB0aGlzLmVtaXQoJ2xhdGVzdCcsIG5ld0Jsb2NrKTtcbiAgICAgICAgdGhpcy5lbWl0KCdzeW5jJywgeyBvbGRCbG9jaywgbmV3QmxvY2sgfSk7XG4gICAgfVxuICAgIF9zZXR1cEJsb2NrUmVzZXRUaW1lb3V0KCkge1xuICAgICAgICAvLyBjbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxuICAgICAgICB0aGlzLl9jYW5jZWxCbG9ja1Jlc2V0VGltZW91dCgpO1xuICAgICAgICAvLyBjbGVhciBsYXRlc3QgYmxvY2sgd2hlbiBzdGFsZVxuICAgICAgICB0aGlzLl9ibG9ja1Jlc2V0VGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fcmVzZXRDdXJyZW50QmxvY2ssIHRoaXMuX2Jsb2NrUmVzZXREdXJhdGlvbik7XG4gICAgICAgIC8vIG5vZGVqcyAtIGRvbnQgaG9sZCBwcm9jZXNzIG9wZW5cbiAgICAgICAgaWYgKHRoaXMuX2Jsb2NrUmVzZXRUaW1lb3V0LnVucmVmKSB7XG4gICAgICAgICAgICB0aGlzLl9ibG9ja1Jlc2V0VGltZW91dC51bnJlZigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jYW5jZWxCbG9ja1Jlc2V0VGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Jsb2NrUmVzZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYmxvY2tSZXNldFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZXNldEN1cnJlbnRCbG9jaygpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudEJsb2NrID0gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VCbG9ja1RyYWNrZXIgPSBCYXNlQmxvY2tUcmFja2VyO1xuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBpbiBoZXhhZGVjaW1hbCBmb3JtYXQgaW50byBhIG5hdGl2ZVxuICogbnVtYmVyLlxuICpcbiAqIEBwYXJhbSBoZXhJbnQgLSBUaGUgaGV4IHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGhleFRvSW50KGhleEludCkge1xuICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQoaGV4SW50LCAxNik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlQmxvY2tUcmFja2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJCYXNlQmxvY2tUcmFja2VyIiwic2FmZV9ldmVudF9lbWl0dGVyXzEiLCJyZXF1aXJlIiwic2VjIiwiY2FsY3VsYXRlU3VtIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50VmFsdWUiLCJibG9ja1RyYWNrZXJFdmVudHMiLCJkZWZhdWx0IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiX2Jsb2NrUmVzZXREdXJhdGlvbiIsImJsb2NrUmVzZXREdXJhdGlvbiIsIl91c2VQYXN0QmxvY2tzIiwidXNlUGFzdEJsb2NrcyIsIl9jdXJyZW50QmxvY2siLCJfaXNSdW5uaW5nIiwiX29uTmV3TGlzdGVuZXIiLCJiaW5kIiwiX29uUmVtb3ZlTGlzdGVuZXIiLCJfcmVzZXRDdXJyZW50QmxvY2siLCJfc2V0dXBJbnRlcm5hbEV2ZW50cyIsImRlc3Ryb3kiLCJfY2FuY2VsQmxvY2tSZXNldFRpbWVvdXQiLCJfbWF5YmVFbmQiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJpc1J1bm5pbmciLCJnZXRDdXJyZW50QmxvY2siLCJnZXRMYXRlc3RCbG9jayIsImxhdGVzdEJsb2NrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbmNlIiwiZXZlbnROYW1lIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImluY2x1ZGVzIiwiX21heWJlU3RhcnQiLCJfZ2V0QmxvY2tUcmFja2VyRXZlbnRDb3VudCIsIl9zdGFydCIsImVtaXQiLCJfc2V0dXBCbG9ja1Jlc2V0VGltZW91dCIsIl9lbmQiLCJtYXAiLCJsaXN0ZW5lckNvdW50IiwicmVkdWNlIiwiX3Nob3VsZFVzZU5ld0Jsb2NrIiwibmV3QmxvY2siLCJjdXJyZW50QmxvY2siLCJuZXdCbG9ja0ludCIsImhleFRvSW50IiwiY3VycmVudEJsb2NrSW50IiwiX25ld1BvdGVudGlhbExhdGVzdCIsIl9zZXRDdXJyZW50QmxvY2siLCJvbGRCbG9jayIsIl9ibG9ja1Jlc2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJ1bnJlZiIsImNsZWFyVGltZW91dCIsImhleEludCIsIk51bWJlciIsInBhcnNlSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js":
/*!************************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/../../node_modules/json-rpc-random-id/index.js\"));\nconst pify_1 = __importDefault(__webpack_require__(/*! pify */ \"(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst logging_utils_1 = __webpack_require__(/*! ./logging-utils */ \"(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, \"polling-block-tracker\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        var _a;\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"PollingBlockTracker - no provider specified.\");\n        }\n        super(Object.assign(Object.assign({}, opts), {\n            blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval\n        }));\n        // config\n        this._provider = opts.provider;\n        this._pollingInterval = opts.pollingInterval || 20 * sec;\n        this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n        this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n        this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    }\n    // trigger block polling\n    async checkForLatestBlock() {\n        await this._updateLatestBlock();\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        this._synchronize();\n    }\n    async _end() {\n    // No-op\n    }\n    async _synchronize() {\n        var _a;\n        while(this._isRunning){\n            try {\n                await this._updateLatestBlock();\n                const promise = timeout(this._pollingInterval, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            } catch (err) {\n                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${(_a = err.stack) !== null && _a !== void 0 ? _a : err}`);\n                try {\n                    this.emit(\"error\", newErr);\n                } catch (emitErr) {\n                    console.error(newErr);\n                }\n                const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            }\n        }\n    }\n    async _updateLatestBlock() {\n        // fetch + set latest block\n        const latestBlock = await this._fetchLatestBlock();\n        this._newPotentialLatest(latestBlock);\n    }\n    async _fetchLatestBlock() {\n        const req = {\n            jsonrpc: \"2.0\",\n            id: createRandomId(),\n            method: \"eth_blockNumber\",\n            params: []\n        };\n        if (this._setSkipCacheFlag) {\n            req.skipCache = true;\n        }\n        log(\"Making request\", req);\n        const res = await (0, pify_1.default)((cb)=>this._provider.sendAsync(req, cb))();\n        log(\"Got response\", res);\n        if (res.error) {\n            throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`);\n        }\n        return res.result;\n    }\n}\nexports.PollingBlockTracker = PollingBlockTracker;\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */ function timeout(duration, unref) {\n    return new Promise((resolve)=>{\n        const timeoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timeoutRef.unref && unref) {\n            timeoutRef.unref();\n        }\n    });\n} //# sourceMappingURL=PollingBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SubscribeBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/../../node_modules/json-rpc-random-id/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nclass SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"SubscribeBlockTracker - no provider specified.\");\n        }\n        // BaseBlockTracker constructor\n        super(opts);\n        // config\n        this._provider = opts.provider;\n        this._subscriptionId = null;\n    }\n    async checkForLatestBlock() {\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        if (this._subscriptionId === undefined || this._subscriptionId === null) {\n            try {\n                const blockNumber = await this._call(\"eth_blockNumber\");\n                this._subscriptionId = await this._call(\"eth_subscribe\", \"newHeads\");\n                this._provider.on(\"data\", this._handleSubData.bind(this));\n                this._newPotentialLatest(blockNumber);\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    async _end() {\n        if (this._subscriptionId !== null && this._subscriptionId !== undefined) {\n            try {\n                await this._call(\"eth_unsubscribe\", this._subscriptionId);\n                this._subscriptionId = null;\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    _call(method, ...params) {\n        return new Promise((resolve, reject)=>{\n            this._provider.sendAsync({\n                id: createRandomId(),\n                method,\n                params,\n                jsonrpc: \"2.0\"\n            }, (err, res)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(res.result);\n                }\n            });\n        });\n    }\n    _handleSubData(_, response) {\n        var _a;\n        if (response.method === \"eth_subscription\" && ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {\n            this._newPotentialLatest(response.params.result.number);\n        }\n    }\n}\nexports.SubscribeBlockTracker = SubscribeBlockTracker; //# sourceMappingURL=SubscribeBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvU3Vic2NyaWJlQmxvY2tUcmFja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLE1BQU1HLHVCQUF1QlIsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxnRkFBb0I7QUFDekUsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQywrRkFBb0I7QUFDdkQsTUFBTUUsaUJBQWlCLENBQUMsR0FBR0gscUJBQXFCSSxPQUFPO0FBQ3ZELE1BQU1MLDhCQUE4QkcsbUJBQW1CRyxnQkFBZ0I7SUFDbkVDLFlBQVlDLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDbkIsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQ0EsS0FBS0MsUUFBUSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLCtCQUErQjtRQUMvQixLQUFLLENBQUNGO1FBQ04sU0FBUztRQUNULElBQUksQ0FBQ0csU0FBUyxHQUFHSCxLQUFLQyxRQUFRO1FBQzlCLElBQUksQ0FBQ0csZUFBZSxHQUFHO0lBQzNCO0lBQ0EsTUFBTUMsc0JBQXNCO1FBQ3hCLE9BQU8sTUFBTSxJQUFJLENBQUNDLGNBQWM7SUFDcEM7SUFDQSxNQUFNQyxTQUFTO1FBQ1gsSUFBSSxJQUFJLENBQUNILGVBQWUsS0FBS0ksYUFBYSxJQUFJLENBQUNKLGVBQWUsS0FBSyxNQUFNO1lBQ3JFLElBQUk7Z0JBQ0EsTUFBTUssY0FBZSxNQUFNLElBQUksQ0FBQ0MsS0FBSyxDQUFDO2dCQUN0QyxJQUFJLENBQUNOLGVBQWUsR0FBSSxNQUFNLElBQUksQ0FBQ00sS0FBSyxDQUFDLGlCQUFpQjtnQkFDMUQsSUFBSSxDQUFDUCxTQUFTLENBQUNRLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSTtnQkFDdkQsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0w7WUFDN0IsRUFDQSxPQUFPTSxHQUFHO2dCQUNOLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVNEO1lBQ3ZCO1FBQ0o7SUFDSjtJQUNBLE1BQU1FLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQ2IsZUFBZSxLQUFLLFFBQVEsSUFBSSxDQUFDQSxlQUFlLEtBQUtJLFdBQVc7WUFDckUsSUFBSTtnQkFDQSxNQUFNLElBQUksQ0FBQ0UsS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUNOLGVBQWU7Z0JBQ3hELElBQUksQ0FBQ0EsZUFBZSxHQUFHO1lBQzNCLEVBQ0EsT0FBT1csR0FBRztnQkFDTixJQUFJLENBQUNDLElBQUksQ0FBQyxTQUFTRDtZQUN2QjtRQUNKO0lBQ0o7SUFDQUwsTUFBTVEsTUFBTSxFQUFFLEdBQUdDLE1BQU0sRUFBRTtRQUNyQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDekIsSUFBSSxDQUFDbkIsU0FBUyxDQUFDb0IsU0FBUyxDQUFDO2dCQUNyQkMsSUFBSTVCO2dCQUNKc0I7Z0JBQ0FDO2dCQUNBTSxTQUFTO1lBQ2IsR0FBRyxDQUFDQyxLQUFLQztnQkFDTCxJQUFJRCxLQUFLO29CQUNMSixPQUFPSTtnQkFDWCxPQUNLO29CQUNETCxRQUFRTSxJQUFJQyxNQUFNO2dCQUN0QjtZQUNKO1FBQ0o7SUFDSjtJQUNBaEIsZUFBZWlCLENBQUMsRUFBRUMsUUFBUSxFQUFFO1FBQ3hCLElBQUlDO1FBQ0osSUFBSUQsU0FBU1osTUFBTSxLQUFLLHNCQUNwQixDQUFDLENBQUNhLEtBQUtELFNBQVNYLE1BQU0sTUFBTSxRQUFRWSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLFlBQVksTUFBTSxJQUFJLENBQUM1QixlQUFlLEVBQUU7WUFDeEcsSUFBSSxDQUFDVSxtQkFBbUIsQ0FBQ2dCLFNBQVNYLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDSyxNQUFNO1FBQzFEO0lBQ0o7QUFDSjtBQUNBM0MsNkJBQTZCLEdBQUdFLHVCQUNoQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc2EvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvU3Vic2NyaWJlQmxvY2tUcmFja2VyLmpzP2Q3ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN1YnNjcmliZUJsb2NrVHJhY2tlciA9IHZvaWQgMDtcbmNvbnN0IGpzb25fcnBjX3JhbmRvbV9pZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJqc29uLXJwYy1yYW5kb20taWRcIikpO1xuY29uc3QgQmFzZUJsb2NrVHJhY2tlcl8xID0gcmVxdWlyZShcIi4vQmFzZUJsb2NrVHJhY2tlclwiKTtcbmNvbnN0IGNyZWF0ZVJhbmRvbUlkID0gKDAsIGpzb25fcnBjX3JhbmRvbV9pZF8xLmRlZmF1bHQpKCk7XG5jbGFzcyBTdWJzY3JpYmVCbG9ja1RyYWNrZXIgZXh0ZW5kcyBCYXNlQmxvY2tUcmFja2VyXzEuQmFzZUJsb2NrVHJhY2tlciB7XG4gICAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgICAgIC8vIHBhcnNlICsgdmFsaWRhdGUgYXJnc1xuICAgICAgICBpZiAoIW9wdHMucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3Vic2NyaWJlQmxvY2tUcmFja2VyIC0gbm8gcHJvdmlkZXIgc3BlY2lmaWVkLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJhc2VCbG9ja1RyYWNrZXIgY29uc3RydWN0b3JcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIC8vIGNvbmZpZ1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IG9wdHMucHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbklkID0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgY2hlY2tGb3JMYXRlc3RCbG9jaygpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TGF0ZXN0QmxvY2soKTtcbiAgICB9XG4gICAgYXN5bmMgX3N0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uSWQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9zdWJzY3JpcHRpb25JZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBibG9ja051bWJlciA9IChhd2FpdCB0aGlzLl9jYWxsKCdldGhfYmxvY2tOdW1iZXInKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uSWQgPSAoYXdhaXQgdGhpcy5fY2FsbCgnZXRoX3N1YnNjcmliZScsICduZXdIZWFkcycpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm92aWRlci5vbignZGF0YScsIHRoaXMuX2hhbmRsZVN1YkRhdGEuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmV3UG90ZW50aWFsTGF0ZXN0KGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9lbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25JZCAhPT0gbnVsbCAmJiB0aGlzLl9zdWJzY3JpcHRpb25JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NhbGwoJ2V0aF91bnN1YnNjcmliZScsIHRoaXMuX3N1YnNjcmlwdGlvbklkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25JZCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2FsbChtZXRob2QsIC4uLnBhcmFtcykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcHJvdmlkZXIuc2VuZEFzeW5jKHtcbiAgICAgICAgICAgICAgICBpZDogY3JlYXRlUmFuZG9tSWQoKSxcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgfSwgKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaGFuZGxlU3ViRGF0YShfLCByZXNwb25zZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChyZXNwb25zZS5tZXRob2QgPT09ICdldGhfc3Vic2NyaXB0aW9uJyAmJlxuICAgICAgICAgICAgKChfYSA9IHJlc3BvbnNlLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmlwdGlvbikgPT09IHRoaXMuX3N1YnNjcmlwdGlvbklkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXdQb3RlbnRpYWxMYXRlc3QocmVzcG9uc2UucGFyYW1zLnJlc3VsdC5udW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TdWJzY3JpYmVCbG9ja1RyYWNrZXIgPSBTdWJzY3JpYmVCbG9ja1RyYWNrZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVCbG9ja1RyYWNrZXIuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN1YnNjcmliZUJsb2NrVHJhY2tlciIsImpzb25fcnBjX3JhbmRvbV9pZF8xIiwicmVxdWlyZSIsIkJhc2VCbG9ja1RyYWNrZXJfMSIsImNyZWF0ZVJhbmRvbUlkIiwiZGVmYXVsdCIsIkJhc2VCbG9ja1RyYWNrZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJwcm92aWRlciIsIkVycm9yIiwiX3Byb3ZpZGVyIiwiX3N1YnNjcmlwdGlvbklkIiwiY2hlY2tGb3JMYXRlc3RCbG9jayIsImdldExhdGVzdEJsb2NrIiwiX3N0YXJ0IiwidW5kZWZpbmVkIiwiYmxvY2tOdW1iZXIiLCJfY2FsbCIsIm9uIiwiX2hhbmRsZVN1YkRhdGEiLCJiaW5kIiwiX25ld1BvdGVudGlhbExhdGVzdCIsImUiLCJlbWl0IiwiX2VuZCIsIm1ldGhvZCIsInBhcmFtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2VuZEFzeW5jIiwiaWQiLCJqc29ucnBjIiwiZXJyIiwicmVzIiwicmVzdWx0IiwiXyIsInJlc3BvbnNlIiwiX2EiLCJzdWJzY3JpcHRpb24iLCJudW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./PollingBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js\"), exports);\n__exportStar(__webpack_require__(/*! ./SubscribeBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHFHQUF1QixHQUFHTjtBQUMvQ0QsYUFBYU8sbUJBQU9BLENBQUMseUdBQXlCLEdBQUdOLFVBQ2pELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NzYS8uLi8uLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9pbmRleC5qcz9jNWE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUG9sbGluZ0Jsb2NrVHJhY2tlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU3Vic2NyaWJlQmxvY2tUcmFja2VyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js":
/*!******************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/logging-utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"(ssr)/../../node_modules/@metamask/utils/dist/index.js\");\nObject.defineProperty(exports, \"createModuleLogger\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.createModuleLogger;\n    }\n}));\nexports.projectLogger = (0, utils_1.createProjectLogger)(\"eth-block-tracker\"); //# sourceMappingURL=logging-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvbG9nZ2luZy11dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDMUQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsK0VBQWlCO0FBQ3pDUCxzREFBcUQ7SUFBRVEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsUUFBUUYsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbklGLHFCQUFxQixHQUFHLENBQUMsR0FBR0ksUUFBUUksbUJBQW1CLEVBQUUsc0JBQ3pELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NzYS8uLi8uLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9sb2dnaW5nLXV0aWxzLmpzPzVkYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZU1vZHVsZUxvZ2dlciA9IGV4cG9ydHMucHJvamVjdExvZ2dlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG1ldGFtYXNrL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlTW9kdWxlTG9nZ2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmNyZWF0ZU1vZHVsZUxvZ2dlcjsgfSB9KTtcbmV4cG9ydHMucHJvamVjdExvZ2dlciA9ICgwLCB1dGlsc18xLmNyZWF0ZVByb2plY3RMb2dnZXIpKCdldGgtYmxvY2stdHJhY2tlcicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVNb2R1bGVMb2dnZXIiLCJwcm9qZWN0TG9nZ2VyIiwidXRpbHNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY3JlYXRlUHJvamVjdExvZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/node_modules/pify/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nconst processFn = (fn, opts)=>function() {\n        const P = opts.promiseModule;\n        const args = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; i++){\n            args[i] = arguments[i];\n        }\n        return new P((resolve, reject)=>{\n            if (opts.errorFirst) {\n                args.push(function(err, result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 1; i < arguments.length; i++){\n                            results[i - 1] = arguments[i];\n                        }\n                        if (err) {\n                            results.unshift(err);\n                            reject(results);\n                        } else {\n                            resolve(results);\n                        }\n                    } else if (err) {\n                        reject(err);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else {\n                args.push(function(result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 0; i < arguments.length; i++){\n                            results[i] = arguments[i];\n                        }\n                        resolve(results);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            }\n            fn.apply(this, args);\n        });\n    };\nmodule.exports = (obj, opts)=>{\n    opts = Object.assign({\n        exclude: [\n            /.+(Sync|Stream)$/\n        ],\n        errorFirst: true,\n        promiseModule: Promise\n    }, opts);\n    const filter = (key)=>{\n        const match = (pattern)=>typeof pattern === \"string\" ? key === pattern : pattern.test(key);\n        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n    };\n    let ret;\n    if (typeof obj === \"function\") {\n        ret = function() {\n            if (opts.excludeMain) {\n                return obj.apply(this, arguments);\n            }\n            return processFn(obj, opts).apply(this, arguments);\n        };\n    } else {\n        ret = Object.create(Object.getPrototypeOf(obj));\n    }\n    for(const key in obj){\n        const x = obj[key];\n        ret[key] = typeof x === \"function\" && filter(key) ? processFn(x, opts) : x;\n    }\n    return ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL25vZGVfbW9kdWxlcy9waWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsWUFBWSxDQUFDQyxJQUFJQyxPQUFTO1FBQy9CLE1BQU1DLElBQUlELEtBQUtFLGFBQWE7UUFDNUIsTUFBTUMsT0FBTyxJQUFJQyxNQUFNQyxVQUFVQyxNQUFNO1FBRXZDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixVQUFVQyxNQUFNLEVBQUVDLElBQUs7WUFDMUNKLElBQUksQ0FBQ0ksRUFBRSxHQUFHRixTQUFTLENBQUNFLEVBQUU7UUFDdkI7UUFFQSxPQUFPLElBQUlOLEVBQUUsQ0FBQ08sU0FBU0M7WUFDdEIsSUFBSVQsS0FBS1UsVUFBVSxFQUFFO2dCQUNwQlAsS0FBS1EsSUFBSSxDQUFDLFNBQVVDLEdBQUcsRUFBRUMsTUFBTTtvQkFDOUIsSUFBSWIsS0FBS2MsU0FBUyxFQUFFO3dCQUNuQixNQUFNQyxVQUFVLElBQUlYLE1BQU1DLFVBQVVDLE1BQU0sR0FBRzt3QkFFN0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVDLE1BQU0sRUFBRUMsSUFBSzs0QkFDMUNRLE9BQU8sQ0FBQ1IsSUFBSSxFQUFFLEdBQUdGLFNBQVMsQ0FBQ0UsRUFBRTt3QkFDOUI7d0JBRUEsSUFBSUssS0FBSzs0QkFDUkcsUUFBUUMsT0FBTyxDQUFDSjs0QkFDaEJILE9BQU9NO3dCQUNSLE9BQU87NEJBQ05QLFFBQVFPO3dCQUNUO29CQUNELE9BQU8sSUFBSUgsS0FBSzt3QkFDZkgsT0FBT0c7b0JBQ1IsT0FBTzt3QkFDTkosUUFBUUs7b0JBQ1Q7Z0JBQ0Q7WUFDRCxPQUFPO2dCQUNOVixLQUFLUSxJQUFJLENBQUMsU0FBVUUsTUFBTTtvQkFDekIsSUFBSWIsS0FBS2MsU0FBUyxFQUFFO3dCQUNuQixNQUFNQyxVQUFVLElBQUlYLE1BQU1DLFVBQVVDLE1BQU0sR0FBRzt3QkFFN0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVDLE1BQU0sRUFBRUMsSUFBSzs0QkFDMUNRLE9BQU8sQ0FBQ1IsRUFBRSxHQUFHRixTQUFTLENBQUNFLEVBQUU7d0JBQzFCO3dCQUVBQyxRQUFRTztvQkFDVCxPQUFPO3dCQUNOUCxRQUFRSztvQkFDVDtnQkFDRDtZQUNEO1lBRUFkLEdBQUdrQixLQUFLLENBQUMsSUFBSSxFQUFFZDtRQUNoQjtJQUNEO0FBRUFlLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxLQUFLcEI7SUFDdEJBLE9BQU9xQixPQUFPQyxNQUFNLENBQUM7UUFDcEJDLFNBQVM7WUFBQztTQUFtQjtRQUM3QmIsWUFBWTtRQUNaUixlQUFlc0I7SUFDaEIsR0FBR3hCO0lBRUgsTUFBTXlCLFNBQVNDLENBQUFBO1FBQ2QsTUFBTUMsUUFBUUMsQ0FBQUEsVUFBVyxPQUFPQSxZQUFZLFdBQVdGLFFBQVFFLFVBQVVBLFFBQVFDLElBQUksQ0FBQ0g7UUFDdEYsT0FBTzFCLEtBQUs4QixPQUFPLEdBQUc5QixLQUFLOEIsT0FBTyxDQUFDQyxJQUFJLENBQUNKLFNBQVMsQ0FBQzNCLEtBQUt1QixPQUFPLENBQUNRLElBQUksQ0FBQ0o7SUFDckU7SUFFQSxJQUFJSztJQUNKLElBQUksT0FBT1osUUFBUSxZQUFZO1FBQzlCWSxNQUFNO1lBQ0wsSUFBSWhDLEtBQUtpQyxXQUFXLEVBQUU7Z0JBQ3JCLE9BQU9iLElBQUlILEtBQUssQ0FBQyxJQUFJLEVBQUVaO1lBQ3hCO1lBRUEsT0FBT1AsVUFBVXNCLEtBQUtwQixNQUFNaUIsS0FBSyxDQUFDLElBQUksRUFBRVo7UUFDekM7SUFDRCxPQUFPO1FBQ04yQixNQUFNWCxPQUFPYSxNQUFNLENBQUNiLE9BQU9jLGNBQWMsQ0FBQ2Y7SUFDM0M7SUFFQSxJQUFLLE1BQU1NLE9BQU9OLElBQUs7UUFDdEIsTUFBTWdCLElBQUloQixHQUFHLENBQUNNLElBQUk7UUFDbEJNLEdBQUcsQ0FBQ04sSUFBSSxHQUFHLE9BQU9VLE1BQU0sY0FBY1gsT0FBT0MsT0FBTzVCLFVBQVVzQyxHQUFHcEMsUUFBUW9DO0lBQzFFO0lBRUEsT0FBT0o7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2NzYS8uLi8uLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3BpZnkvaW5kZXguanM/MGU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByb2Nlc3NGbiA9IChmbiwgb3B0cykgPT4gZnVuY3Rpb24gKCkge1xuXHRjb25zdCBQID0gb3B0cy5wcm9taXNlTW9kdWxlO1xuXHRjb25zdCBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0fVxuXG5cdHJldHVybiBuZXcgUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0aWYgKG9wdHMuZXJyb3JGaXJzdCkge1xuXHRcdFx0YXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuXHRcdFx0XHRpZiAob3B0cy5tdWx0aUFyZ3MpIHtcblx0XHRcdFx0XHRjb25zdCByZXN1bHRzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzLnVuc2hpZnQoZXJyKTtcblx0XHRcdFx0XHRcdHJlamVjdChyZXN1bHRzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXJyKSB7XG5cdFx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXJncy5wdXNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdFx0aWYgKG9wdHMubXVsdGlBcmdzKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0cyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG5cblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0cmVzdWx0c1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdHMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Zm4uYXBwbHkodGhpcywgYXJncyk7XG5cdH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAob2JqLCBvcHRzKSA9PiB7XG5cdG9wdHMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRleGNsdWRlOiBbLy4rKFN5bmN8U3RyZWFtKSQvXSxcblx0XHRlcnJvckZpcnN0OiB0cnVlLFxuXHRcdHByb21pc2VNb2R1bGU6IFByb21pc2Vcblx0fSwgb3B0cyk7XG5cblx0Y29uc3QgZmlsdGVyID0ga2V5ID0+IHtcblx0XHRjb25zdCBtYXRjaCA9IHBhdHRlcm4gPT4gdHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnID8ga2V5ID09PSBwYXR0ZXJuIDogcGF0dGVybi50ZXN0KGtleSk7XG5cdFx0cmV0dXJuIG9wdHMuaW5jbHVkZSA/IG9wdHMuaW5jbHVkZS5zb21lKG1hdGNoKSA6ICFvcHRzLmV4Y2x1ZGUuc29tZShtYXRjaCk7XG5cdH07XG5cblx0bGV0IHJldDtcblx0aWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAob3B0cy5leGNsdWRlTWFpbikge1xuXHRcdFx0XHRyZXR1cm4gb2JqLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9jZXNzRm4ob2JqLCBvcHRzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSk7XG5cdH1cblxuXHRmb3IgKGNvbnN0IGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cblx0XHRjb25zdCB4ID0gb2JqW2tleV07XG5cdFx0cmV0W2tleV0gPSB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyAmJiBmaWx0ZXIoa2V5KSA/IHByb2Nlc3NGbih4LCBvcHRzKSA6IHg7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcbiJdLCJuYW1lcyI6WyJwcm9jZXNzRm4iLCJmbiIsIm9wdHMiLCJQIiwicHJvbWlzZU1vZHVsZSIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImkiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JGaXJzdCIsInB1c2giLCJlcnIiLCJyZXN1bHQiLCJtdWx0aUFyZ3MiLCJyZXN1bHRzIiwidW5zaGlmdCIsImFwcGx5IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iaiIsIk9iamVjdCIsImFzc2lnbiIsImV4Y2x1ZGUiLCJQcm9taXNlIiwiZmlsdGVyIiwia2V5IiwibWF0Y2giLCJwYXR0ZXJuIiwidGVzdCIsImluY2x1ZGUiLCJzb21lIiwicmV0IiwiZXhjbHVkZU1haW4iLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIngiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js\n");

/***/ })

};
;