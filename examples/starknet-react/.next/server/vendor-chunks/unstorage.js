"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unstorage";
exports.ids = ["vendor-chunks/unstorage"];
exports.modules = {

/***/ "(ssr)/../../node_modules/unstorage/dist/index.mjs":
/*!***************************************************!*\
  !*** ../../node_modules/unstorage/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(ssr)/../../node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.8581f561.mjs */ \"(ssr)/../../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        options: {},\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            return data.get(key) ?? null;\n        },\n        getItemRaw (key) {\n            return data.get(key) ?? null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return Array.from(data.keys());\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage(options = {}) {\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items, commonOptions) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value));\n        },\n        async setItem (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value, opts = {}) {\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key, opts = {}) {\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base, opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            for (const mount of mounts){\n                const rawKeys = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                const keys = rawKeys.map((key)=>mount.mountpoint + (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key)).filter((key)=>!maskedMounts.some((p)=>key.startsWith(p)));\n                allKeys.push(...keys);\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            return base ? allKeys.filter((key)=>key.startsWith(base) && !key.endsWith(\"$\")) : allKeys.filter((key)=>!key.endsWith(\"$\"));\n        },\n        // Utils\n        async clear (base, opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(`already mounted at ${base}`);\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base, _dispose = true) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount (key = \"\") {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts (base = \"\", opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        }\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    azureAppConfiguration: \"unstorage/drivers/azure-app-configuration\",\n    azureCosmos: \"unstorage/drivers/azure-cosmos\",\n    azureKeyVault: \"unstorage/drivers/azure-key-vault\",\n    azureStorageBlob: \"unstorage/drivers/azure-storage-blob\",\n    azureStorageTable: \"unstorage/drivers/azure-storage-table\",\n    cloudflareKVBinding: \"unstorage/drivers/cloudflare-kv-binding\",\n    cloudflareKVHTTP: \"unstorage/drivers/cloudflare-kv-http\",\n    cloudflareR2Binding: \"unstorage/drivers/cloudflare-r2-binding\",\n    fs: \"unstorage/drivers/fs\",\n    fsLite: \"unstorage/drivers/fs-lite\",\n    github: \"unstorage/drivers/github\",\n    http: \"unstorage/drivers/http\",\n    indexedb: \"unstorage/drivers/indexedb\",\n    localStorage: \"unstorage/drivers/localstorage\",\n    lruCache: \"unstorage/drivers/lru-cache\",\n    memory: \"unstorage/drivers/memory\",\n    mongodb: \"unstorage/drivers/mongodb\",\n    netlifyBlobs: \"unstorage/drivers/netlify-blobs\",\n    overlay: \"unstorage/drivers/overlay\",\n    planetscale: \"unstorage/drivers/planetscale\",\n    redis: \"unstorage/drivers/redis\",\n    sessionStorage: \"unstorage/drivers/session-storage\",\n    vercelKV: \"unstorage/drivers/vercel-kv\",\n    /** @deprecated */ \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    /** @deprecated */ \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Vuc3RvcmFnZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUEwQjtBQUN3SjtBQUM3RztBQUVyRSxTQUFTaUIsYUFBYUMsT0FBTztJQUMzQixPQUFPQTtBQUNUO0FBRUEsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxTQUFTSCxhQUFhO0lBQzFCLE1BQU1JLE9BQU8sYUFBYSxHQUFHLElBQUlDO0lBQ2pDLE9BQU87UUFDTEMsTUFBTUo7UUFDTkssU0FBUyxDQUFDO1FBQ1ZDLFNBQVFDLEdBQUc7WUFDVCxPQUFPTCxLQUFLTSxHQUFHLENBQUNEO1FBQ2xCO1FBQ0FFLFNBQVFGLEdBQUc7WUFDVCxPQUFPTCxLQUFLUSxHQUFHLENBQUNILFFBQVE7UUFDMUI7UUFDQUksWUFBV0osR0FBRztZQUNaLE9BQU9MLEtBQUtRLEdBQUcsQ0FBQ0gsUUFBUTtRQUMxQjtRQUNBSyxTQUFRTCxHQUFHLEVBQUVNLEtBQUs7WUFDaEJYLEtBQUtZLEdBQUcsQ0FBQ1AsS0FBS007UUFDaEI7UUFDQUUsWUFBV1IsR0FBRyxFQUFFTSxLQUFLO1lBQ25CWCxLQUFLWSxHQUFHLENBQUNQLEtBQUtNO1FBQ2hCO1FBQ0FHLFlBQVdULEdBQUc7WUFDWkwsS0FBS2UsTUFBTSxDQUFDVjtRQUNkO1FBQ0FXO1lBQ0UsT0FBT0MsTUFBTUMsSUFBSSxDQUFDbEIsS0FBS21CLElBQUk7UUFDN0I7UUFDQUM7WUFDRXBCLEtBQUtvQixLQUFLO1FBQ1o7UUFDQUM7WUFDRXJCLEtBQUtvQixLQUFLO1FBQ1o7SUFDRjtBQUNGO0FBRUEsU0FBU0UsY0FBY25CLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLE1BQU1vQixVQUFVO1FBQ2RDLFFBQVE7WUFBRSxJQUFJckIsUUFBUXNCLE1BQU0sSUFBSTFCO1FBQVM7UUFDekMyQixhQUFhO1lBQUM7U0FBRztRQUNqQkMsVUFBVTtRQUNWQyxnQkFBZ0IsRUFBRTtRQUNsQkMsU0FBUyxDQUFDO0lBQ1o7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TS9FLE9BQU9mLE9BQU8sQ0FBQ3FCLE9BQU95RSxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtBQUV6RTtBQUNBLFNBQVMxRCxNQUFNckIsTUFBTSxFQUFFaUIsUUFBUSxFQUFFWCxJQUFJO0lBQ25DLE9BQU9OLE9BQU9xQixLQUFLLEdBQUdyQixPQUFPcUIsS0FBSyxDQUFDLENBQUNILE9BQU90QyxNQUFRcUMsU0FBU0MsT0FBT1osT0FBTzFCLFFBQVEsS0FDbEY7QUFDRjtBQUNBLGVBQWVnQixRQUFRSSxNQUFNO0lBQzNCLElBQUksT0FBT0EsT0FBT0osT0FBTyxLQUFLLFlBQVk7UUFDeEMsTUFBTXBDLGlFQUFTQSxDQUFDd0MsT0FBT0osT0FBTztJQUNoQztBQUNGO0FBRUEsTUFBTW9GLGlCQUFpQjtJQUNyQkMsdUJBQXVCO0lBQ3ZCQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsa0JBQWtCO0lBQ2xCQyxtQkFBbUI7SUFDbkJDLHFCQUFxQjtJQUNyQkMsa0JBQWtCO0lBQ2xCQyxxQkFBcUI7SUFDckJDLElBQUk7SUFDSkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxjQUFjO0lBQ2RDLFVBQVU7SUFDVnpILFFBQVE7SUFDUjBILFNBQVM7SUFDVEMsY0FBYztJQUNkQyxTQUFTO0lBQ1RDLGFBQWE7SUFDYkMsT0FBTztJQUNQQyxnQkFBZ0I7SUFDaEJDLFVBQVU7SUFDVixnQkFBZ0IsR0FDaEIseUJBQXlCO0lBQ3pCLGdCQUFnQixHQUNoQixzQkFBc0I7QUFDeEI7QUFFNEgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFya25ldC1yZWFjdC8uLi8uLi9ub2RlX21vZHVsZXMvdW5zdG9yYWdlL2Rpc3QvaW5kZXgubWpzP2RiODAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlc3RyIGZyb20gJ2Rlc3RyJztcbmltcG9ydCB7IG4gYXMgbm9ybWFsaXplQmFzZUtleSwgYSBhcyBub3JtYWxpemVLZXksIGIgYXMgYXN5bmNDYWxsLCBkIGFzIGRlc2VyaWFsaXplUmF3LCBzIGFzIHN0cmluZ2lmeSwgYyBhcyBzZXJpYWxpemVSYXcsIGogYXMgam9pbktleXMgfSBmcm9tICcuL3NoYXJlZC91bnN0b3JhZ2UuODU4MWY1NjEubWpzJztcbmV4cG9ydCB7IHAgYXMgcHJlZml4U3RvcmFnZSB9IGZyb20gJy4vc2hhcmVkL3Vuc3RvcmFnZS44NTgxZjU2MS5tanMnO1xuXG5mdW5jdGlvbiBkZWZpbmVEcml2ZXIoZmFjdG9yeSkge1xuICByZXR1cm4gZmFjdG9yeTtcbn1cblxuY29uc3QgRFJJVkVSX05BTUUgPSBcIm1lbW9yeVwiO1xuY29uc3QgbWVtb3J5ID0gZGVmaW5lRHJpdmVyKCgpID0+IHtcbiAgY29uc3QgZGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgbmFtZTogRFJJVkVSX05BTUUsXG4gICAgb3B0aW9uczoge30sXG4gICAgaGFzSXRlbShrZXkpIHtcbiAgICAgIHJldHVybiBkYXRhLmhhcyhrZXkpO1xuICAgIH0sXG4gICAgZ2V0SXRlbShrZXkpIHtcbiAgICAgIHJldHVybiBkYXRhLmdldChrZXkpID8/IG51bGw7XG4gICAgfSxcbiAgICBnZXRJdGVtUmF3KGtleSkge1xuICAgICAgcmV0dXJuIGRhdGEuZ2V0KGtleSkgPz8gbnVsbDtcbiAgICB9LFxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJdGVtUmF3KGtleSwgdmFsdWUpIHtcbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0sXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcbiAgICAgIGRhdGEuZGVsZXRlKGtleSk7XG4gICAgfSxcbiAgICBnZXRLZXlzKCkge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oZGF0YS5rZXlzKCkpO1xuICAgIH0sXG4gICAgY2xlYXIoKSB7XG4gICAgICBkYXRhLmNsZWFyKCk7XG4gICAgfSxcbiAgICBkaXNwb3NlKCkge1xuICAgICAgZGF0YS5jbGVhcigpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yYWdlKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIG1vdW50czogeyBcIlwiOiBvcHRpb25zLmRyaXZlciB8fCBtZW1vcnkoKSB9LFxuICAgIG1vdW50cG9pbnRzOiBbXCJcIl0sXG4gICAgd2F0Y2hpbmc6IGZhbHNlLFxuICAgIHdhdGNoTGlzdGVuZXJzOiBbXSxcbiAgICB1bndhdGNoOiB7fVxuICB9O1xuICBjb25zdCBnZXRNb3VudCA9IChrZXkpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJhc2Ugb2YgY29udGV4dC5tb3VudHBvaW50cykge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKGJhc2UpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmFzZSxcbiAgICAgICAgICByZWxhdGl2ZUtleToga2V5LnNsaWNlKGJhc2UubGVuZ3RoKSxcbiAgICAgICAgICBkcml2ZXI6IGNvbnRleHQubW91bnRzW2Jhc2VdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBiYXNlOiBcIlwiLFxuICAgICAgcmVsYXRpdmVLZXk6IGtleSxcbiAgICAgIGRyaXZlcjogY29udGV4dC5tb3VudHNbXCJcIl1cbiAgICB9O1xuICB9O1xuICBjb25zdCBnZXRNb3VudHMgPSAoYmFzZSwgaW5jbHVkZVBhcmVudCkgPT4ge1xuICAgIHJldHVybiBjb250ZXh0Lm1vdW50cG9pbnRzLmZpbHRlcihcbiAgICAgIChtb3VudHBvaW50KSA9PiBtb3VudHBvaW50LnN0YXJ0c1dpdGgoYmFzZSkgfHwgaW5jbHVkZVBhcmVudCAmJiBiYXNlLnN0YXJ0c1dpdGgobW91bnRwb2ludClcbiAgICApLm1hcCgobW91bnRwb2ludCkgPT4gKHtcbiAgICAgIHJlbGF0aXZlQmFzZTogYmFzZS5sZW5ndGggPiBtb3VudHBvaW50Lmxlbmd0aCA/IGJhc2Uuc2xpY2UobW91bnRwb2ludC5sZW5ndGgpIDogdm9pZCAwLFxuICAgICAgbW91bnRwb2ludCxcbiAgICAgIGRyaXZlcjogY29udGV4dC5tb3VudHNbbW91bnRwb2ludF1cbiAgICB9KSk7XG4gIH07XG4gIGNvbnN0IG9uQ2hhbmdlID0gKGV2ZW50LCBrZXkpID0+IHtcbiAgICBpZiAoIWNvbnRleHQud2F0Y2hpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG4gICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBjb250ZXh0LndhdGNoTGlzdGVuZXJzKSB7XG4gICAgICBsaXN0ZW5lcihldmVudCwga2V5KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN0YXJ0V2F0Y2ggPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGNvbnRleHQud2F0Y2hpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC53YXRjaGluZyA9IHRydWU7XG4gICAgZm9yIChjb25zdCBtb3VudHBvaW50IGluIGNvbnRleHQubW91bnRzKSB7XG4gICAgICBjb250ZXh0LnVud2F0Y2hbbW91bnRwb2ludF0gPSBhd2FpdCB3YXRjaChcbiAgICAgICAgY29udGV4dC5tb3VudHNbbW91bnRwb2ludF0sXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICBtb3VudHBvaW50XG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3RvcFdhdGNoID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghY29udGV4dC53YXRjaGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1vdW50cG9pbnQgaW4gY29udGV4dC51bndhdGNoKSB7XG4gICAgICBhd2FpdCBjb250ZXh0LnVud2F0Y2hbbW91bnRwb2ludF0oKTtcbiAgICB9XG4gICAgY29udGV4dC51bndhdGNoID0ge307XG4gICAgY29udGV4dC53YXRjaGluZyA9IGZhbHNlO1xuICB9O1xuICBjb25zdCBydW5CYXRjaCA9IChpdGVtcywgY29tbW9uT3B0aW9ucywgY2IpID0+IHtcbiAgICBjb25zdCBiYXRjaGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBnZXRCYXRjaCA9IChtb3VudCkgPT4ge1xuICAgICAgbGV0IGJhdGNoID0gYmF0Y2hlcy5nZXQobW91bnQuYmFzZSk7XG4gICAgICBpZiAoIWJhdGNoKSB7XG4gICAgICAgIGJhdGNoID0ge1xuICAgICAgICAgIGRyaXZlcjogbW91bnQuZHJpdmVyLFxuICAgICAgICAgIGJhc2U6IG1vdW50LmJhc2UsXG4gICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGJhdGNoZXMuc2V0KG1vdW50LmJhc2UsIGJhdGNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXRjaDtcbiAgICB9O1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgY29uc3QgaXNTdHJpbmdJdGVtID0gdHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCI7XG4gICAgICBjb25zdCBrZXkgPSBub3JtYWxpemVLZXkoaXNTdHJpbmdJdGVtID8gaXRlbSA6IGl0ZW0ua2V5KTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXNTdHJpbmdJdGVtID8gdm9pZCAwIDogaXRlbS52YWx1ZTtcbiAgICAgIGNvbnN0IG9wdGlvbnMyID0gaXNTdHJpbmdJdGVtIHx8ICFpdGVtLm9wdGlvbnMgPyBjb21tb25PcHRpb25zIDogeyAuLi5jb21tb25PcHRpb25zLCAuLi5pdGVtLm9wdGlvbnMgfTtcbiAgICAgIGNvbnN0IG1vdW50ID0gZ2V0TW91bnQoa2V5KTtcbiAgICAgIGdldEJhdGNoKG1vdW50KS5pdGVtcy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcmVsYXRpdmVLZXk6IG1vdW50LnJlbGF0aXZlS2V5LFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zMlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uYmF0Y2hlcy52YWx1ZXMoKV0ubWFwKChiYXRjaCkgPT4gY2IoYmF0Y2gpKSkudGhlbihcbiAgICAgIChyKSA9PiByLmZsYXQoKVxuICAgICk7XG4gIH07XG4gIGNvbnN0IHN0b3JhZ2UgPSB7XG4gICAgLy8gSXRlbVxuICAgIGhhc0l0ZW0oa2V5LCBvcHRzID0ge30pIHtcbiAgICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuICAgICAgY29uc3QgeyByZWxhdGl2ZUtleSwgZHJpdmVyIH0gPSBnZXRNb3VudChrZXkpO1xuICAgICAgcmV0dXJuIGFzeW5jQ2FsbChkcml2ZXIuaGFzSXRlbSwgcmVsYXRpdmVLZXksIG9wdHMpO1xuICAgIH0sXG4gICAgZ2V0SXRlbShrZXksIG9wdHMgPSB7fSkge1xuICAgICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG4gICAgICBjb25zdCB7IHJlbGF0aXZlS2V5LCBkcml2ZXIgfSA9IGdldE1vdW50KGtleSk7XG4gICAgICByZXR1cm4gYXN5bmNDYWxsKGRyaXZlci5nZXRJdGVtLCByZWxhdGl2ZUtleSwgb3B0cykudGhlbihcbiAgICAgICAgKHZhbHVlKSA9PiBkZXN0cih2YWx1ZSlcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRJdGVtcyhpdGVtcywgY29tbW9uT3B0aW9ucykge1xuICAgICAgcmV0dXJuIHJ1bkJhdGNoKGl0ZW1zLCBjb21tb25PcHRpb25zLCAoYmF0Y2gpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoLmRyaXZlci5nZXRJdGVtcykge1xuICAgICAgICAgIHJldHVybiBhc3luY0NhbGwoXG4gICAgICAgICAgICBiYXRjaC5kcml2ZXIuZ2V0SXRlbXMsXG4gICAgICAgICAgICBiYXRjaC5pdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgICAgICAgIGtleTogaXRlbS5yZWxhdGl2ZUtleSxcbiAgICAgICAgICAgICAgb3B0aW9uczogaXRlbS5vcHRpb25zXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBjb21tb25PcHRpb25zXG4gICAgICAgICAgKS50aGVuKFxuICAgICAgICAgICAgKHIpID0+IHIubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgICAgICBrZXk6IGpvaW5LZXlzKGJhdGNoLmJhc2UsIGl0ZW0ua2V5KSxcbiAgICAgICAgICAgICAgdmFsdWU6IGRlc3RyKGl0ZW0udmFsdWUpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICBiYXRjaC5pdGVtcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhc3luY0NhbGwoXG4gICAgICAgICAgICAgIGJhdGNoLmRyaXZlci5nZXRJdGVtLFxuICAgICAgICAgICAgICBpdGVtLnJlbGF0aXZlS2V5LFxuICAgICAgICAgICAgICBpdGVtLm9wdGlvbnNcbiAgICAgICAgICAgICkudGhlbigodmFsdWUpID0+ICh7XG4gICAgICAgICAgICAgIGtleTogaXRlbS5rZXksXG4gICAgICAgICAgICAgIHZhbHVlOiBkZXN0cih2YWx1ZSlcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRJdGVtUmF3KGtleSwgb3B0cyA9IHt9KSB7XG4gICAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcbiAgICAgIGNvbnN0IHsgcmVsYXRpdmVLZXksIGRyaXZlciB9ID0gZ2V0TW91bnQoa2V5KTtcbiAgICAgIGlmIChkcml2ZXIuZ2V0SXRlbVJhdykge1xuICAgICAgICByZXR1cm4gYXN5bmNDYWxsKGRyaXZlci5nZXRJdGVtUmF3LCByZWxhdGl2ZUtleSwgb3B0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXN5bmNDYWxsKGRyaXZlci5nZXRJdGVtLCByZWxhdGl2ZUtleSwgb3B0cykudGhlbihcbiAgICAgICAgKHZhbHVlKSA9PiBkZXNlcmlhbGl6ZVJhdyh2YWx1ZSlcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRJdGVtKGtleSwgdmFsdWUsIG9wdHMgPSB7fSkge1xuICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgfVxuICAgICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG4gICAgICBjb25zdCB7IHJlbGF0aXZlS2V5LCBkcml2ZXIgfSA9IGdldE1vdW50KGtleSk7XG4gICAgICBpZiAoIWRyaXZlci5zZXRJdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IGFzeW5jQ2FsbChkcml2ZXIuc2V0SXRlbSwgcmVsYXRpdmVLZXksIHN0cmluZ2lmeSh2YWx1ZSksIG9wdHMpO1xuICAgICAgaWYgKCFkcml2ZXIud2F0Y2gpIHtcbiAgICAgICAgb25DaGFuZ2UoXCJ1cGRhdGVcIiwga2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldEl0ZW1zKGl0ZW1zLCBjb21tb25PcHRpb25zKSB7XG4gICAgICBhd2FpdCBydW5CYXRjaChpdGVtcywgY29tbW9uT3B0aW9ucywgYXN5bmMgKGJhdGNoKSA9PiB7XG4gICAgICAgIGlmIChiYXRjaC5kcml2ZXIuc2V0SXRlbXMpIHtcbiAgICAgICAgICBhd2FpdCBhc3luY0NhbGwoXG4gICAgICAgICAgICBiYXRjaC5kcml2ZXIuc2V0SXRlbXMsXG4gICAgICAgICAgICBiYXRjaC5pdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgICAgICAgIGtleTogaXRlbS5yZWxhdGl2ZUtleSxcbiAgICAgICAgICAgICAgdmFsdWU6IHN0cmluZ2lmeShpdGVtLnZhbHVlKSxcbiAgICAgICAgICAgICAgb3B0aW9uczogaXRlbS5vcHRpb25zXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBjb21tb25PcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWJhdGNoLmRyaXZlci5zZXRJdGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgIGJhdGNoLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jQ2FsbChcbiAgICAgICAgICAgICAgYmF0Y2guZHJpdmVyLnNldEl0ZW0sXG4gICAgICAgICAgICAgIGl0ZW0ucmVsYXRpdmVLZXksXG4gICAgICAgICAgICAgIHN0cmluZ2lmeShpdGVtLnZhbHVlKSxcbiAgICAgICAgICAgICAgaXRlbS5vcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFzeW5jIHNldEl0ZW1SYXcoa2V5LCB2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gc3RvcmFnZS5yZW1vdmVJdGVtKGtleSwgb3B0cyk7XG4gICAgICB9XG4gICAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcbiAgICAgIGNvbnN0IHsgcmVsYXRpdmVLZXksIGRyaXZlciB9ID0gZ2V0TW91bnQoa2V5KTtcbiAgICAgIGlmIChkcml2ZXIuc2V0SXRlbVJhdykge1xuICAgICAgICBhd2FpdCBhc3luY0NhbGwoZHJpdmVyLnNldEl0ZW1SYXcsIHJlbGF0aXZlS2V5LCB2YWx1ZSwgb3B0cyk7XG4gICAgICB9IGVsc2UgaWYgKGRyaXZlci5zZXRJdGVtKSB7XG4gICAgICAgIGF3YWl0IGFzeW5jQ2FsbChkcml2ZXIuc2V0SXRlbSwgcmVsYXRpdmVLZXksIHNlcmlhbGl6ZVJhdyh2YWx1ZSksIG9wdHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFkcml2ZXIud2F0Y2gpIHtcbiAgICAgICAgb25DaGFuZ2UoXCJ1cGRhdGVcIiwga2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJlbW92ZUl0ZW0oa2V5LCBvcHRzID0ge30pIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgb3B0cyA9IHsgcmVtb3ZlTWV0YTogb3B0cyB9O1xuICAgICAgfVxuICAgICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG4gICAgICBjb25zdCB7IHJlbGF0aXZlS2V5LCBkcml2ZXIgfSA9IGdldE1vdW50KGtleSk7XG4gICAgICBpZiAoIWRyaXZlci5yZW1vdmVJdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IGFzeW5jQ2FsbChkcml2ZXIucmVtb3ZlSXRlbSwgcmVsYXRpdmVLZXksIG9wdHMpO1xuICAgICAgaWYgKG9wdHMucmVtb3ZlTWV0YSB8fCBvcHRzLnJlbW92ZU1hdGEpIHtcbiAgICAgICAgYXdhaXQgYXN5bmNDYWxsKGRyaXZlci5yZW1vdmVJdGVtLCByZWxhdGl2ZUtleSArIFwiJFwiLCBvcHRzKTtcbiAgICAgIH1cbiAgICAgIGlmICghZHJpdmVyLndhdGNoKSB7XG4gICAgICAgIG9uQ2hhbmdlKFwicmVtb3ZlXCIsIGtleSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBNZXRhXG4gICAgYXN5bmMgZ2V0TWV0YShrZXksIG9wdHMgPSB7fSkge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBvcHRzID0geyBuYXRpdmVPbmx5OiBvcHRzIH07XG4gICAgICB9XG4gICAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcbiAgICAgIGNvbnN0IHsgcmVsYXRpdmVLZXksIGRyaXZlciB9ID0gZ2V0TW91bnQoa2V5KTtcbiAgICAgIGNvbnN0IG1ldGEgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGlmIChkcml2ZXIuZ2V0TWV0YSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG1ldGEsIGF3YWl0IGFzeW5jQ2FsbChkcml2ZXIuZ2V0TWV0YSwgcmVsYXRpdmVLZXksIG9wdHMpKTtcbiAgICAgIH1cbiAgICAgIGlmICghb3B0cy5uYXRpdmVPbmx5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgYXN5bmNDYWxsKFxuICAgICAgICAgIGRyaXZlci5nZXRJdGVtLFxuICAgICAgICAgIHJlbGF0aXZlS2V5ICsgXCIkXCIsXG4gICAgICAgICAgb3B0c1xuICAgICAgICApLnRoZW4oKHZhbHVlXykgPT4gZGVzdHIodmFsdWVfKSk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLmF0aW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB2YWx1ZS5hdGltZSA9IG5ldyBEYXRlKHZhbHVlLmF0aW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5tdGltZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFsdWUubXRpbWUgPSBuZXcgRGF0ZSh2YWx1ZS5tdGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIE9iamVjdC5hc3NpZ24obWV0YSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0YTtcbiAgICB9LFxuICAgIHNldE1ldGEoa2V5LCB2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRJdGVtKGtleSArIFwiJFwiLCB2YWx1ZSwgb3B0cyk7XG4gICAgfSxcbiAgICByZW1vdmVNZXRhKGtleSwgb3B0cyA9IHt9KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVJdGVtKGtleSArIFwiJFwiLCBvcHRzKTtcbiAgICB9LFxuICAgIC8vIEtleXNcbiAgICBhc3luYyBnZXRLZXlzKGJhc2UsIG9wdHMgPSB7fSkge1xuICAgICAgYmFzZSA9IG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSk7XG4gICAgICBjb25zdCBtb3VudHMgPSBnZXRNb3VudHMoYmFzZSwgdHJ1ZSk7XG4gICAgICBsZXQgbWFza2VkTW91bnRzID0gW107XG4gICAgICBjb25zdCBhbGxLZXlzID0gW107XG4gICAgICBmb3IgKGNvbnN0IG1vdW50IG9mIG1vdW50cykge1xuICAgICAgICBjb25zdCByYXdLZXlzID0gYXdhaXQgYXN5bmNDYWxsKFxuICAgICAgICAgIG1vdW50LmRyaXZlci5nZXRLZXlzLFxuICAgICAgICAgIG1vdW50LnJlbGF0aXZlQmFzZSxcbiAgICAgICAgICBvcHRzXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGtleXMgPSByYXdLZXlzLm1hcCgoa2V5KSA9PiBtb3VudC5tb3VudHBvaW50ICsgbm9ybWFsaXplS2V5KGtleSkpLmZpbHRlcigoa2V5KSA9PiAhbWFza2VkTW91bnRzLnNvbWUoKHApID0+IGtleS5zdGFydHNXaXRoKHApKSk7XG4gICAgICAgIGFsbEtleXMucHVzaCguLi5rZXlzKTtcbiAgICAgICAgbWFza2VkTW91bnRzID0gW1xuICAgICAgICAgIG1vdW50Lm1vdW50cG9pbnQsXG4gICAgICAgICAgLi4ubWFza2VkTW91bnRzLmZpbHRlcigocCkgPT4gIXAuc3RhcnRzV2l0aChtb3VudC5tb3VudHBvaW50KSlcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlID8gYWxsS2V5cy5maWx0ZXIoKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoYmFzZSkgJiYgIWtleS5lbmRzV2l0aChcIiRcIikpIDogYWxsS2V5cy5maWx0ZXIoKGtleSkgPT4gIWtleS5lbmRzV2l0aChcIiRcIikpO1xuICAgIH0sXG4gICAgLy8gVXRpbHNcbiAgICBhc3luYyBjbGVhcihiYXNlLCBvcHRzID0ge30pIHtcbiAgICAgIGJhc2UgPSBub3JtYWxpemVCYXNlS2V5KGJhc2UpO1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIGdldE1vdW50cyhiYXNlLCBmYWxzZSkubWFwKGFzeW5jIChtKSA9PiB7XG4gICAgICAgICAgaWYgKG0uZHJpdmVyLmNsZWFyKSB7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmNDYWxsKG0uZHJpdmVyLmNsZWFyLCBtLnJlbGF0aXZlQmFzZSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtLmRyaXZlci5yZW1vdmVJdGVtKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgbS5kcml2ZXIuZ2V0S2V5cyhtLnJlbGF0aXZlQmFzZSB8fCBcIlwiLCBvcHRzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAga2V5cy5tYXAoKGtleSkgPT4gbS5kcml2ZXIucmVtb3ZlSXRlbShrZXksIG9wdHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgZGlzcG9zZSgpIHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBPYmplY3QudmFsdWVzKGNvbnRleHQubW91bnRzKS5tYXAoKGRyaXZlcikgPT4gZGlzcG9zZShkcml2ZXIpKVxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHdhdGNoKGNhbGxiYWNrKSB7XG4gICAgICBhd2FpdCBzdGFydFdhdGNoKCk7XG4gICAgICBjb250ZXh0LndhdGNoTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29udGV4dC53YXRjaExpc3RlbmVycyA9IGNvbnRleHQud2F0Y2hMaXN0ZW5lcnMuZmlsdGVyKFxuICAgICAgICAgIChsaXN0ZW5lcikgPT4gbGlzdGVuZXIgIT09IGNhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICAgIGlmIChjb250ZXh0LndhdGNoTGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGF3YWl0IHN0b3BXYXRjaCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgYXN5bmMgdW53YXRjaCgpIHtcbiAgICAgIGNvbnRleHQud2F0Y2hMaXN0ZW5lcnMgPSBbXTtcbiAgICAgIGF3YWl0IHN0b3BXYXRjaCgpO1xuICAgIH0sXG4gICAgLy8gTW91bnRcbiAgICBtb3VudChiYXNlLCBkcml2ZXIpIHtcbiAgICAgIGJhc2UgPSBub3JtYWxpemVCYXNlS2V5KGJhc2UpO1xuICAgICAgaWYgKGJhc2UgJiYgY29udGV4dC5tb3VudHNbYmFzZV0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhbHJlYWR5IG1vdW50ZWQgYXQgJHtiYXNlfWApO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2UpIHtcbiAgICAgICAgY29udGV4dC5tb3VudHBvaW50cy5wdXNoKGJhc2UpO1xuICAgICAgICBjb250ZXh0Lm1vdW50cG9pbnRzLnNvcnQoKGEsIGIpID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5tb3VudHNbYmFzZV0gPSBkcml2ZXI7XG4gICAgICBpZiAoY29udGV4dC53YXRjaGluZykge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUod2F0Y2goZHJpdmVyLCBvbkNoYW5nZSwgYmFzZSkpLnRoZW4oKHVud2F0Y2hlcikgPT4ge1xuICAgICAgICAgIGNvbnRleHQudW53YXRjaFtiYXNlXSA9IHVud2F0Y2hlcjtcbiAgICAgICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RvcmFnZTtcbiAgICB9LFxuICAgIGFzeW5jIHVubW91bnQoYmFzZSwgX2Rpc3Bvc2UgPSB0cnVlKSB7XG4gICAgICBiYXNlID0gbm9ybWFsaXplQmFzZUtleShiYXNlKTtcbiAgICAgIGlmICghYmFzZSB8fCAhY29udGV4dC5tb3VudHNbYmFzZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQud2F0Y2hpbmcgJiYgYmFzZSBpbiBjb250ZXh0LnVud2F0Y2gpIHtcbiAgICAgICAgY29udGV4dC51bndhdGNoW2Jhc2VdKCk7XG4gICAgICAgIGRlbGV0ZSBjb250ZXh0LnVud2F0Y2hbYmFzZV07XG4gICAgICB9XG4gICAgICBpZiAoX2Rpc3Bvc2UpIHtcbiAgICAgICAgYXdhaXQgZGlzcG9zZShjb250ZXh0Lm1vdW50c1tiYXNlXSk7XG4gICAgICB9XG4gICAgICBjb250ZXh0Lm1vdW50cG9pbnRzID0gY29udGV4dC5tb3VudHBvaW50cy5maWx0ZXIoKGtleSkgPT4ga2V5ICE9PSBiYXNlKTtcbiAgICAgIGRlbGV0ZSBjb250ZXh0Lm1vdW50c1tiYXNlXTtcbiAgICB9LFxuICAgIGdldE1vdW50KGtleSA9IFwiXCIpIHtcbiAgICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpICsgXCI6XCI7XG4gICAgICBjb25zdCBtID0gZ2V0TW91bnQoa2V5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRyaXZlcjogbS5kcml2ZXIsXG4gICAgICAgIGJhc2U6IG0uYmFzZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldE1vdW50cyhiYXNlID0gXCJcIiwgb3B0cyA9IHt9KSB7XG4gICAgICBiYXNlID0gbm9ybWFsaXplS2V5KGJhc2UpO1xuICAgICAgY29uc3QgbW91bnRzID0gZ2V0TW91bnRzKGJhc2UsIG9wdHMucGFyZW50cyk7XG4gICAgICByZXR1cm4gbW91bnRzLm1hcCgobSkgPT4gKHtcbiAgICAgICAgZHJpdmVyOiBtLmRyaXZlcixcbiAgICAgICAgYmFzZTogbS5tb3VudHBvaW50XG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3RvcmFnZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNuYXBzaG90KHN0b3JhZ2UsIGJhc2UpIHtcbiAgYmFzZSA9IG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSk7XG4gIGNvbnN0IGtleXMgPSBhd2FpdCBzdG9yYWdlLmdldEtleXMoYmFzZSk7XG4gIGNvbnN0IHNuYXBzaG90MiA9IHt9O1xuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBrZXlzLm1hcChhc3luYyAoa2V5KSA9PiB7XG4gICAgICBzbmFwc2hvdDJba2V5LnNsaWNlKGJhc2UubGVuZ3RoKV0gPSBhd2FpdCBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICB9KVxuICApO1xuICByZXR1cm4gc25hcHNob3QyO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzdG9yZVNuYXBzaG90KGRyaXZlciwgc25hcHNob3QyLCBiYXNlID0gXCJcIikge1xuICBiYXNlID0gbm9ybWFsaXplQmFzZUtleShiYXNlKTtcbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgT2JqZWN0LmVudHJpZXMoc25hcHNob3QyKS5tYXAoKGUpID0+IGRyaXZlci5zZXRJdGVtKGJhc2UgKyBlWzBdLCBlWzFdKSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHdhdGNoKGRyaXZlciwgb25DaGFuZ2UsIGJhc2UpIHtcbiAgcmV0dXJuIGRyaXZlci53YXRjaCA/IGRyaXZlci53YXRjaCgoZXZlbnQsIGtleSkgPT4gb25DaGFuZ2UoZXZlbnQsIGJhc2UgKyBrZXkpKSA6ICgpID0+IHtcbiAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGRpc3Bvc2UoZHJpdmVyKSB7XG4gIGlmICh0eXBlb2YgZHJpdmVyLmRpc3Bvc2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGF3YWl0IGFzeW5jQ2FsbChkcml2ZXIuZGlzcG9zZSk7XG4gIH1cbn1cblxuY29uc3QgYnVpbHRpbkRyaXZlcnMgPSB7XG4gIGF6dXJlQXBwQ29uZmlndXJhdGlvbjogXCJ1bnN0b3JhZ2UvZHJpdmVycy9henVyZS1hcHAtY29uZmlndXJhdGlvblwiLFxuICBhenVyZUNvc21vczogXCJ1bnN0b3JhZ2UvZHJpdmVycy9henVyZS1jb3Ntb3NcIixcbiAgYXp1cmVLZXlWYXVsdDogXCJ1bnN0b3JhZ2UvZHJpdmVycy9henVyZS1rZXktdmF1bHRcIixcbiAgYXp1cmVTdG9yYWdlQmxvYjogXCJ1bnN0b3JhZ2UvZHJpdmVycy9henVyZS1zdG9yYWdlLWJsb2JcIixcbiAgYXp1cmVTdG9yYWdlVGFibGU6IFwidW5zdG9yYWdlL2RyaXZlcnMvYXp1cmUtc3RvcmFnZS10YWJsZVwiLFxuICBjbG91ZGZsYXJlS1ZCaW5kaW5nOiBcInVuc3RvcmFnZS9kcml2ZXJzL2Nsb3VkZmxhcmUta3YtYmluZGluZ1wiLFxuICBjbG91ZGZsYXJlS1ZIVFRQOiBcInVuc3RvcmFnZS9kcml2ZXJzL2Nsb3VkZmxhcmUta3YtaHR0cFwiLFxuICBjbG91ZGZsYXJlUjJCaW5kaW5nOiBcInVuc3RvcmFnZS9kcml2ZXJzL2Nsb3VkZmxhcmUtcjItYmluZGluZ1wiLFxuICBmczogXCJ1bnN0b3JhZ2UvZHJpdmVycy9mc1wiLFxuICBmc0xpdGU6IFwidW5zdG9yYWdlL2RyaXZlcnMvZnMtbGl0ZVwiLFxuICBnaXRodWI6IFwidW5zdG9yYWdlL2RyaXZlcnMvZ2l0aHViXCIsXG4gIGh0dHA6IFwidW5zdG9yYWdlL2RyaXZlcnMvaHR0cFwiLFxuICBpbmRleGVkYjogXCJ1bnN0b3JhZ2UvZHJpdmVycy9pbmRleGVkYlwiLFxuICBsb2NhbFN0b3JhZ2U6IFwidW5zdG9yYWdlL2RyaXZlcnMvbG9jYWxzdG9yYWdlXCIsXG4gIGxydUNhY2hlOiBcInVuc3RvcmFnZS9kcml2ZXJzL2xydS1jYWNoZVwiLFxuICBtZW1vcnk6IFwidW5zdG9yYWdlL2RyaXZlcnMvbWVtb3J5XCIsXG4gIG1vbmdvZGI6IFwidW5zdG9yYWdlL2RyaXZlcnMvbW9uZ29kYlwiLFxuICBuZXRsaWZ5QmxvYnM6IFwidW5zdG9yYWdlL2RyaXZlcnMvbmV0bGlmeS1ibG9ic1wiLFxuICBvdmVybGF5OiBcInVuc3RvcmFnZS9kcml2ZXJzL292ZXJsYXlcIixcbiAgcGxhbmV0c2NhbGU6IFwidW5zdG9yYWdlL2RyaXZlcnMvcGxhbmV0c2NhbGVcIixcbiAgcmVkaXM6IFwidW5zdG9yYWdlL2RyaXZlcnMvcmVkaXNcIixcbiAgc2Vzc2lvblN0b3JhZ2U6IFwidW5zdG9yYWdlL2RyaXZlcnMvc2Vzc2lvbi1zdG9yYWdlXCIsXG4gIHZlcmNlbEtWOiBcInVuc3RvcmFnZS9kcml2ZXJzL3ZlcmNlbC1rdlwiLFxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgXCJjbG91ZGZsYXJlLWt2LWJpbmRpbmdcIjogXCJ1bnN0b3JhZ2UvZHJpdmVycy9jbG91ZGZsYXJlLWt2LWJpbmRpbmdcIixcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIFwiY2xvdWRmbGFyZS1rdi1odHRwXCI6IFwidW5zdG9yYWdlL2RyaXZlcnMvY2xvdWRmbGFyZS1rdi1odHRwXCJcbn07XG5cbmV4cG9ydCB7IGJ1aWx0aW5Ecml2ZXJzLCBjcmVhdGVTdG9yYWdlLCBkZWZpbmVEcml2ZXIsIGpvaW5LZXlzLCBub3JtYWxpemVCYXNlS2V5LCBub3JtYWxpemVLZXksIHJlc3RvcmVTbmFwc2hvdCwgc25hcHNob3QgfTtcbiJdLCJuYW1lcyI6WyJkZXN0ciIsIm4iLCJub3JtYWxpemVCYXNlS2V5IiwiYSIsIm5vcm1hbGl6ZUtleSIsImIiLCJhc3luY0NhbGwiLCJkIiwiZGVzZXJpYWxpemVSYXciLCJzIiwic3RyaW5naWZ5IiwiYyIsInNlcmlhbGl6ZVJhdyIsImoiLCJqb2luS2V5cyIsInAiLCJwcmVmaXhTdG9yYWdlIiwiZGVmaW5lRHJpdmVyIiwiZmFjdG9yeSIsIkRSSVZFUl9OQU1FIiwibWVtb3J5IiwiZGF0YSIsIk1hcCIsIm5hbWUiLCJvcHRpb25zIiwiaGFzSXRlbSIsImtleSIsImhhcyIsImdldEl0ZW0iLCJnZXQiLCJnZXRJdGVtUmF3Iiwic2V0SXRlbSIsInZhbHVlIiwic2V0Iiwic2V0SXRlbVJhdyIsInJlbW92ZUl0ZW0iLCJkZWxldGUiLCJnZXRLZXlzIiwiQXJyYXkiLCJmcm9tIiwia2V5cyIsImNsZWFyIiwiZGlzcG9zZSIsImNyZWF0ZVN0b3JhZ2UiLCJjb250ZXh0IiwibW91bnRzIiwiZHJpdmVyIiwibW91bnRwb2ludHMiLCJ3YXRjaGluZyIsIndhdGNoTGlzdGVuZXJzIiwidW53YXRjaCIsImdldE1vdW50IiwiYmFzZSIsInN0YXJ0c1dpdGgiLCJyZWxhdGl2ZUtleSIsInNsaWNlIiwibGVuZ3RoIiwiZ2V0TW91bnRzIiwiaW5jbHVkZVBhcmVudCIsImZpbHRlciIsIm1vdW50cG9pbnQiLCJtYXAiLCJyZWxhdGl2ZUJhc2UiLCJvbkNoYW5nZSIsImV2ZW50IiwibGlzdGVuZXIiLCJzdGFydFdhdGNoIiwid2F0Y2giLCJzdG9wV2F0Y2giLCJydW5CYXRjaCIsIml0ZW1zIiwiY29tbW9uT3B0aW9ucyIsImNiIiwiYmF0Y2hlcyIsImdldEJhdGNoIiwibW91bnQiLCJiYXRjaCIsIml0ZW0iLCJpc1N0cmluZ0l0ZW0iLCJvcHRpb25zMiIsInB1c2giLCJQcm9taXNlIiwiYWxsIiwidmFsdWVzIiwidGhlbiIsInIiLCJmbGF0Iiwic3RvcmFnZSIsIm9wdHMiLCJnZXRJdGVtcyIsInNldEl0ZW1zIiwicmVtb3ZlTWV0YSIsInJlbW92ZU1hdGEiLCJnZXRNZXRhIiwibmF0aXZlT25seSIsIm1ldGEiLCJPYmplY3QiLCJjcmVhdGUiLCJhc3NpZ24iLCJ2YWx1ZV8iLCJhdGltZSIsIkRhdGUiLCJtdGltZSIsInNldE1ldGEiLCJtYXNrZWRNb3VudHMiLCJhbGxLZXlzIiwicmF3S2V5cyIsInNvbWUiLCJlbmRzV2l0aCIsIm0iLCJjYWxsYmFjayIsIkVycm9yIiwic29ydCIsInJlc29sdmUiLCJ1bndhdGNoZXIiLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsInVubW91bnQiLCJfZGlzcG9zZSIsInBhcmVudHMiLCJzbmFwc2hvdCIsInNuYXBzaG90MiIsInJlc3RvcmVTbmFwc2hvdCIsImVudHJpZXMiLCJlIiwiYnVpbHRpbkRyaXZlcnMiLCJhenVyZUFwcENvbmZpZ3VyYXRpb24iLCJhenVyZUNvc21vcyIsImF6dXJlS2V5VmF1bHQiLCJhenVyZVN0b3JhZ2VCbG9iIiwiYXp1cmVTdG9yYWdlVGFibGUiLCJjbG91ZGZsYXJlS1ZCaW5kaW5nIiwiY2xvdWRmbGFyZUtWSFRUUCIsImNsb3VkZmxhcmVSMkJpbmRpbmciLCJmcyIsImZzTGl0ZSIsImdpdGh1YiIsImh0dHAiLCJpbmRleGVkYiIsImxvY2FsU3RvcmFnZSIsImxydUNhY2hlIiwibW9uZ29kYiIsIm5ldGxpZnlCbG9icyIsIm92ZXJsYXkiLCJwbGFuZXRzY2FsZSIsInJlZGlzIiwic2Vzc2lvblN0b3JhZ2UiLCJ2ZXJjZWxLViJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs":
/*!***********************************************************************!*\
  !*** ../../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ serializeRaw),\n/* harmony export */   d: () => (/* binding */ deserializeRaw),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ stringify)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nfunction checkBufferSupport() {\n    if (typeof Buffer === void 0) {\n        throw new TypeError(\"[unstorage] Buffer is not supported!\");\n    }\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    checkBufferSupport();\n    const base64 = Buffer.from(value).toString(\"base64\");\n    return BASE64_PREFIX + base64;\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    checkBufferSupport();\n    return Buffer.from(value.slice(BASE64_PREFIX.length), \"base64\");\n}\nconst storageKeyProperties = [\n    \"hasItem\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = (key = \"\", ...args)=>// @ts-ignore\n            storage[property](base + key, ...args);\n    }\n    nsStorage.getKeys = (key = \"\", ...arguments_)=>storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0].replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\");\n}\nfunction joinKeys(...keys) {\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3Vuc3RvcmFnZS9kaXN0L3NoYXJlZC91bnN0b3JhZ2UuODU4MWY1NjEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsY0FBY0MsS0FBSztJQUMxQixJQUFJLENBQUNBLFNBQVMsT0FBT0EsTUFBTUMsSUFBSSxLQUFLLFlBQVk7UUFDOUMsT0FBT0MsUUFBUUMsT0FBTyxDQUFDSDtJQUN6QjtJQUNBLE9BQU9BO0FBQ1Q7QUFDQSxTQUFTSSxVQUFVQyxTQUFTLEVBQUUsR0FBR0MsVUFBVTtJQUN6QyxJQUFJO1FBQ0YsT0FBT1AsY0FBY00sYUFBYUM7SUFDcEMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsT0FBT0wsUUFBUU0sTUFBTSxDQUFDRDtJQUN4QjtBQUNGO0FBQ0EsU0FBU0UsWUFBWVQsS0FBSztJQUN4QixNQUFNVSxPQUFPLE9BQU9WO0lBQ3BCLE9BQU9BLFVBQVUsUUFBUVUsU0FBUyxZQUFZQSxTQUFTO0FBQ3pEO0FBQ0EsU0FBU0MsYUFBYVgsS0FBSztJQUN6QixNQUFNWSxRQUFRQyxPQUFPQyxjQUFjLENBQUNkO0lBQ3BDLE9BQU8sQ0FBQ1ksU0FBU0EsTUFBTUcsYUFBYSxDQUFDRjtBQUN2QztBQUNBLFNBQVNHLFVBQVVoQixLQUFLO0lBQ3RCLElBQUlTLFlBQVlULFFBQVE7UUFDdEIsT0FBT2lCLE9BQU9qQjtJQUNoQjtJQUNBLElBQUlXLGFBQWFYLFVBQVVrQixNQUFNQyxPQUFPLENBQUNuQixRQUFRO1FBQy9DLE9BQU9vQixLQUFLSixTQUFTLENBQUNoQjtJQUN4QjtJQUNBLElBQUksT0FBT0EsTUFBTXFCLE1BQU0sS0FBSyxZQUFZO1FBQ3RDLE9BQU9MLFVBQVVoQixNQUFNcUIsTUFBTTtJQUMvQjtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUNBLFNBQVNDO0lBQ1AsSUFBSSxPQUFPQyxXQUFXLEtBQUssR0FBRztRQUM1QixNQUFNLElBQUlDLFVBQVU7SUFDdEI7QUFDRjtBQUNBLE1BQU1DLGdCQUFnQjtBQUN0QixTQUFTQyxhQUFhM0IsS0FBSztJQUN6QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUM3QixPQUFPQTtJQUNUO0lBQ0F1QjtJQUNBLE1BQU1LLFNBQVNKLE9BQU9LLElBQUksQ0FBQzdCLE9BQU84QixRQUFRLENBQUM7SUFDM0MsT0FBT0osZ0JBQWdCRTtBQUN6QjtBQUNBLFNBQVNHLGVBQWUvQixLQUFLO0lBQzNCLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzdCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNBLE1BQU1nQyxVQUFVLENBQUNOLGdCQUFnQjtRQUNwQyxPQUFPMUI7SUFDVDtJQUNBdUI7SUFDQSxPQUFPQyxPQUFPSyxJQUFJLENBQUM3QixNQUFNaUMsS0FBSyxDQUFDUCxjQUFjUSxNQUFNLEdBQUc7QUFDeEQ7QUFFQSxNQUFNQyx1QkFBdUI7SUFDM0I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELFNBQVNDLGNBQWNDLE9BQU8sRUFBRUMsSUFBSTtJQUNsQ0EsT0FBT0MsaUJBQWlCRDtJQUN4QixJQUFJLENBQUNBLE1BQU07UUFDVCxPQUFPRDtJQUNUO0lBQ0EsTUFBTUcsWUFBWTtRQUFFLEdBQUdILE9BQU87SUFBQztJQUMvQixLQUFLLE1BQU1JLFlBQVlOLHFCQUFzQjtRQUMzQ0ssU0FBUyxDQUFDQyxTQUFTLEdBQUcsQ0FBQ0MsTUFBTSxFQUFFLEVBQUUsR0FBR0MsT0FDbEMsYUFBYTtZQUNiTixPQUFPLENBQUNJLFNBQVMsQ0FBQ0gsT0FBT0ksUUFBUUM7SUFFckM7SUFDQUgsVUFBVUksT0FBTyxHQUFHLENBQUNGLE1BQU0sRUFBRSxFQUFFLEdBQUdwQyxhQUFlK0IsUUFBUU8sT0FBTyxDQUFDTixPQUFPSSxRQUFRcEMsWUFBWUwsSUFBSSxDQUFDLENBQUM0QyxPQUFTQSxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS2QsS0FBSyxDQUFDSyxLQUFLSixNQUFNO0lBQ3BKLE9BQU9NO0FBQ1Q7QUFDQSxTQUFTUSxhQUFhTixHQUFHO0lBQ3ZCLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU87SUFDVDtJQUNBLE9BQU9BLElBQUlPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxPQUFPLENBQUMsVUFBVSxLQUFLQSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsVUFBVTtBQUN4RjtBQUNBLFNBQVNDLFNBQVMsR0FBR04sSUFBSTtJQUN2QixPQUFPRyxhQUFhSCxLQUFLTyxJQUFJLENBQUM7QUFDaEM7QUFDQSxTQUFTYixpQkFBaUJELElBQUk7SUFDNUJBLE9BQU9VLGFBQWFWO0lBQ3BCLE9BQU9BLE9BQU9BLE9BQU8sTUFBTTtBQUM3QjtBQUUrSiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJrbmV0LXJlYWN0Ly4uLy4uL25vZGVfbW9kdWxlcy91bnN0b3JhZ2UvZGlzdC9zaGFyZWQvdW5zdG9yYWdlLjg1ODFmNTYxLm1qcz8yNTgxIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdyYXBUb1Byb21pc2UodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUudGhlbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYXN5bmNDYWxsKGZ1bmN0aW9uXywgLi4uYXJndW1lbnRzXykge1xuICB0cnkge1xuICAgIHJldHVybiB3cmFwVG9Qcm9taXNlKGZ1bmN0aW9uXyguLi5hcmd1bWVudHNfKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZSAhPT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNQdXJlT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgcmV0dXJuICFwcm90byB8fCBwcm90by5pc1Byb3RvdHlwZU9mKE9iamVjdCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmIChpc1B1cmVPYmplY3QodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeSh2YWx1ZS50b0pTT04oKSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiW3Vuc3RvcmFnZV0gQ2Fubm90IHN0cmluZ2lmeSB2YWx1ZSFcIik7XG59XG5mdW5jdGlvbiBjaGVja0J1ZmZlclN1cHBvcnQoKSB7XG4gIGlmICh0eXBlb2YgQnVmZmVyID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW3Vuc3RvcmFnZV0gQnVmZmVyIGlzIG5vdCBzdXBwb3J0ZWQhXCIpO1xuICB9XG59XG5jb25zdCBCQVNFNjRfUFJFRklYID0gXCJiYXNlNjQ6XCI7XG5mdW5jdGlvbiBzZXJpYWxpemVSYXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjaGVja0J1ZmZlclN1cHBvcnQoKTtcbiAgY29uc3QgYmFzZTY0ID0gQnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICByZXR1cm4gQkFTRTY0X1BSRUZJWCArIGJhc2U2NDtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplUmF3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKEJBU0U2NF9QUkVGSVgpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNoZWNrQnVmZmVyU3VwcG9ydCgpO1xuICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUuc2xpY2UoQkFTRTY0X1BSRUZJWC5sZW5ndGgpLCBcImJhc2U2NFwiKTtcbn1cblxuY29uc3Qgc3RvcmFnZUtleVByb3BlcnRpZXMgPSBbXG4gIFwiaGFzSXRlbVwiLFxuICBcImdldEl0ZW1cIixcbiAgXCJnZXRJdGVtUmF3XCIsXG4gIFwic2V0SXRlbVwiLFxuICBcInNldEl0ZW1SYXdcIixcbiAgXCJyZW1vdmVJdGVtXCIsXG4gIFwiZ2V0TWV0YVwiLFxuICBcInNldE1ldGFcIixcbiAgXCJyZW1vdmVNZXRhXCIsXG4gIFwiZ2V0S2V5c1wiLFxuICBcImNsZWFyXCIsXG4gIFwibW91bnRcIixcbiAgXCJ1bm1vdW50XCJcbl07XG5mdW5jdGlvbiBwcmVmaXhTdG9yYWdlKHN0b3JhZ2UsIGJhc2UpIHtcbiAgYmFzZSA9IG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSk7XG4gIGlmICghYmFzZSkge1xuICAgIHJldHVybiBzdG9yYWdlO1xuICB9XG4gIGNvbnN0IG5zU3RvcmFnZSA9IHsgLi4uc3RvcmFnZSB9O1xuICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHN0b3JhZ2VLZXlQcm9wZXJ0aWVzKSB7XG4gICAgbnNTdG9yYWdlW3Byb3BlcnR5XSA9IChrZXkgPSBcIlwiLCAuLi5hcmdzKSA9PiAoXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzdG9yYWdlW3Byb3BlcnR5XShiYXNlICsga2V5LCAuLi5hcmdzKVxuICAgICk7XG4gIH1cbiAgbnNTdG9yYWdlLmdldEtleXMgPSAoa2V5ID0gXCJcIiwgLi4uYXJndW1lbnRzXykgPT4gc3RvcmFnZS5nZXRLZXlzKGJhc2UgKyBrZXksIC4uLmFyZ3VtZW50c18pLnRoZW4oKGtleXMpID0+IGtleXMubWFwKChrZXkyKSA9PiBrZXkyLnNsaWNlKGJhc2UubGVuZ3RoKSkpO1xuICByZXR1cm4gbnNTdG9yYWdlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJldHVybiBrZXkuc3BsaXQoXCI/XCIpWzBdLnJlcGxhY2UoL1svXFxcXF0vZywgXCI6XCIpLnJlcGxhY2UoLzorL2csIFwiOlwiKS5yZXBsYWNlKC9eOnw6JC9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGpvaW5LZXlzKC4uLmtleXMpIHtcbiAgcmV0dXJuIG5vcm1hbGl6ZUtleShrZXlzLmpvaW4oXCI6XCIpKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSkge1xuICBiYXNlID0gbm9ybWFsaXplS2V5KGJhc2UpO1xuICByZXR1cm4gYmFzZSA/IGJhc2UgKyBcIjpcIiA6IFwiXCI7XG59XG5cbmV4cG9ydCB7IG5vcm1hbGl6ZUtleSBhcyBhLCBhc3luY0NhbGwgYXMgYiwgc2VyaWFsaXplUmF3IGFzIGMsIGRlc2VyaWFsaXplUmF3IGFzIGQsIGpvaW5LZXlzIGFzIGosIG5vcm1hbGl6ZUJhc2VLZXkgYXMgbiwgcHJlZml4U3RvcmFnZSBhcyBwLCBzdHJpbmdpZnkgYXMgcyB9O1xuIl0sIm5hbWVzIjpbIndyYXBUb1Byb21pc2UiLCJ2YWx1ZSIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImFzeW5jQ2FsbCIsImZ1bmN0aW9uXyIsImFyZ3VtZW50c18iLCJlcnJvciIsInJlamVjdCIsImlzUHJpbWl0aXZlIiwidHlwZSIsImlzUHVyZU9iamVjdCIsInByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc1Byb3RvdHlwZU9mIiwic3RyaW5naWZ5IiwiU3RyaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwiSlNPTiIsInRvSlNPTiIsIkVycm9yIiwiY2hlY2tCdWZmZXJTdXBwb3J0IiwiQnVmZmVyIiwiVHlwZUVycm9yIiwiQkFTRTY0X1BSRUZJWCIsInNlcmlhbGl6ZVJhdyIsImJhc2U2NCIsImZyb20iLCJ0b1N0cmluZyIsImRlc2VyaWFsaXplUmF3Iiwic3RhcnRzV2l0aCIsInNsaWNlIiwibGVuZ3RoIiwic3RvcmFnZUtleVByb3BlcnRpZXMiLCJwcmVmaXhTdG9yYWdlIiwic3RvcmFnZSIsImJhc2UiLCJub3JtYWxpemVCYXNlS2V5IiwibnNTdG9yYWdlIiwicHJvcGVydHkiLCJrZXkiLCJhcmdzIiwiZ2V0S2V5cyIsImtleXMiLCJtYXAiLCJrZXkyIiwibm9ybWFsaXplS2V5Iiwic3BsaXQiLCJyZXBsYWNlIiwiam9pbktleXMiLCJqb2luIiwiYSIsImIiLCJjIiwiZCIsImoiLCJuIiwicCIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\n");

/***/ })

};
;