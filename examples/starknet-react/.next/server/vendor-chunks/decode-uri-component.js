"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/decode-uri-component";
exports.ids = ["vendor-chunks/decode-uri-component"];
exports.modules = {

/***/ "(ssr)/../../node_modules/decode-uri-component/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/decode-uri-component/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar token = \"%[a-f0-9]{2}\";\nvar singleMatcher = new RegExp(\"(\" + token + \")|([^%]+?)\", \"gi\");\nvar multiMatcher = new RegExp(\"(\" + token + \")+\", \"gi\");\nfunction decodeComponents(components, split) {\n    try {\n        // Try to decode the entire string first\n        return [\n            decodeURIComponent(components.join(\"\"))\n        ];\n    } catch (err) {\n    // Do nothing\n    }\n    if (components.length === 1) {\n        return components;\n    }\n    split = split || 1;\n    // Split the array in 2 parts\n    var left = components.slice(0, split);\n    var right = components.slice(split);\n    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\nfunction decode(input) {\n    try {\n        return decodeURIComponent(input);\n    } catch (err) {\n        var tokens = input.match(singleMatcher) || [];\n        for(var i = 1; i < tokens.length; i++){\n            input = decodeComponents(tokens, i).join(\"\");\n            tokens = input.match(singleMatcher) || [];\n        }\n        return input;\n    }\n}\nfunction customDecodeURIComponent(input) {\n    // Keep track of all the replacements and prefill the map with the `BOM`\n    var replaceMap = {\n        \"%FE%FF\": \"��\",\n        \"%FF%FE\": \"��\"\n    };\n    var match = multiMatcher.exec(input);\n    while(match){\n        try {\n            // Decode as big chunks as possible\n            replaceMap[match[0]] = decodeURIComponent(match[0]);\n        } catch (err) {\n            var result = decode(match[0]);\n            if (result !== match[0]) {\n                replaceMap[match[0]] = result;\n            }\n        }\n        match = multiMatcher.exec(input);\n    }\n    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n    replaceMap[\"%C2\"] = \"�\";\n    var entries = Object.keys(replaceMap);\n    for(var i = 0; i < entries.length; i++){\n        // Replace all decoded components\n        var key = entries[i];\n        input = input.replace(new RegExp(key, \"g\"), replaceMap[key]);\n    }\n    return input;\n}\nmodule.exports = function(encodedURI) {\n    if (typeof encodedURI !== \"string\") {\n        throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof encodedURI + \"`\");\n    }\n    try {\n        encodedURI = encodedURI.replace(/\\+/g, \" \");\n        // Try the built in decoder first\n        return decodeURIComponent(encodedURI);\n    } catch (err) {\n        // Fallback to a more advanced decoder\n        return customDecodeURIComponent(encodedURI);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSUEsUUFBUTtBQUNaLElBQUlDLGdCQUFnQixJQUFJQyxPQUFPLE1BQU1GLFFBQVEsY0FBYztBQUMzRCxJQUFJRyxlQUFlLElBQUlELE9BQU8sTUFBTUYsUUFBUSxNQUFNO0FBRWxELFNBQVNJLGlCQUFpQkMsVUFBVSxFQUFFQyxLQUFLO0lBQzFDLElBQUk7UUFDSCx3Q0FBd0M7UUFDeEMsT0FBTztZQUFDQyxtQkFBbUJGLFdBQVdHLElBQUksQ0FBQztTQUFLO0lBQ2pELEVBQUUsT0FBT0MsS0FBSztJQUNiLGFBQWE7SUFDZDtJQUVBLElBQUlKLFdBQVdLLE1BQU0sS0FBSyxHQUFHO1FBQzVCLE9BQU9MO0lBQ1I7SUFFQUMsUUFBUUEsU0FBUztJQUVqQiw2QkFBNkI7SUFDN0IsSUFBSUssT0FBT04sV0FBV08sS0FBSyxDQUFDLEdBQUdOO0lBQy9CLElBQUlPLFFBQVFSLFdBQVdPLEtBQUssQ0FBQ047SUFFN0IsT0FBT1EsTUFBTUMsU0FBUyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQyxFQUFFLEVBQUViLGlCQUFpQk8sT0FBT1AsaUJBQWlCUztBQUNqRjtBQUVBLFNBQVNLLE9BQU9DLEtBQUs7SUFDcEIsSUFBSTtRQUNILE9BQU9aLG1CQUFtQlk7SUFDM0IsRUFBRSxPQUFPVixLQUFLO1FBQ2IsSUFBSVcsU0FBU0QsTUFBTUUsS0FBSyxDQUFDcEIsa0JBQWtCLEVBQUU7UUFFN0MsSUFBSyxJQUFJcUIsSUFBSSxHQUFHQSxJQUFJRixPQUFPVixNQUFNLEVBQUVZLElBQUs7WUFDdkNILFFBQVFmLGlCQUFpQmdCLFFBQVFFLEdBQUdkLElBQUksQ0FBQztZQUV6Q1ksU0FBU0QsTUFBTUUsS0FBSyxDQUFDcEIsa0JBQWtCLEVBQUU7UUFDMUM7UUFFQSxPQUFPa0I7SUFDUjtBQUNEO0FBRUEsU0FBU0kseUJBQXlCSixLQUFLO0lBQ3RDLHdFQUF3RTtJQUN4RSxJQUFJSyxhQUFhO1FBQ2hCLFVBQVU7UUFDVixVQUFVO0lBQ1g7SUFFQSxJQUFJSCxRQUFRbEIsYUFBYXNCLElBQUksQ0FBQ047SUFDOUIsTUFBT0UsTUFBTztRQUNiLElBQUk7WUFDSCxtQ0FBbUM7WUFDbkNHLFVBQVUsQ0FBQ0gsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHZCxtQkFBbUJjLEtBQUssQ0FBQyxFQUFFO1FBQ25ELEVBQUUsT0FBT1osS0FBSztZQUNiLElBQUlpQixTQUFTUixPQUFPRyxLQUFLLENBQUMsRUFBRTtZQUU1QixJQUFJSyxXQUFXTCxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUN4QkcsVUFBVSxDQUFDSCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUdLO1lBQ3hCO1FBQ0Q7UUFFQUwsUUFBUWxCLGFBQWFzQixJQUFJLENBQUNOO0lBQzNCO0lBRUEseUdBQXlHO0lBQ3pHSyxVQUFVLENBQUMsTUFBTSxHQUFHO0lBRXBCLElBQUlHLFVBQVVDLE9BQU9DLElBQUksQ0FBQ0w7SUFFMUIsSUFBSyxJQUFJRixJQUFJLEdBQUdBLElBQUlLLFFBQVFqQixNQUFNLEVBQUVZLElBQUs7UUFDeEMsaUNBQWlDO1FBQ2pDLElBQUlRLE1BQU1ILE9BQU8sQ0FBQ0wsRUFBRTtRQUNwQkgsUUFBUUEsTUFBTVksT0FBTyxDQUFDLElBQUk3QixPQUFPNEIsS0FBSyxNQUFNTixVQUFVLENBQUNNLElBQUk7SUFDNUQ7SUFFQSxPQUFPWDtBQUNSO0FBRUFhLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxVQUFVO0lBQ3BDLElBQUksT0FBT0EsZUFBZSxVQUFVO1FBQ25DLE1BQU0sSUFBSUMsVUFBVSx3REFBd0QsT0FBT0QsYUFBYTtJQUNqRztJQUVBLElBQUk7UUFDSEEsYUFBYUEsV0FBV0gsT0FBTyxDQUFDLE9BQU87UUFFdkMsaUNBQWlDO1FBQ2pDLE9BQU94QixtQkFBbUIyQjtJQUMzQixFQUFFLE9BQU96QixLQUFLO1FBQ2Isc0NBQXNDO1FBQ3RDLE9BQU9jLHlCQUF5Qlc7SUFDakM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJrbmV0LXJlYWN0Ly4uLy4uL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcz83ZmIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJyl8KFteJV0rPyknLCAnZ2knKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIFtkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSldO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpIHx8IFtdO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iXSwibmFtZXMiOlsidG9rZW4iLCJzaW5nbGVNYXRjaGVyIiwiUmVnRXhwIiwibXVsdGlNYXRjaGVyIiwiZGVjb2RlQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJzcGxpdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJlcnIiLCJsZW5ndGgiLCJsZWZ0Iiwic2xpY2UiLCJyaWdodCIsIkFycmF5IiwicHJvdG90eXBlIiwiY29uY2F0IiwiY2FsbCIsImRlY29kZSIsImlucHV0IiwidG9rZW5zIiwibWF0Y2giLCJpIiwiY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZU1hcCIsImV4ZWMiLCJyZXN1bHQiLCJlbnRyaWVzIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW5jb2RlZFVSSSIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/decode-uri-component/index.js\n");

/***/ })

};
;