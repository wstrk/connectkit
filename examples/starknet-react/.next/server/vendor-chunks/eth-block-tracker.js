"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-block-tracker";
exports.ids = ["vendor-chunks/eth-block-tracker"];
exports.modules = {

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseBlockTracker = void 0;\nconst safe_event_emitter_1 = __importDefault(__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/../../node_modules/@metamask/safe-event-emitter/index.js\"));\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends safe_event_emitter_1.default {\n    constructor(opts){\n        super();\n        // config\n        this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n        this._usePastBlocks = opts.usePastBlocks || false;\n        // state\n        this._currentBlock = null;\n        this._isRunning = false;\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    async destroy() {\n        this._cancelBlockResetTimeout();\n        await this._maybeEnd();\n        super.removeAllListeners();\n    }\n    isRunning() {\n        return this._isRunning;\n    }\n    getCurrentBlock() {\n        return this._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this._currentBlock) {\n            return this._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>this.once(\"latest\", resolve));\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        // perform default behavior, preserve fn arity\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotence\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"newListener\", this._onNewListener);\n        this.on(\"removeListener\", this._onRemoveListener);\n    }\n    _onNewListener(eventName) {\n        // `newListener` is called *before* the listener is added\n        if (blockTrackerEvents.includes(eventName)) {\n            this._maybeStart();\n        }\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    async _maybeStart() {\n        if (this._isRunning) {\n            return;\n        }\n        this._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        await this._start();\n        this.emit(\"_started\");\n    }\n    async _maybeEnd() {\n        if (!this._isRunning) {\n            return;\n        }\n        this._isRunning = false;\n        this._setupBlockResetTimeout();\n        await this._end();\n        this.emit(\"_ended\");\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _shouldUseNewBlock(newBlock) {\n        const currentBlock = this._currentBlock;\n        if (!currentBlock) {\n            return true;\n        }\n        const newBlockInt = hexToInt(newBlock);\n        const currentBlockInt = hexToInt(currentBlock);\n        return this._usePastBlocks && newBlockInt < currentBlockInt || newBlockInt > currentBlockInt;\n    }\n    _newPotentialLatest(newBlock) {\n        if (!this._shouldUseNewBlock(newBlock)) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this._currentBlock;\n        this._currentBlock = newBlock;\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this._currentBlock = null;\n    }\n}\nexports.BaseBlockTracker = BaseBlockTracker;\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */ function hexToInt(hexInt) {\n    return Number.parseInt(hexInt, 16);\n} //# sourceMappingURL=BaseBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js":
/*!************************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/../../node_modules/json-rpc-random-id/index.js\"));\nconst pify_1 = __importDefault(__webpack_require__(/*! pify */ \"(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst logging_utils_1 = __webpack_require__(/*! ./logging-utils */ \"(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, \"polling-block-tracker\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        var _a;\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"PollingBlockTracker - no provider specified.\");\n        }\n        super(Object.assign(Object.assign({}, opts), {\n            blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval\n        }));\n        // config\n        this._provider = opts.provider;\n        this._pollingInterval = opts.pollingInterval || 20 * sec;\n        this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n        this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n        this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    }\n    // trigger block polling\n    async checkForLatestBlock() {\n        await this._updateLatestBlock();\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        this._synchronize();\n    }\n    async _end() {\n    // No-op\n    }\n    async _synchronize() {\n        var _a;\n        while(this._isRunning){\n            try {\n                await this._updateLatestBlock();\n                const promise = timeout(this._pollingInterval, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            } catch (err) {\n                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${(_a = err.stack) !== null && _a !== void 0 ? _a : err}`);\n                try {\n                    this.emit(\"error\", newErr);\n                } catch (emitErr) {\n                    console.error(newErr);\n                }\n                const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            }\n        }\n    }\n    async _updateLatestBlock() {\n        // fetch + set latest block\n        const latestBlock = await this._fetchLatestBlock();\n        this._newPotentialLatest(latestBlock);\n    }\n    async _fetchLatestBlock() {\n        const req = {\n            jsonrpc: \"2.0\",\n            id: createRandomId(),\n            method: \"eth_blockNumber\",\n            params: []\n        };\n        if (this._setSkipCacheFlag) {\n            req.skipCache = true;\n        }\n        log(\"Making request\", req);\n        const res = await (0, pify_1.default)((cb)=>this._provider.sendAsync(req, cb))();\n        log(\"Got response\", res);\n        if (res.error) {\n            throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`);\n        }\n        return res.result;\n    }\n}\nexports.PollingBlockTracker = PollingBlockTracker;\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */ function timeout(duration, unref) {\n    return new Promise((resolve)=>{\n        const timeoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timeoutRef.unref && unref) {\n            timeoutRef.unref();\n        }\n    });\n} //# sourceMappingURL=PollingBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvUG9sbGluZ0Jsb2NrVHJhY2tlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxNQUFNRyx1QkFBdUJSLGdCQUFnQlMsbUJBQU9BLENBQUMsZ0ZBQW9CO0FBQ3pFLE1BQU1DLFNBQVNWLGdCQUFnQlMsbUJBQU9BLENBQUMsbUZBQU07QUFDN0MsTUFBTUUscUJBQXFCRixtQkFBT0EsQ0FBQywrRkFBb0I7QUFDdkQsTUFBTUcsa0JBQWtCSCxtQkFBT0EsQ0FBQyx5RkFBaUI7QUFDakQsTUFBTUksTUFBTSxDQUFDLEdBQUdELGdCQUFnQkUsa0JBQWtCLEVBQUVGLGdCQUFnQkcsYUFBYSxFQUFFO0FBQ25GLE1BQU1DLGlCQUFpQixDQUFDLEdBQUdSLHFCQUFxQlMsT0FBTztBQUN2RCxNQUFNQyxNQUFNO0FBQ1osTUFBTVgsNEJBQTRCSSxtQkFBbUJRLGdCQUFnQjtJQUNqRUMsWUFBWUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNuQixJQUFJQztRQUNKLHdCQUF3QjtRQUN4QixJQUFJLENBQUNELEtBQUtFLFFBQVEsRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxLQUFLLENBQUNyQixPQUFPc0IsTUFBTSxDQUFDdEIsT0FBT3NCLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLE9BQU87WUFBRUssb0JBQW9CLENBQUNKLEtBQUtELEtBQUtLLGtCQUFrQixNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJQSxLQUFLRCxLQUFLTSxlQUFlO1FB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LEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcmtuZXQtcmVhY3QvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvUG9sbGluZ0Jsb2NrVHJhY2tlci5qcz8xYWIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2xsaW5nQmxvY2tUcmFja2VyID0gdm9pZCAwO1xuY29uc3QganNvbl9ycGNfcmFuZG9tX2lkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpzb24tcnBjLXJhbmRvbS1pZFwiKSk7XG5jb25zdCBwaWZ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBpZnlcIikpO1xuY29uc3QgQmFzZUJsb2NrVHJhY2tlcl8xID0gcmVxdWlyZShcIi4vQmFzZUJsb2NrVHJhY2tlclwiKTtcbmNvbnN0IGxvZ2dpbmdfdXRpbHNfMSA9IHJlcXVpcmUoXCIuL2xvZ2dpbmctdXRpbHNcIik7XG5jb25zdCBsb2cgPSAoMCwgbG9nZ2luZ191dGlsc18xLmNyZWF0ZU1vZHVsZUxvZ2dlcikobG9nZ2luZ191dGlsc18xLnByb2plY3RMb2dnZXIsICdwb2xsaW5nLWJsb2NrLXRyYWNrZXInKTtcbmNvbnN0IGNyZWF0ZVJhbmRvbUlkID0gKDAsIGpzb25fcnBjX3JhbmRvbV9pZF8xLmRlZmF1bHQpKCk7XG5jb25zdCBzZWMgPSAxMDAwO1xuY2xhc3MgUG9sbGluZ0Jsb2NrVHJhY2tlciBleHRlbmRzIEJhc2VCbG9ja1RyYWNrZXJfMS5CYXNlQmxvY2tUcmFja2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBwYXJzZSArIHZhbGlkYXRlIGFyZ3NcbiAgICAgICAgaWYgKCFvcHRzLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvbGxpbmdCbG9ja1RyYWNrZXIgLSBubyBwcm92aWRlciBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRzKSwgeyBibG9ja1Jlc2V0RHVyYXRpb246IChfYSA9IG9wdHMuYmxvY2tSZXNldER1cmF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRzLnBvbGxpbmdJbnRlcnZhbCB9KSk7XG4gICAgICAgIC8vIGNvbmZpZ1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IG9wdHMucHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX3BvbGxpbmdJbnRlcnZhbCA9IG9wdHMucG9sbGluZ0ludGVydmFsIHx8IDIwICogc2VjO1xuICAgICAgICB0aGlzLl9yZXRyeVRpbWVvdXQgPSBvcHRzLnJldHJ5VGltZW91dCB8fCB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwgLyAxMDtcbiAgICAgICAgdGhpcy5fa2VlcEV2ZW50TG9vcEFjdGl2ZSA9XG4gICAgICAgICAgICBvcHRzLmtlZXBFdmVudExvb3BBY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLmtlZXBFdmVudExvb3BBY3RpdmU7XG4gICAgICAgIHRoaXMuX3NldFNraXBDYWNoZUZsYWcgPSBvcHRzLnNldFNraXBDYWNoZUZsYWcgfHwgZmFsc2U7XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgYmxvY2sgcG9sbGluZ1xuICAgIGFzeW5jIGNoZWNrRm9yTGF0ZXN0QmxvY2soKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUxhdGVzdEJsb2NrKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldExhdGVzdEJsb2NrKCk7XG4gICAgfVxuICAgIGFzeW5jIF9zdGFydCgpIHtcbiAgICAgICAgdGhpcy5fc3luY2hyb25pemUoKTtcbiAgICB9XG4gICAgYXN5bmMgX2VuZCgpIHtcbiAgICAgICAgLy8gTm8tb3BcbiAgICB9XG4gICAgYXN5bmMgX3N5bmNocm9uaXplKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHdoaWxlICh0aGlzLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlTGF0ZXN0QmxvY2soKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gdGltZW91dCh0aGlzLl9wb2xsaW5nSW50ZXJ2YWwsICF0aGlzLl9rZWVwRXZlbnRMb29wQWN0aXZlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ193YWl0aW5nRm9yTmV4dEl0ZXJhdGlvbicpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RXJyID0gbmV3IEVycm9yKGBQb2xsaW5nQmxvY2tUcmFja2VyIC0gZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgYXR0ZW1wdGluZyB0byB1cGRhdGUgbGF0ZXN0IGJsb2NrOlxcbiR7KF9hID0gZXJyLnN0YWNrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlcnJ9YCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ld0Vycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlbWl0RXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3RXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRpbWVvdXQodGhpcy5fcmV0cnlUaW1lb3V0LCAhdGhpcy5fa2VlcEV2ZW50TG9vcEFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdfd2FpdGluZ0Zvck5leHRJdGVyYXRpb24nKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF91cGRhdGVMYXRlc3RCbG9jaygpIHtcbiAgICAgICAgLy8gZmV0Y2ggKyBzZXQgbGF0ZXN0IGJsb2NrXG4gICAgICAgIGNvbnN0IGxhdGVzdEJsb2NrID0gYXdhaXQgdGhpcy5fZmV0Y2hMYXRlc3RCbG9jaygpO1xuICAgICAgICB0aGlzLl9uZXdQb3RlbnRpYWxMYXRlc3QobGF0ZXN0QmxvY2spO1xuICAgIH1cbiAgICBhc3luYyBfZmV0Y2hMYXRlc3RCbG9jaygpIHtcbiAgICAgICAgY29uc3QgcmVxID0ge1xuICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICBpZDogY3JlYXRlUmFuZG9tSWQoKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9ibG9ja051bWJlcicsXG4gICAgICAgICAgICBwYXJhbXM6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5fc2V0U2tpcENhY2hlRmxhZykge1xuICAgICAgICAgICAgcmVxLnNraXBDYWNoZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbG9nKCdNYWtpbmcgcmVxdWVzdCcsIHJlcSk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0ICgwLCBwaWZ5XzEuZGVmYXVsdCkoKGNiKSA9PiB0aGlzLl9wcm92aWRlci5zZW5kQXN5bmMocmVxLCBjYikpKCk7XG4gICAgICAgIGxvZygnR290IHJlc3BvbnNlJywgcmVzKTtcbiAgICAgICAgaWYgKHJlcy5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQb2xsaW5nQmxvY2tUcmFja2VyIC0gZW5jb3VudGVyZWQgZXJyb3IgZmV0Y2hpbmcgYmxvY2s6XFxuJHtyZXMuZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLlBvbGxpbmdCbG9ja1RyYWNrZXIgPSBQb2xsaW5nQmxvY2tUcmFja2VyO1xuLyoqXG4gKiBXYWl0cyBmb3IgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdGltZS5cbiAqXG4gKiBAcGFyYW0gZHVyYXRpb24gLSBUaGUgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICogQHBhcmFtIHVucmVmIC0gQXNzdW1pbmcgdGhpcyBmdW5jdGlvbiBpcyBydW4gaW4gYSBOb2RlIGNvbnRleHQsIGdvdmVybnNcbiAqIHdoZXRoZXIgTm9kZSBzaG91bGQgd2FpdCBiZWZvcmUgdGhlIGBzZXRUaW1lb3V0YCBoYXMgY29tcGxldGVkIGJlZm9yZSBlbmRpbmdcbiAqIHRoZSBwcm9jZXNzICh0cnVlIGZvciBubywgZmFsc2UgZm9yIHllcykuIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gd2FpdC5cbiAqL1xuZnVuY3Rpb24gdGltZW91dChkdXJhdGlvbiwgdW5yZWYpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgY29uc3QgdGltZW91dFJlZiA9IHNldFRpbWVvdXQocmVzb2x2ZSwgZHVyYXRpb24pO1xuICAgICAgICAvLyBkb24ndCBrZWVwIHByb2Nlc3Mgb3BlblxuICAgICAgICBpZiAodGltZW91dFJlZi51bnJlZiAmJiB1bnJlZikge1xuICAgICAgICAgICAgdGltZW91dFJlZi51bnJlZigpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb2xsaW5nQmxvY2tUcmFja2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQb2xsaW5nQmxvY2tUcmFja2VyIiwianNvbl9ycGNfcmFuZG9tX2lkXzEiLCJyZXF1aXJlIiwicGlmeV8xIiwiQmFzZUJsb2NrVHJhY2tlcl8xIiwibG9nZ2luZ191dGlsc18xIiwibG9nIiwiY3JlYXRlTW9kdWxlTG9nZ2VyIiwicHJvamVjdExvZ2dlciIsImNyZWF0ZVJhbmRvbUlkIiwiZGVmYXVsdCIsInNlYyIsIkJhc2VCbG9ja1RyYWNrZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJfYSIsInByb3ZpZGVyIiwiRXJyb3IiLCJhc3NpZ24iLCJibG9ja1Jlc2V0RHVyYXRpb24iLCJwb2xsaW5nSW50ZXJ2YWwiLCJfcHJvdmlkZXIiLCJfcG9sbGluZ0ludGVydmFsIiwiX3JldHJ5VGltZW91dCIsInJldHJ5VGltZW91dCIsIl9rZWVwRXZlbnRMb29wQWN0aXZlIiwia2VlcEV2ZW50TG9vcEFjdGl2ZSIsInVuZGVmaW5lZCIsIl9zZXRTa2lwQ2FjaGVGbGFnIiwic2V0U2tpcENhY2hlRmxhZyIsImNoZWNrRm9yTGF0ZXN0QmxvY2siLCJfdXBkYXRlTGF0ZXN0QmxvY2siLCJnZXRMYXRlc3RCbG9jayIsIl9zdGFydCIsIl9zeW5jaHJvbml6ZSIsIl9lbmQiLCJfaXNSdW5uaW5nIiwicHJvbWlzZSIsInRpbWVvdXQiLCJlbWl0IiwiZXJyIiwibmV3RXJyIiwic3RhY2siLCJlbWl0RXJyIiwiY29uc29sZSIsImVycm9yIiwibGF0ZXN0QmxvY2siLCJfZmV0Y2hMYXRlc3RCbG9jayIsIl9uZXdQb3RlbnRpYWxMYXRlc3QiLCJyZXEiLCJqc29ucnBjIiwiaWQiLCJtZXRob2QiLCJwYXJhbXMiLCJza2lwQ2FjaGUiLCJyZXMiLCJjYiIsInNlbmRBc3luYyIsIm1lc3NhZ2UiLCJyZXN1bHQiLCJkdXJhdGlvbiIsInVucmVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aW1lb3V0UmVmIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SubscribeBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/../../node_modules/json-rpc-random-id/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nclass SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"SubscribeBlockTracker - no provider specified.\");\n        }\n        // BaseBlockTracker constructor\n        super(opts);\n        // config\n        this._provider = opts.provider;\n        this._subscriptionId = null;\n    }\n    async checkForLatestBlock() {\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        if (this._subscriptionId === undefined || this._subscriptionId === null) {\n            try {\n                const blockNumber = await this._call(\"eth_blockNumber\");\n                this._subscriptionId = await this._call(\"eth_subscribe\", \"newHeads\");\n                this._provider.on(\"data\", this._handleSubData.bind(this));\n                this._newPotentialLatest(blockNumber);\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    async _end() {\n        if (this._subscriptionId !== null && this._subscriptionId !== undefined) {\n            try {\n                await this._call(\"eth_unsubscribe\", this._subscriptionId);\n                this._subscriptionId = null;\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    _call(method, ...params) {\n        return new Promise((resolve, reject)=>{\n            this._provider.sendAsync({\n                id: createRandomId(),\n                method,\n                params,\n                jsonrpc: \"2.0\"\n            }, (err, res)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(res.result);\n                }\n            });\n        });\n    }\n    _handleSubData(_, response) {\n        var _a;\n        if (response.method === \"eth_subscription\" && ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {\n            this._newPotentialLatest(response.params.result.number);\n        }\n    }\n}\nexports.SubscribeBlockTracker = SubscribeBlockTracker; //# sourceMappingURL=SubscribeBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvU3Vic2NyaWJlQmxvY2tUcmFja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLE1BQU1HLHVCQUF1QlIsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxnRkFBb0I7QUFDekUsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQywrRkFBb0I7QUFDdkQsTUFBTUUsaUJBQWlCLENBQUMsR0FBR0gscUJBQXFCSSxPQUFPO0FBQ3ZELE1BQU1MLDhCQUE4QkcsbUJBQW1CRyxnQkFBZ0I7SUFDbkVDLFlBQVlDLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDbkIsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQ0EsS0FBS0MsUUFBUSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLCtCQUErQjtRQUMvQixLQUFLLENBQUNGO1FBQ04sU0FBUztRQUNULElBQUksQ0FBQ0csU0FBUyxHQUFHSCxLQUFLQyxRQUFRO1FBQzlCLElBQUksQ0FBQ0csZUFBZSxHQUFHO0lBQzNCO0lBQ0EsTUFBTUMsc0JBQXNCO1FBQ3hCLE9BQU8sTUFBTSxJQUFJLENBQUNDLGNBQWM7SUFDcEM7SUFDQSxNQUFNQyxTQUFTO1FBQ1gsSUFBSSxJQUFJLENBQUNILGVBQWUsS0FBS0ksYUFBYSxJQUFJLENBQUNKLGVBQWUsS0FBSyxNQUFNO1lBQ3JFLElBQUk7Z0JBQ0EsTUFBTUssY0FBZSxNQUFNLElBQUksQ0FBQ0MsS0FBSyxDQUFDO2dCQUN0QyxJQUFJLENBQUNOLGVBQWUsR0FBSSxNQUFNLElBQUksQ0FBQ00sS0FBSyxDQUFDLGlCQUFpQjtnQkFDMUQsSUFBSSxDQUFDUCxTQUFTLENBQUNRLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSTtnQkFDdkQsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0w7WUFDN0IsRUFDQSxPQUFPTSxHQUFHO2dCQUNOLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVNEO1lBQ3ZCO1FBQ0o7SUFDSjtJQUNBLE1BQU1FLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQ2IsZUFBZSxLQUFLLFFBQVEsSUFBSSxDQUFDQSxlQUFlLEtBQUtJLFdBQVc7WUFDckUsSUFBSTtnQkFDQSxNQUFNLElBQUksQ0FBQ0UsS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUNOLGVBQWU7Z0JBQ3hELElBQUksQ0FBQ0EsZUFBZSxHQUFHO1lBQzNCLEVBQ0EsT0FBT1csR0FBRztnQkFDTixJQUFJLENBQUNDLElBQUksQ0FBQyxTQUFTRDtZQUN2QjtRQUNKO0lBQ0o7SUFDQUwsTUFBTVEsTUFBTSxFQUFFLEdBQUdDLE1BQU0sRUFBRTtRQUNyQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDekIsSUFBSSxDQUFDbkIsU0FBUyxDQUFDb0IsU0FBUyxDQUFDO2dCQUNyQkMsSUFBSTVCO2dCQUNKc0I7Z0JBQ0FDO2dCQUNBTSxTQUFTO1lBQ2IsR0FBRyxDQUFDQyxLQUFLQztnQkFDTCxJQUFJRCxLQUFLO29CQUNMSixPQUFPSTtnQkFDWCxPQUNLO29CQUNETCxRQUFRTSxJQUFJQyxNQUFNO2dCQUN0QjtZQUNKO1FBQ0o7SUFDSjtJQUNBaEIsZUFBZWlCLENBQUMsRUFBRUMsUUFBUSxFQUFFO1FBQ3hCLElBQUlDO1FBQ0osSUFBSUQsU0FBU1osTUFBTSxLQUFLLHNCQUNwQixDQUFDLENBQUNhLEtBQUtELFNBQVNYLE1BQU0sTUFBTSxRQUFRWSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLFlBQVksTUFBTSxJQUFJLENBQUM1QixlQUFlLEVBQUU7WUFDeEcsSUFBSSxDQUFDVSxtQkFBbUIsQ0FBQ2dCLFNBQVNYLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDSyxNQUFNO1FBQzFEO0lBQ0o7QUFDSjtBQUNBM0MsNkJBQTZCLEdBQUdFLHVCQUNoQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFya25ldC1yZWFjdC8uLi8uLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9TdWJzY3JpYmVCbG9ja1RyYWNrZXIuanM/ZDdkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Vic2NyaWJlQmxvY2tUcmFja2VyID0gdm9pZCAwO1xuY29uc3QganNvbl9ycGNfcmFuZG9tX2lkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpzb24tcnBjLXJhbmRvbS1pZFwiKSk7XG5jb25zdCBCYXNlQmxvY2tUcmFja2VyXzEgPSByZXF1aXJlKFwiLi9CYXNlQmxvY2tUcmFja2VyXCIpO1xuY29uc3QgY3JlYXRlUmFuZG9tSWQgPSAoMCwganNvbl9ycGNfcmFuZG9tX2lkXzEuZGVmYXVsdCkoKTtcbmNsYXNzIFN1YnNjcmliZUJsb2NrVHJhY2tlciBleHRlbmRzIEJhc2VCbG9ja1RyYWNrZXJfMS5CYXNlQmxvY2tUcmFja2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgLy8gcGFyc2UgKyB2YWxpZGF0ZSBhcmdzXG4gICAgICAgIGlmICghb3B0cy5wcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdWJzY3JpYmVCbG9ja1RyYWNrZXIgLSBubyBwcm92aWRlciBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmFzZUJsb2NrVHJhY2tlciBjb25zdHJ1Y3RvclxuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgLy8gY29uZmlnXG4gICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gb3B0cy5wcm92aWRlcjtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uSWQgPSBudWxsO1xuICAgIH1cbiAgICBhc3luYyBjaGVja0ZvckxhdGVzdEJsb2NrKCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMYXRlc3RCbG9jaygpO1xuICAgIH1cbiAgICBhc3luYyBfc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25JZCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3N1YnNjcmlwdGlvbklkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gKGF3YWl0IHRoaXMuX2NhbGwoJ2V0aF9ibG9ja051bWJlcicpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25JZCA9IChhd2FpdCB0aGlzLl9jYWxsKCdldGhfc3Vic2NyaWJlJywgJ25ld0hlYWRzJykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVyLm9uKCdkYXRhJywgdGhpcy5faGFuZGxlU3ViRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXdQb3RlbnRpYWxMYXRlc3QoYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbklkICE9PSBudWxsICYmIHRoaXMuX3N1YnNjcmlwdGlvbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fY2FsbCgnZXRoX3Vuc3Vic2NyaWJlJywgdGhpcy5fc3Vic2NyaXB0aW9uSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbklkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9jYWxsKG1ldGhvZCwgLi4ucGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcm92aWRlci5zZW5kQXN5bmMoe1xuICAgICAgICAgICAgICAgIGlkOiBjcmVhdGVSYW5kb21JZCgpLFxuICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICB9LCAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVTdWJEYXRhKF8sIHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm1ldGhvZCA9PT0gJ2V0aF9zdWJzY3JpcHRpb24nICYmXG4gICAgICAgICAgICAoKF9hID0gcmVzcG9uc2UucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaXB0aW9uKSA9PT0gdGhpcy5fc3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25ld1BvdGVudGlhbExhdGVzdChyZXNwb25zZS5wYXJhbXMucmVzdWx0Lm51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN1YnNjcmliZUJsb2NrVHJhY2tlciA9IFN1YnNjcmliZUJsb2NrVHJhY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZUJsb2NrVHJhY2tlci5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU3Vic2NyaWJlQmxvY2tUcmFja2VyIiwianNvbl9ycGNfcmFuZG9tX2lkXzEiLCJyZXF1aXJlIiwiQmFzZUJsb2NrVHJhY2tlcl8xIiwiY3JlYXRlUmFuZG9tSWQiLCJkZWZhdWx0IiwiQmFzZUJsb2NrVHJhY2tlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInByb3ZpZGVyIiwiRXJyb3IiLCJfcHJvdmlkZXIiLCJfc3Vic2NyaXB0aW9uSWQiLCJjaGVja0ZvckxhdGVzdEJsb2NrIiwiZ2V0TGF0ZXN0QmxvY2siLCJfc3RhcnQiLCJ1bmRlZmluZWQiLCJibG9ja051bWJlciIsIl9jYWxsIiwib24iLCJfaGFuZGxlU3ViRGF0YSIsImJpbmQiLCJfbmV3UG90ZW50aWFsTGF0ZXN0IiwiZSIsImVtaXQiLCJfZW5kIiwibWV0aG9kIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZW5kQXN5bmMiLCJpZCIsImpzb25ycGMiLCJlcnIiLCJyZXMiLCJyZXN1bHQiLCJfIiwicmVzcG9uc2UiLCJfYSIsInN1YnNjcmlwdGlvbiIsIm51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./PollingBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/PollingBlockTracker.js\"), exports);\n__exportStar(__webpack_require__(/*! ./SubscribeBlockTracker */ \"(ssr)/../../node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHFHQUF1QixHQUFHTjtBQUMvQ0QsYUFBYU8sbUJBQU9BLENBQUMseUdBQXlCLEdBQUdOLFVBQ2pELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJrbmV0LXJlYWN0Ly4uLy4uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9kaXN0L2luZGV4LmpzP2M1YTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Qb2xsaW5nQmxvY2tUcmFja2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9TdWJzY3JpYmVCbG9ja1RyYWNrZXJcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js":
/*!******************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/dist/logging-utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"(ssr)/../../node_modules/@metamask/utils/dist/index.js\");\nObject.defineProperty(exports, \"createModuleLogger\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.createModuleLogger;\n    }\n}));\nexports.projectLogger = (0, utils_1.createProjectLogger)(\"eth-block-tracker\"); //# sourceMappingURL=logging-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvbG9nZ2luZy11dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDMUQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsK0VBQWlCO0FBQ3pDUCxzREFBcUQ7SUFBRVEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsUUFBUUYsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbklGLHFCQUFxQixHQUFHLENBQUMsR0FBR0ksUUFBUUksbUJBQW1CLEVBQUUsc0JBQ3pELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJrbmV0LXJlYWN0Ly4uLy4uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9kaXN0L2xvZ2dpbmctdXRpbHMuanM/NWRhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTW9kdWxlTG9nZ2VyID0gZXhwb3J0cy5wcm9qZWN0TG9nZ2VyID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVNb2R1bGVMb2dnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuY3JlYXRlTW9kdWxlTG9nZ2VyOyB9IH0pO1xuZXhwb3J0cy5wcm9qZWN0TG9nZ2VyID0gKDAsIHV0aWxzXzEuY3JlYXRlUHJvamVjdExvZ2dlcikoJ2V0aC1ibG9jay10cmFja2VyJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnaW5nLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZU1vZHVsZUxvZ2dlciIsInByb2plY3RMb2dnZXIiLCJ1dGlsc18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJjcmVhdGVQcm9qZWN0TG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/dist/logging-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/eth-block-tracker/node_modules/pify/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nconst processFn = (fn, opts)=>function() {\n        const P = opts.promiseModule;\n        const args = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; i++){\n            args[i] = arguments[i];\n        }\n        return new P((resolve, reject)=>{\n            if (opts.errorFirst) {\n                args.push(function(err, result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 1; i < arguments.length; i++){\n                            results[i - 1] = arguments[i];\n                        }\n                        if (err) {\n                            results.unshift(err);\n                            reject(results);\n                        } else {\n                            resolve(results);\n                        }\n                    } else if (err) {\n                        reject(err);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else {\n                args.push(function(result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 0; i < arguments.length; i++){\n                            results[i] = arguments[i];\n                        }\n                        resolve(results);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            }\n            fn.apply(this, args);\n        });\n    };\nmodule.exports = (obj, opts)=>{\n    opts = Object.assign({\n        exclude: [\n            /.+(Sync|Stream)$/\n        ],\n        errorFirst: true,\n        promiseModule: Promise\n    }, opts);\n    const filter = (key)=>{\n        const match = (pattern)=>typeof pattern === \"string\" ? key === pattern : pattern.test(key);\n        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n    };\n    let ret;\n    if (typeof obj === \"function\") {\n        ret = function() {\n            if (opts.excludeMain) {\n                return obj.apply(this, arguments);\n            }\n            return processFn(obj, opts).apply(this, arguments);\n        };\n    } else {\n        ret = Object.create(Object.getPrototypeOf(obj));\n    }\n    for(const key in obj){\n        const x = obj[key];\n        ret[key] = typeof x === \"function\" && filter(key) ? processFn(x, opts) : x;\n    }\n    return ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL25vZGVfbW9kdWxlcy9waWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsWUFBWSxDQUFDQyxJQUFJQyxPQUFTO1FBQy9CLE1BQU1DLElBQUlELEtBQUtFLGFBQWE7UUFDNUIsTUFBTUMsT0FBTyxJQUFJQyxNQUFNQyxVQUFVQyxNQUFNO1FBRXZDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixVQUFVQyxNQUFNLEVBQUVDLElBQUs7WUFDMUNKLElBQUksQ0FBQ0ksRUFBRSxHQUFHRixTQUFTLENBQUNFLEVBQUU7UUFDdkI7UUFFQSxPQUFPLElBQUlOLEVBQUUsQ0FBQ08sU0FBU0M7WUFDdEIsSUFBSVQsS0FBS1UsVUFBVSxFQUFFO2dCQUNwQlAsS0FBS1EsSUFBSSxDQUFDLFNBQVVDLEdBQUcsRUFBRUMsTUFBTTtvQkFDOUIsSUFBSWIsS0FBS2MsU0FBUyxFQUFFO3dCQUNuQixNQUFNQyxVQUFVLElBQUlYLE1BQU1DLFVBQVVDLE1BQU0sR0FBRzt3QkFFN0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVDLE1BQU0sRUFBRUMsSUFBSzs0QkFDMUNRLE9BQU8sQ0FBQ1IsSUFBSSxFQUFFLEdBQUdGLFNBQVMsQ0FBQ0UsRUFBRTt3QkFDOUI7d0JBRUEsSUFBSUssS0FBSzs0QkFDUkcsUUFBUUMsT0FBTyxDQUFDSjs0QkFDaEJILE9BQU9NO3dCQUNSLE9BQU87NEJBQ05QLFFBQVFPO3dCQUNUO29CQUNELE9BQU8sSUFBSUgsS0FBSzt3QkFDZkgsT0FBT0c7b0JBQ1IsT0FBTzt3QkFDTkosUUFBUUs7b0JBQ1Q7Z0JBQ0Q7WUFDRCxPQUFPO2dCQUNOVixLQUFLUSxJQUFJLENBQUMsU0FBVUUsTUFBTTtvQkFDekIsSUFBSWIsS0FBS2MsU0FBUyxFQUFFO3dCQUNuQixNQUFNQyxVQUFVLElBQUlYLE1BQU1DLFVBQVVDLE1BQU0sR0FBRzt3QkFFN0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVDLE1BQU0sRUFBRUMsSUFBSzs0QkFDMUNRLE9BQU8sQ0FBQ1IsRUFBRSxHQUFHRixTQUFTLENBQUNFLEVBQUU7d0JBQzFCO3dCQUVBQyxRQUFRTztvQkFDVCxPQUFPO3dCQUNOUCxRQUFRSztvQkFDVDtnQkFDRDtZQUNEO1lBRUFkLEdBQUdrQixLQUFLLENBQUMsSUFBSSxFQUFFZDtRQUNoQjtJQUNEO0FBRUFlLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxLQUFLcEI7SUFDdEJBLE9BQU9xQixPQUFPQyxNQUFNLENBQUM7UUFDcEJDLFNBQVM7WUFBQztTQUFtQjtRQUM3QmIsWUFBWTtRQUNaUixlQUFlc0I7SUFDaEIsR0FBR3hCO0lBRUgsTUFBTXlCLFNBQVNDLENBQUFBO1FBQ2QsTUFBTUMsUUFBUUMsQ0FBQUEsVUFBVyxPQUFPQSxZQUFZLFdBQVdGLFFBQVFFLFVBQVVBLFFBQVFDLElBQUksQ0FBQ0g7UUFDdEYsT0FBTzFCLEtBQUs4QixPQUFPLEdBQUc5QixLQUFLOEIsT0FBTyxDQUFDQyxJQUFJLENBQUNKLFNBQVMsQ0FBQzNCLEtBQUt1QixPQUFPLENBQUNRLElBQUksQ0FBQ0o7SUFDckU7SUFFQSxJQUFJSztJQUNKLElBQUksT0FBT1osUUFBUSxZQUFZO1FBQzlCWSxNQUFNO1lBQ0wsSUFBSWhDLEtBQUtpQyxXQUFXLEVBQUU7Z0JBQ3JCLE9BQU9iLElBQUlILEtBQUssQ0FBQyxJQUFJLEVBQUVaO1lBQ3hCO1lBRUEsT0FBT1AsVUFBVXNCLEtBQUtwQixNQUFNaUIsS0FBSyxDQUFDLElBQUksRUFBRVo7UUFDekM7SUFDRCxPQUFPO1FBQ04yQixNQUFNWCxPQUFPYSxNQUFNLENBQUNiLE9BQU9jLGNBQWMsQ0FBQ2Y7SUFDM0M7SUFFQSxJQUFLLE1BQU1NLE9BQU9OLElBQUs7UUFDdEIsTUFBTWdCLElBQUloQixHQUFHLENBQUNNLElBQUk7UUFDbEJNLEdBQUcsQ0FBQ04sSUFBSSxHQUFHLE9BQU9VLE1BQU0sY0FBY1gsT0FBT0MsT0FBTzVCLFVBQVVzQyxHQUFHcEMsUUFBUW9DO0lBQzFFO0lBRUEsT0FBT0o7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJrbmV0LXJlYWN0Ly4uLy4uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9ub2RlX21vZHVsZXMvcGlmeS9pbmRleC5qcz8wZTkzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcHJvY2Vzc0ZuID0gKGZuLCBvcHRzKSA9PiBmdW5jdGlvbiAoKSB7XG5cdGNvbnN0IFAgPSBvcHRzLnByb21pc2VNb2R1bGU7XG5cdGNvbnN0IGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBQKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRpZiAob3B0cy5lcnJvckZpcnN0KSB7XG5cdFx0XHRhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG5cdFx0XHRcdGlmIChvcHRzLm11bHRpQXJncykge1xuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHJlc3VsdHNbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRcdHJlc3VsdHMudW5zaGlmdChlcnIpO1xuXHRcdFx0XHRcdFx0cmVqZWN0KHJlc3VsdHMpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChlcnIpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhcmdzLnB1c2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAob3B0cy5tdWx0aUFyZ3MpIHtcblx0XHRcdFx0XHRjb25zdCByZXN1bHRzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0cyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmbi5hcHBseSh0aGlzLCBhcmdzKTtcblx0fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChvYmosIG9wdHMpID0+IHtcblx0b3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGV4Y2x1ZGU6IFsvLisoU3luY3xTdHJlYW0pJC9dLFxuXHRcdGVycm9yRmlyc3Q6IHRydWUsXG5cdFx0cHJvbWlzZU1vZHVsZTogUHJvbWlzZVxuXHR9LCBvcHRzKTtcblxuXHRjb25zdCBmaWx0ZXIgPSBrZXkgPT4ge1xuXHRcdGNvbnN0IG1hdGNoID0gcGF0dGVybiA9PiB0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgPyBrZXkgPT09IHBhdHRlcm4gOiBwYXR0ZXJuLnRlc3Qoa2V5KTtcblx0XHRyZXR1cm4gb3B0cy5pbmNsdWRlID8gb3B0cy5pbmNsdWRlLnNvbWUobWF0Y2gpIDogIW9wdHMuZXhjbHVkZS5zb21lKG1hdGNoKTtcblx0fTtcblxuXHRsZXQgcmV0O1xuXHRpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChvcHRzLmV4Y2x1ZGVNYWluKSB7XG5cdFx0XHRcdHJldHVybiBvYmouYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHByb2Nlc3NGbihvYmosIG9wdHMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRyZXQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKTtcblx0fVxuXG5cdGZvciAoY29uc3Qga2V5IGluIG9iaikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxuXHRcdGNvbnN0IHggPSBvYmpba2V5XTtcblx0XHRyZXRba2V5XSA9IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nICYmIGZpbHRlcihrZXkpID8gcHJvY2Vzc0ZuKHgsIG9wdHMpIDogeDtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuIl0sIm5hbWVzIjpbInByb2Nlc3NGbiIsImZuIiwib3B0cyIsIlAiLCJwcm9taXNlTW9kdWxlIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvckZpcnN0IiwicHVzaCIsImVyciIsInJlc3VsdCIsIm11bHRpQXJncyIsInJlc3VsdHMiLCJ1bnNoaWZ0IiwiYXBwbHkiLCJtb2R1bGUiLCJleHBvcnRzIiwib2JqIiwiT2JqZWN0IiwiYXNzaWduIiwiZXhjbHVkZSIsIlByb21pc2UiLCJmaWx0ZXIiLCJrZXkiLCJtYXRjaCIsInBhdHRlcm4iLCJ0ZXN0IiwiaW5jbHVkZSIsInNvbWUiLCJyZXQiLCJleGNsdWRlTWFpbiIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwieCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/eth-block-tracker/node_modules/pify/index.js\n");

/***/ })

};
;